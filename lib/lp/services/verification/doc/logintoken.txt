LoginToken
==========

This is the mechanism we use whenever we need to confirm a person has
access to the emails sent to a given email address. The process works as
follows:

    1) User tries to do something in Launchpad that requires the
       confirmation of an email address.

    2) We send a message with a link containing a one-time randomly
       generated token and instructions on how to finish the
       confirmation process.

    3) User follows the link sent by email and provide any extra
       information needed, which varies according to the LoginToken's
       type and submits the page form.

    4) The token is now marked as consumed, together with any other
       tokens of the same type and for the same email address.

    >>> from lp.services.verification.interfaces.authtoken import LoginTokenType
    >>> from lp.registry.model.person import Person
    >>> from lp.services.verification.interfaces.logintoken import (
    ...     ILoginTokenSet)
    >>> from lp.services.database.sqlbase import flush_database_updates
    >>> from lp.services.mail import stub
    >>> import transaction
    >>> foobar = Person.byName('name16')

Let's create a new LoginToken to confirm an email address for foobar.

    >>> token = getUtility(ILoginTokenSet).new(
    ...     foobar, 'foo.bar@canonical.com', 'foo.bar2@canonical.com',
    ...     LoginTokenType.VALIDATEEMAIL)
    >>> token.sendEmailValidationRequest()
    >>> transaction.commit()
    >>> found = False
    >>> found_msg = None
    >>> for from_addr, to_addrs, raw_msg in stub.test_emails:
    ...     if to_addrs == ['foo.bar2@canonical.com']:
    ...         found = True
    ...         found_msg = raw_msg
    >>> assert found
    >>> stub.test_emails = []

The email does not have a precedence header because the user implicitly
requested it to complete their task.

    >>> from lp.services.compat import message_from_bytes

    >>> msg = message_from_bytes(found_msg)
    >>> print(msg['Precedence'])
    None

As the process is not yet finished, foobar will see this as one of their
unconfirmed email addresses.

    >>> flush_database_updates()
    >>> for email in foobar.unvalidatedemails:
    ...     print(email)
    foo.bar2@canonical.com

It's possible to create another token for the same purpose, but this
won't cause that email to show up twice on foobar's list of unconfirmed
emails.

    >>> token2 = getUtility(ILoginTokenSet).new(
    ...     foobar, 'foo.bar@canonical.com', 'foo.bar2@canonical.com',
    ...     LoginTokenType.VALIDATEEMAIL)
    >>> flush_database_updates()
    >>> for email in foobar.unvalidatedemails:
    ...     print(email)
    foo.bar2@canonical.com

Once foobar finished the process, confirming their new email address, we
mark the token as consumed.

    >>> token.date_consumed is not None
    False

    >>> token.consume()
    >>> token.date_consumed is not None
    True

This will also mark the other token as consumed, as the process is
already finished and thus it can't be used anymore.

    >>> token2.date_consumed is not None
    True

Now that the token was consumed, that new email won't show up on
foobar's list of unconfirmed emails anymore.

    >>> flush_database_updates()
    >>> foobar.unvalidatedemails
    []

Consuming a token will only consume that token and other unconsumed
tokens for that email address and token type. To make the process more
efficient, tokens which have already been consumed will not be updated
(see bug 315103). We'll remove the security proxy from the original
token so that we can force its date_consumed attribute to something of
our own making.

    >>> import pytz
    >>> from zope.security.proxy import removeSecurityProxy
    >>> from datetime import datetime

    >>> token = removeSecurityProxy(token)
    >>> token.date_consumed = datetime(
    ...     2009, 1, 1, 16, 56, 59, tzinfo=pytz.timezone('UTC'))

    >>> token3 = getUtility(ILoginTokenSet).new(
    ...     foobar, 'foo.bar@canonical.com', 'foo.bar2@canonical.com',
    ...     LoginTokenType.VALIDATEEMAIL)
    >>> flush_database_updates()

    >>> for email in foobar.unvalidatedemails:
    ...     print(email)
    foo.bar2@canonical.com

    >>> token3.consume()
    >>> token3.date_consumed is not None
    True

The original date_consumed of the first token will not have changed.

    >>> flush_database_updates()

    >>> token = getUtility(ILoginTokenSet).get(token.id)
    >>> print(token.date_consumed)
    2009-01-01 16:56:59+00:00


Searching for LoginTokens
-------------------------

It's possible to search for a LoginToken by the email address, requester
and type associated with it.

    >>> token_set = getUtility(ILoginTokenSet)
    >>> tokens = token_set.searchByEmailRequesterAndType(
    ...     token.email, token.requester, token.tokentype)
    >>> token = getUtility(ILoginTokenSet).get(token.id)

    >>> print(tokens.count())
    3

This can be limited to searching only unconsumed tokens by passing a
`consumed=False` parameter to searchByEmailRequesterAndType().

    >>> tokens = token_set.searchByEmailRequesterAndType(
    ...     token.email, token.requester, token.tokentype, consumed=False)

    >>> print(tokens.count())
    0

Passing `consumed=True` will return only consumed tokens.

    >>> tokens = token_set.searchByEmailRequesterAndType(
    ...     token.email, token.requester, token.tokentype, consumed=True)

    >>> print(tokens.count())
    3

It's also possible to search for tokens by their fingerprint, requester
and type. A valid fingerprint is a 40 character uppercase hex string, so
we'll generate one.

    >>> fingerprint = 'ABCD' * 10

    >>> token = token_set.new(
    ...     foobar, 'foo.bar@canonical.com', 'foo.bar2@canonical.com',
    ...     LoginTokenType.VALIDATEEMAIL, fingerprint=fingerprint)

    >>> tokens = token_set.searchByFingerprintRequesterAndType(
    ...     fingerprint, token.requester, token.tokentype)

    >>> print(tokens.count())
    1

Again, this can be limited to unconsumed tokens.

    >>> tokens = token_set.searchByFingerprintRequesterAndType(
    ...     fingerprint, token.requester, token.tokentype, consumed=False)

    >>> print(tokens.count())
    1

Or consumed ones.

    >>> tokens = token_set.searchByFingerprintRequesterAndType(
    ...     fingerprint, token.requester, token.tokentype, consumed=True)

    >>> print(tokens.count())
    0

If you pass a nonsense value of `consumed` to either
searchByFingerprintRequesterAndType() or searchByEmailRequesterAndType()
you'll raise an error.

    >>> token_set.searchByFingerprintRequesterAndType(
    ...     fingerprint, token.requester, token.tokentype,
    ...     consumed="eggs")
    Traceback (most recent call last):
      ...
    AssertionError: consumed should be one of {True, False, None}.
    Got 'eggs'.

    >>> token_set.searchByEmailRequesterAndType(
    ...     'test@canonical.com', token.requester, token.tokentype,
    ...     consumed="spam")
    Traceback (most recent call last):
      ...
    AssertionError: consumed should be one of {True, False, None}.
    Got 'spam'.

