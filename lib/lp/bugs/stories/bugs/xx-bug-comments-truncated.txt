Bug comments truncated, obfuscated, and hidden
##############################################

There are several scenarios where user messages are altered for
presentation. Messages originating from emails for example often
have unwanted or unnecessary content included.

Truncated text
==============

When displaying the comments on the main bug page they are truncated if
they are too long. In order to show that, let's set the limit to a
small value.

    >>> from lp.services.config import config
    >>> max_comment_data = """
    ...     [malone]
    ...     max_comment_size: 45
    ...     """
    >>> config.push('max_comment_data', max_comment_data)

Bug number two starts with a short comment followed by two longer ones,
the first one will be displayed as it is, and the other two will be
truncated.

    >>> browser.open('http://localhost/bugs/2')
    >>> def print_comments(page):
    ...     """Print all the comments on the page."""
    ...     soup = find_main_content(page)
    ...     comment_divs = soup('div', 'boardCommentBody')
    ...     for div_tag in comment_divs:
    ...         print(div_tag)
    >>> print_comments(browser.contents) #doctest: +ELLIPSIS
    <div class="boardCommentBody">
    <a href="http://bugs...test/tomcat/+bug/2/comments/1/+download">Download
    full text</a> (363 bytes)
      <div class="editable-message-body">
    <div class="comment-text editable-message-text"
         itemprop="commentText"><p>This
    would be a real killer feature. If there...</p></div>
    <p>
    <a href="/tomcat/+bug/2/comments/1">Read more...</a>
    </p>
    </div>
    <div class="editable-message-form" style="display: none">
    <textarea rows="10" style="width: 100%">This would be a real...</textarea>
    <input class="editable-message-update-btn" type="button" value="Update"/>
    <input class="editable-message-cancel-btn" type="button" value="Cancel"/>
    </div>
    </div>
    <div class="boardCommentBody">
    <a href="http://bugs...test/tomcat/+bug/2/comments/2/+download">Download
    full text</a> (364 bytes)
      <div class="editable-message-body">
    <div class="comment-text editable-message-text"
          itemprop="commentText"><p>Oddly enough the bug system seems only
      capabl...</p></div>
    <p>
    <a href="/tomcat/+bug/2/comments/2">Read more...</a>
    </p>
    </div>
    <div class="editable-message-form" style="display: none">
    <textarea rows="10" style="width: 100%">Oddly enough the bug...</textarea>
    <input class="editable-message-update-btn" type="button" value="Update"/>
    <input class="editable-message-cancel-btn" type="button" value="Cancel"/>
    </div>
    </div>

Let's click on the first "Read more..." link.

    >>> browser.getLink("Read more...").click()
    >>> browser.url
    'http://bugs.launchpad.test/tomcat/+bug/2/comments/1'

The whole comment is visible on this page:

    >>> print(browser.title)
    Comment #1 : Bug #2 (blackhole) : Bugs : Tomcat

    >>> print_comments(browser.contents) #doctest: +ELLIPSIS
    <div class="boardCommentBody">
    <div class="editable-message-body">
    <div class="comment-text editable-message-text"
         itemprop="commentText"><p>This would be a real killer feature.
      If there is already code
      to make it possible, why aren't there tons of press announcements
      about the secuirty possibilities. Imagine - no more embarrassing
      emails for ... disappear! I'm sure Redmond will switch over as soon as
      they hear about this. It's not a bug, it's a feature!</p></div>
    </div>
    <div class="editable-message-form" style="display: none">
    <textarea rows="10" style="width: 100%">This would be a...</textarea>
    <input class="editable-message-update-btn" type="button" value="Update"/>
    <input class="editable-message-cancel-btn" type="button" value="Cancel"/>
    </div>
    </div>

    >>> config_data  = config.pop('max_comment_data')


Obfuscated email addresses and hidden content
=============================================

Let's have an No Privileges Person create a message in the style of
an email post to examine the markup rules for obfuscations and
hiding. This message contains a quoted passage, and a signature
with an email address in it. Note: This set of tests is generally
the same rules as xx-question-message.txt; changes here may require
changes to that test.

    >>> user_browser.open('http://bugs.launchpad.test/tomcat/+bug/2')
    >>> print(user_browser.title)
    Bug #2 (blackhole) ... : Bugs : Tomcat
    >>> user_browser.getControl(name='field.comment').value = (
    ...     "-----BEGIN PGP SIGNED MESSAGE-----\n"
    ...     "Hash: SHA1\n"
    ...     "\n"
    ...     "Top quoting is bad netiquette.\n"
    ...     "The leading text will be displayed\n"
    ...     "normally--no markup to hide it from view.\n"
    ...     "\n"
    ...     "Somebody said sometime ago:\n"
    ...     "> 1. Remove the letters  c, j, q, x, w\n"
    ...     ">    from the English Language.\n"
    ...     "> 2. Remove the penny from US currency.\n"
    ...     "\n"
    ...     "--\n"
    ...     "______________________\n"
    ...     "human@example.org\n"
    ...     "Witty signatures rock!\n"
    ...     "\n"
    ...     "-----BEGIN PGP SIGNATURE-----\n"
    ...     "Version: GnuPG v1.4.1 (GNU/Linux)\n"
    ...     "Comment: Using GnuPG with Thunderbird\n"
    ...     "\n"
    ...     "iD8DBQFED60Y0F+nu1YWqI0RAqrNAJ9hTww5vqDbxp4xJS8ek58W\n"
    ...     "T2PIWy0CUJsX8RXSt/M51WE=\n"
    ...     "=J2S5\n"
    ...     "-----END PGP SIGNATURE-----\n")
    >>> user_browser.getControl('Post Comment', index=-1).click()

No Privileges Person is authenticated in user_browser, so they can see
email addresses in messages.

    >>> print(user_browser.title)
    Bug #2 (blackhole) ... : Bugs : Tomcat
    >>> text = find_tags_by_class(
    ...     user_browser.contents, 'boardCommentBody')[-1]
    >>> print(extract_text(text.find_all('p')[-2]))
    --
    ______________________
    human@example.org
    Witty signatures rock!

Unauthenticated users, such as a bot will see the obfuscated email
address, '<email address hidden>'. The anonymous user is
unauthenticated, so they will see the obfuscated email address.

    >>> anon_browser.open('http://bugs.launchpad.test/tomcat/+bug/2')
    >>> print(anon_browser.title)
    Bug #2 (blackhole) ... : Bugs : Tomcat
    >>> text = find_tags_by_class(
    ...     anon_browser.contents, 'boardCommentBody')[-1]
    >>> print(extract_text(text.find_all('p')[-2]))
    --
    ______________________
    &lt;email address hidden&gt;
    Witty signatures rock!

The style and script in the user_browser control the display and behaviour
of content inside tags with the class 'foldable'. The script adds a
link to toggle the display of the foldable text between none and inline.

Signatures are identified by paragraphs with a starting line like '--'.
The entire content of the paragraph is wrapped by a tag of 'foldable'
class.

Pagetests cannot test CSS and JS behaviour.  We can only check that the markup
includes the hooks for the style and script.

    >>> print(text.find_all('p')[-2])
    <p><span class="foldable">--...
    &lt;email address hidden&gt;<br/>
    Witty signatures rock!
    </span></p>

Quoted passages are identified by lines that start with either '>',
'|', or ':'. The lines represent many paragraphs of quoted text,
but we mark the block of content as a single paragraph. The quoted
lines are often preceded by a citation line. Only the quoted lines
are wrapped with a tag of 'foldable' class, citation lines are
always displayed. Again we can continue with the anonymous user to
see the markup.

    >>> print(text.find_all('p')[-3])
    <p>Somebody said sometime ago:<br/>
    <span class="foldable-quoted">
    &gt; 1. Remove the letters  c, j, q, x, w<br/>
    &gt;    from the English Language.<br/>
    &gt; 2. Remove the penny from US currency.
    </span></p>

PGP blocks in signed messages are identified by a paragraph that
starts with '-----BEGIN PGP'.  There are two kinds of PGP blocks,
the notice that the message is signed, and the signature.

    >>> print(text.find_all('p')[0])
    <p><span class="foldable">-----BEGIN PGP SIGNED MESSAGE-----<br/>
    Hash: SHA1
    </span></p>

    >>> print(text.find_all('p')[-1])
    <p><span class="foldable">-----BEGIN PGP SIGNATURE-----<br/>
    Version: GnuPG v1.4.1 (GNU/Linux)<br/>
    Comment: Using GnuPG with Thunderbird<br/>
    <br/>
    iD8DBQFED60Y0F+<wbr/>nu1YWqI0RAqrNAJ<wbr/>...
    T2PIWy0CUJsX8RX<wbr/>St/M51WE=<br/>
    =J2S5<br/>
    -----END PGP SIGNATURE-----
    </span></p>
