Getting remote products from SourceForge projects
=================================================

Launchpad Products can be linked to SourceForge projects by setting
their 'sourceforgeproject' attribute.

It's possible to get a list of the Products that are linked to a
SourceForge project but which have no remote_product set by calling
IProductSet.getSFLinkedProductsWithNoneRemoteProduct().

There are currently no Products in the database linked to a SourceForge
project without a remote_product set.

    >>> from zope.component import getUtility
    >>> from lp.registry.interfaces.product import IProductSet
    >>> products = getUtility(
    ...     IProductSet).getSFLinkedProductsWithNoneRemoteProduct()

    >>> print(products.count())
    0

If we add a Product and link it to a SourceForge project,
getSFLinkedProductsWithNoneRemoteProduct() will return it.

    >>> from lp.testing.factory import LaunchpadObjectFactory
    >>> from transaction import commit
    >>> factory = LaunchpadObjectFactory()

    >>> product_1 = factory.makeProduct(name='my-first-product')
    >>> product_1.sourceforgeproject = 'fronobulator'
    >>> commit()

    >>> products = getUtility(
    ...     IProductSet).getSFLinkedProductsWithNoneRemoteProduct()

    >>> for product in products:
    ...     print(product.name, product.sourceforgeproject)
    my-first-product fronobulator

Define some request mocks so that we don't try to access SourceForge.

    >>> import os.path
    >>> import re
    >>> from urllib.parse import urlsplit
    >>> import responses

    >>> def project_callback(request):
    ...     url = urlsplit(request.url)
    ...     project = re.match(r'.*/projects/([a-z]+)', url.path).group(1)
    ...     file_path = os.path.join(
    ...         os.path.dirname(__file__), os.pardir, 'tests', 'testfiles',
    ...         'sourceforge-project-%s.html' % project)
    ...     with open(file_path) as test_file:
    ...         return (200, {}, test_file.read())
    >>> def add_project_response(requests_mock):
    ...     requests_mock.add_callback(
    ...         'GET', re.compile(r'.*/projects/[a-z]+'),
    ...         callback=project_callback)

    >>> def tracker_callback(request):
    ...     url = urlsplit(request.url)
    ...     group_id = re.match(r'group_id=([0-9]+)', url.query).group(1)
    ...     file_path = os.path.join(
    ...         os.path.dirname(__file__), os.pardir, 'tests', 'testfiles',
    ...         'sourceforge-tracker-%s.html' % group_id)
    ...     with open(file_path) as test_file:
    ...         return (200, {}, test_file.read())
    >>> def add_tracker_response(requests_mock):
    ...     requests_mock.add_callback(
    ...         'GET', re.compile(r'.*/tracker/\?group_id=[0-9]+'),
    ...         match_querystring=True, callback=tracker_callback)

    >>> def print_calls(calls):
    ...     for call in calls:
    ...         url = urlsplit(call.request.url)
    ...         print('Got page %s%s' % (
    ...             url.path, '?%s' % url.query if url.query else ''))

    >>> from lp.bugs.scripts.sfremoteproductfinder import (
    ...     SourceForgeRemoteProductFinder,
    ...     )
    >>> from lp.services.log.logger import FakeLogger
    >>> from lp.testing.layers import LaunchpadZopelessLayer
    >>> finder = SourceForgeRemoteProductFinder(
    ...     txn=LaunchpadZopelessLayer.txn, logger=FakeLogger())

SourceForgeRemoteProductFinder has a method,
getRemoteProductFromSourceForge(), which does all the heavy lifting of finding
the bug tracker for a given SourceForge project. It does this by fetching the
SourceForge project page about each of them. It then finds the link to the
project's 'Tracker' index within that page and follows it. Finally, it
extracts the URL of the project's bug tracker and returns the group_id and
atid therein as an ampersand-separated string.

    >>> with responses.RequestsMock() as requests_mock:
    ...     add_project_response(requests_mock)
    ...     add_tracker_response(requests_mock)
    ...     remote_product = finder.getRemoteProductFromSourceForge(
    ...         'fronobulator')
    ...     print_calls(requests_mock.calls)
    Got page /projects/fronobulator
    Got page /tracker/?group_id=5570

    >>> print(remote_product)
    5570&105570

If an error is raised when trying to fetch the project pages from the
remote server, it will be logged.

    >>> with responses.RequestsMock() as requests_mock:
    ...     requests_mock.add('GET', re.compile(r'.*'), status=500)
    ...     finder.getRemoteProductFromSourceForge('fronobulator')
    ERROR...Error fetching project...: 500 Server Error: Internal Server Error

SourceForgeRemoteProductFinder.setRemoteProductsFromSourceForge()
iterates over the list of products returned by
getSFLinkedProductsWithNoneRemoteProduct() and then calls
getRemoteProductFromSourceForge() to fetch their remote products.

    >>> with responses.RequestsMock() as requests_mock:
    ...     add_project_response(requests_mock)
    ...     add_tracker_response(requests_mock)
    ...     finder.setRemoteProductsFromSourceForge()
    ...     print_calls(requests_mock.calls)
    INFO...Updating 1 Products using SourceForge project data
    DEBUG...Updating remote_product for Product 'my-first-product'
    Got page /projects/fronobulator
    Got page /tracker/?group_id=5570

The product that was linked to SourceForge without a remote_product now has
its remote_product set.

    >>> product_1 = getUtility(IProductSet).getByName('my-first-product')
    >>> print(product_1.remote_product)
    5570&105570

There are no other SourceForge-linked products that have no remote product.

    >>> products = getUtility(
    ...     IProductSet).getSFLinkedProductsWithNoneRemoteProduct()

    >>> print(products.count())
    0


update-sourceforge-remote-products.py
-------------------------------------

There is a cronscript, update-sourceforge-remote-products.py, which will use
the SourceForgeRemoteProductFinder to periodically update Products'
remote_product fields.

    >>> import subprocess
    >>> process = subprocess.Popen(
    ...     ['cronscripts/update-sourceforge-remote-products.py', '-v'],
    ...     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.PIPE, universal_newlines=True)
    >>> (out, err) = process.communicate()
    >>> print(out)
    <BLANKLINE>
    >>> process.returncode
    0

    >>> print(err)
    DEBUG   ...
    INFO    No Products to update.
    INFO    Time for this run: ... seconds.
    DEBUG   updateremoteproduct ran in ...s (excl. load & lock)
    DEBUG   Removing lock file:...
