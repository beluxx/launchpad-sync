BuildFarm page
==============

The BuildFarm page is accessible from the root page, although we don't
link to it yet because we are not yet sure of the benefits of doing
this, since the audience of this page is still restricted.

    >>> anon_browser.open('http://launchpad.test/+builds')

The BuildFarm contains a list of all builders registered in Launchpad
ordered by build domain ('nonvirt' then 'virt'), then processor and
finally by name. A short textual description of their status is listed
in the 'Status' column. There are also 2 portlets on the right-side
containing the build queue status summary for each build domain.

    >>> print(extract_text(find_main_content(anon_browser.contents)))
    The Launchpad build farm
    1 available build machine, 1 disabled and 1 building of a total of
    2 registered.
    386
    frog  Disabled
    386
    bob   Building i386 build of mozilla-firefox 0.9 ...
    Virtual build status
    Architecture  Builders  Queue
    386           0         empty
    Non-virtual build status
    Architecture  Builders  Queue
    386           1         1 job (1 minute)

When building, the 'Status' column contains a link to the
corresponding 'Build' page.

    >>> print(anon_browser.getLink(
    ...     'i386 build of mozilla-firefox 0.9').url)
    http://launchpad.test/ubuntu/+source/mozilla-firefox/0.9/+build/8

The build status portlets contain the number of builds waiting
in queue and the sum of their 'estimated_duration' for each
supported processor on each separated build domain, 'nonvirt'
(PRIMARY and PARTNER) and 'virt'.

    >>> anon_browser.reload()
    >>> print(extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'nonvirt-queue-status')))
    Non-virtual build status
    Architecture  Builders  Queue
    386           1         1 job (1 minute)

    >>> print(extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'virt-queue-status')))
    Virtual build status
    Architecture  Builders  Queue
    386           0         empty

When there are pending builds in the virt domain, they are listed in
the corresponding portlet with their estimated duration as well.

    # Retry a failed build in the virt domain and set its
    # 'estimated_duration' to a known value.
    >>> import datetime
    >>> from zope.component import getUtility
    >>> from zope.security.proxy import removeSecurityProxy
    >>> from lp.buildmaster.enums import BuildStatus
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> login('foo.bar@canonical.com')
    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> failed_build = cprov.archive.getBuildRecords(
    ...     build_state=BuildStatus.FAILEDTOBUILD)[0]
    >>> one_minute = datetime.timedelta(seconds=60)
    >>> failed_build.retry()
    >>> bq = failed_build.buildqueue_record
    >>> removeSecurityProxy(bq).estimated_duration = one_minute
    >>> logout()

    >>> anon_browser.reload()
    >>> print(extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'virt-queue-status')))
    Virtual build status
    Architecture  Builders  Queue
    386           0         1 job (1 minute)

If the archive for the build does not require virtual builders, then
the pending job will appear in the 'nonvirt' queue. Since the build
record already exists, we must manually set it to non-virtualized too.

    >>> login('foo.bar@canonical.com')
    >>> cprov.archive.require_virtualized = False
    >>> removeSecurityProxy(bq).virtualized = False
    >>> logout()

    >>> anon_browser.reload()
    >>> print(extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'virt-queue-status')))
    Virtual build status
    Architecture  Builders  Queue
    386           0         empty

    >>> print(extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'nonvirt-queue-status')))
    Non-virtual build status
    Architecture  Builders  Queue
    386           1         2 jobs (2 minutes)

From this page, users with the appropriate permission can register new
builders.

Anonymous users are not given the option to register a new build
and are not permitted if they go directly to the URL.

    >>> anon_browser.open("http://launchpad.test/+builds/+index")
    >>> anon_browser.getLink("Register a new build machine")
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    zope.testbrowser.browser.LinkNotFoundError

    >>> anon_browser.open("http://launchpad.test/+builds/+new")
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    zope.security.interfaces.Unauthorized: ..., 'launchpad.Admin')

Administrators can create new builders.

    >>> admin_browser.open("http://launchpad.test/+builds/+index")

    >>> admin_browser.getLink("Register a new build machine").click()

    >>> print(admin_browser.title)
    Register a new...

Registering a new builder involves setting its name, title and corresponding
location.

    >>> admin_browser.getControl('Name').value = 'tubaina'
    >>> admin_browser.getControl('Title').value = 'Tubaina'
    >>> admin_browser.getControl(
    ...     'URL').value = 'http://tubaina.buildd'

Additionaly, the administrator can select the processor corresponding
to the builder.

    >>> admin_browser.getControl(name='field.processors').options
    ['386', 'amd64', 'hppa']
    >>> admin_browser.getControl(name='field.processors').value
    []
    >>> admin_browser.getControl(name='field.processors').value = [
    ...     'amd64', 'hppa']

By default, builders are created as 'Publicly Visible', although the
administrator can change this value during creation time.

    >>> print(admin_browser.getControl('Publicly Visible').selected)
    True
    >>> admin_browser.getControl('Publicly Visible').selected = False

Builder as created as 'non-virtual' by default, but the administrator
can also modify that while creating a builder.

    >>> print(admin_browser.getControl('Virtualized').selected)
    False
    >>> admin_browser.getControl('VM host').value
    ''
    >>> admin_browser.getControl('VM reset protocol').value
    ['']

    >>> admin_browser.getControl('Virtualized').selected = True
    >>> admin_browser.getControl('VM host').value = 'tubaina-host.ppa'
    >>> admin_browser.getControl('VM reset protocol').value = ['PROTO_1_1']

Once the form is submitted the users will be redirected to the
just-created builder page.


    >>> from lp.services.helpers import backslashreplace
    >>> admin_browser.getControl("Register builder").click()
    >>> print(backslashreplace(admin_browser.title))
    Tubaina : Build Farm
    >>> 'amd64 and hppa' in admin_browser.contents
    True

    >>> admin_browser.getLink("Change details").click()
    >>> admin_browser.getControl('VM host').value
    'tubaina-host.ppa'
    >>> admin_browser.getControl('VM reset protocol').value
    ['PROTO_1_1']
