# Copyright 2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

__all__ = [
    'Vulnerability',
    'VulnerabilitySet',
    ]

import pytz
from storm.locals import (
    Bool,
    DateTime,
    Int,
    Reference,
    Unicode,
    )
from zope.interface import implementer

from lp.bugs.interfaces.bugtask import BugTaskImportance
from lp.bugs.interfaces.vulnerability import (
    IBugVulnerabilitySet,
    IVulnerability,
    IVulnerabilityActivity,
    IVulnerabilityActivitySet,
    VulnerabilityChange,
    VulnerabilityStatus,
    )
from lp.services.database.constants import UTC_NOW
from lp.services.database.enumcol import DBEnum
from lp.services.database.interfaces import IStore
from lp.services.database.stormbase import StormBase


@implementer(IVulnerability)
class Vulnerability(StormBase):
    __storm_table__ = 'Vulnerability'

    id = Int(primary=True)

    distribution_id = Int(name="distribution", allow_none=True, default=None)
    distribution = Reference(distribution_id, "Distribution.id")

    cve_id = Int(name="cve", allow_none=True, default=None)
    cve = Reference(cve_id, "Cve.id")

    status = DBEnum(name='status', allow_none=True,
                    enum=VulnerabilityStatus)

    description = Unicode(name='description', allow_none=True)

    notes = Unicode(name='notes', allow_none=True)

    mitigation = Unicode(name='mitigation', allow_none=True)

    importance = DBEnum(
        name='importance', allow_none=False,
        enum=BugTaskImportance,
        default=BugTaskImportance.UNDECIDED)

    importance_explanation = Unicode(
        name='importance_explanation', allow_none=True)

    private = Bool(name='private', allow_none=False, default=False)

    def __init__(self, distribution, cve, status, description,
                 notes, mitigation, importance, importance_explanation,
                 private):
        super().__init__()
        self.distribution = distribution
        self.cve = cve
        self.status = status
        self.description = description
        self.notes = notes
        self.mitigation = mitigation
        self.importance = importance
        self.importance_explanation = importance_explanation
        self.private = private


@implementer(IVulnerability)
class VulnerabilitySet:

    def new(self, distribution, cve, status, description,
            notes, mitigation, importance, importance_explanation,
            private):
        """See `VulnerabilitySet`."""
        store = IStore(Vulnerability)
        vulnerability = Vulnerability(distribution, cve, status, description,
                                      notes, mitigation, importance,
                                      importance_explanation, private)
        store.add(vulnerability)
        return vulnerability

    def getByID(self, id):
        return IStore(
            Vulnerability).find(Vulnerability, id=id).one()


@implementer(IVulnerabilityActivity)
class VulnerabilityActivity(StormBase):
    __storm_table__ = 'VulnerabilityActivity'

    id = Int(primary=True)

    vulnerability_id = Int(name="vulnerability", allow_none=True, default=None)
    vulnerability = Reference(vulnerability_id, "Vulnerability.id")

    changer_id = Int(name="changer", allow_none=True, default=None)
    changer = Reference(changer_id, "Person.id")

    date_changed = DateTime(
        name='date_changed', tzinfo=pytz.UTC, allow_none=False)

    what_changed = DBEnum(name='what_changed', allow_none=True,
                          enum=VulnerabilityChange)

    old_value = Unicode(name='old_value', allow_none=True)

    new_value = Unicode(name='new_value', allow_none=True)

    def __init__(self, vulnerability, changer, what_changed=None,
                 old_value=None, new_value=None):
        super().__init__()
        self.vulnerability = vulnerability
        self.changer = changer
        self.what_changed = what_changed
        self.old_value = old_value
        self.new_value = new_value
        self.date_changed = UTC_NOW


@implementer(IVulnerabilityActivitySet)
class VulnerabilityActivitySet:

    def new(self, vulnerability, changer,
            what_changed,
            old_value=None, new_value=None):
        """See `VulnerabilitySet`."""
        store = IStore(VulnerabilityActivity)
        activity = VulnerabilityActivity(vulnerability, changer,
                                         what_changed,
                                         old_value, new_value)
        store.add(activity)
        return activity


class BugVulnerability(StormBase):

    __storm_table__ = 'BugVulnerability'
    __storm_primary__ = 'bug_id', 'vulnerability_id'

    bug_id = Int(name="bug", allow_none=True, default=None)
    bug = Reference(bug_id, "Bug.id")

    vulnerability_id = Int(name="vulnerability", allow_none=True, default=None)
    vulnerability = Reference(vulnerability_id, "Vulnerability.id")

    def __init__(self, vulnerability, bug):
        super().__init__()
        self.vulnerability = vulnerability
        self.bug = bug


@implementer(IBugVulnerabilitySet)
class BugVulnerabilitySet:

    def new(self, vulnerability, bug):
        """See `BugVulnerability`."""
        store = IStore(BugVulnerability)
        bugVulnerability = BugVulnerability(vulnerability, bug)
        store.add(bugVulnerability)
        return bugVulnerability
