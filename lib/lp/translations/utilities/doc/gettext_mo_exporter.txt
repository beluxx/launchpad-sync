MO file format exporter
=======================

MO files are binary files compiled from human readable PO files by an
external program, usually msgfmt(1).  One mnemonic to help you remember
these is that MO files are machine friendly and PO files are people
friendly.

You can read more about MO file format on:

https://www.gnu.org/software/gettext/manual/html_node/MO-Files.html

    >>> from zope.interface.verify import verifyObject
    >>> from lp.services.helpers import bytes_to_tarfile
    >>> from lp.translations.interfaces.translationexporter import (
    ...     ITranslationFormatExporter)
    >>> from lp.translations.utilities.gettext_mo_exporter import (
    ...     GettextMOExporter)
    >>> from lp.translations.utilities.gettext_po_parser import (
    ...     POParser)
    >>> from lp.translations.utilities.tests.helpers import (
    ...     is_valid_mofile)

Interface implementation
------------------------

    >>> verifyObject(ITranslationFormatExporter, GettextMOExporter())
    True

exportTranslationFiles()
------------------------

With exportTranslationFiles method, we can get a compiled .po file from a
TranslationFileData.

To get a TranslationFileData, we use the GettextPOImporter class.

    >>> from lp.translations.interfaces.translationfileformat import (
    ...     TranslationFileFormat)
    >>> parser = POParser()
    >>> file_content = '''
    ...     msgid ""
    ...     msgstr ""
    ...     "POT-Creation-Date: 2005-08-10 11:00:00+0000\\n"
    ...     "PO-Revision-Date: 2005-08-11 12:00:00+0000\\n"
    ...     "Last-Translator: Carlos <carlos@canonical.com>\\n"
    ...     "MIME-Version: 1.0\\n"
    ...     "Content-Type: text/plain; charset=UTF-8\\n"
    ...     "Content-Transfer-Encoding: 8bit\\n"
    ...
    ...     msgid "foo"
    ...     msgstr "bar"
    ...     '''.encode('UTF-8')
    >>> translation_file_es = parser.parse(file_content)
    >>> translation_file_es.path = 'foo/es.po'
    >>> translation_file_es.language_code = 'es'
    >>> translation_file_es.translation_domain = 'foo'
    >>> translation_file_es.format = TranslationFileFormat.PO

When we export a single file, we get a .mo file as output.

    >>> from lp.translations.utilities.translation_export import (
    ...     ExportFileStorage)
    >>> exporter = GettextMOExporter()
    >>> storage = ExportFileStorage()
    >>> exporter.exportTranslationFile(translation_file_es, storage)
    >>> exported_file = storage.export()
    >>> print(exported_file.content_type)
    application/x-gmo
    >>> is_valid_mofile(exported_file.read())
    True

When we export more than one file, we get a tarball.

    >>> from lp.translations.interfaces.translationexporter import (
    ...     ITranslationExporter)
    >>> translation_file_sr = parser.parse(file_content)
    >>> translation_file_sr.path = 'foo/sr.po'
    >>> translation_file_sr.language_code = 'sr'
    >>> translation_file_sr.translation_domain = 'foo'
    >>> translation_file_sr.format = TranslationFileFormat.PO
    >>> translation_exporter = getUtility(ITranslationExporter)
    >>> exported_file = translation_exporter.exportTranslationFiles(
    ...     [translation_file_es, translation_file_sr],
    ...     target_format=TranslationFileFormat.MO)
    >>> print(exported_file.content_type)
    application/x-gtar
    >>> file_content = exported_file.read()
    >>> is_valid_mofile(file_content)
    False
    >>> tarfile = bytes_to_tarfile(file_content)
    >>> for member in tarfile.getmembers():
    ...     if member.isreg():
    ...         size = len(tarfile.extractfile(member).read())
    ...         desc = 'non-empty' if size else 'empty'
    ...     elif member.isdir():
    ...         desc = 'dir'
    ...     else:
    ...         desc = 'unknown'
    ...     print("| %9s | %s" % (desc, member.name))
    | dir       | es
    | dir       | es/LC_MESSAGES
    | non-empty | es/LC_MESSAGES/foo.mo
    | dir       | sr
    | dir       | sr/LC_MESSAGES
    | non-empty | sr/LC_MESSAGES/foo.mo


PO compiler helper class
------------------------

Launchpad gets .po file content and 'compiles' it to get
the binary form.

    >>> from lp.translations.utilities.gettext_mo_exporter import (
    ...     POCompiler)
    >>> compiler = POCompiler()


POCompiler.compile gets a string with .po file content and gives you
a .mo file binary stream.

    >>> mofile_content = compiler.compile(b'''
    ... msgid "foo"
    ... msgstr "bar"
    ... ''')
    >>> is_valid_mofile(mofile_content)
    True

Though, if we provide it with something that is not a .po file content, we
get an export error exception:

    >>> mofile = compiler.compile(b'''
    ... blah
    ... ''')
    Traceback (most recent call last):
    ...
    lp.translations.interfaces.translationexporter.UnknownTranslationExporterError: ...
