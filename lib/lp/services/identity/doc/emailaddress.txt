Email Addresses
===============

In Launchpad we use email addresses to uniquely identify a person. This is why
email addresses must be unique.

    >>> from lp.services.identity.interfaces.emailaddress import (
    ...     IEmailAddress, IEmailAddressSet)
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> emailset = getUtility(IEmailAddressSet)
    >>> person = factory.makePerson()

We can get an email address through IEmailAddressSet.getByEmail().

    >>> ignored = login_person(person)
    >>> email = emailset.getByEmail(person.preferredemail.email)
    >>> email == person.preferredemail
    True

Note that IEmailAddressSet.getByEmail() is not case-sensitive.

    >>> email == emailset.getByEmail(email.email.upper())
    True

Email addresses provide both IEmailAddress and IHasOwner.

    >>> from lp.registry.interfaces.role import IHasOwner
    >>> verifyObject(IEmailAddress, email)
    True
    >>> verifyObject(IHasOwner, email)
    True

Trying to register an email address that already exists will raise an
exception.

    >>> personset = getUtility(IPersonSet)
    >>> foobar = personset.getByName('name16')
    >>> emailset.new(email.email, foobar)
    Traceback (most recent call last):
    ...
    lp.services.identity.interfaces.emailaddress.EmailAddressAlreadyTaken: The email address '...' is already registered.

The email address verification is case insensitive as well:

    >>> emailset.new(email.email.upper(), foobar)
    Traceback (most recent call last):
    ...
    lp.services.identity.interfaces.emailaddress.EmailAddressAlreadyTaken: The email address '...' is already registered.

Registering a new email address works -- and preserves case -- though:

    >>> emailaddress = emailset.new(
    ...     'oink@Canonical.com', foobar)
    >>> print(emailaddress.email)
    oink@Canonical.com

Generating SHA1 hashes for RDF output is easy:

    >>> emailaddress.rdf_sha1
    '3738A7C5FB02B103FEF1F3CDAA9B086B6C382F6E'

There's a convenience method on IEmailAddressSet to pull preferred email
addresses for a set of people:

    >>> guadamen = personset.getByName('guadamen')
    >>> for emailaddress in emailset.getPreferredEmailForPeople(
    ...         guadamen.allmembers):
    ...     print(emailaddress.email)
    celso.providelo@canonical.com
    colin.watson@ubuntulinux.com
    daniel.silverstone@canonical.com
    edgar@monteparadiso.hr
    foo.bar@canonical.com
    jeff.waugh@ubuntulinux.com
    limi@plone.org
    mark@example.com
    steve.alexander@ubuntulinux.com
    support@ubuntu.com


Deleting email addresses
------------------------

Email addresses may be deleted if they're not a person's preferred one
or the address of a team's mailing list.

    >>> ignored = login_person(foobar)
    >>> emailaddress = emailset.getByEmail('oink@canonical.com')
    >>> emailaddress.destroySelf()
    >>> print(emailset.getByEmail('oink@canonical.com'))
    None

Otherwise, UndeletableEmailAddress is raised.

    >>> foobar.preferredemail.destroySelf()
    Traceback (most recent call last):
    ...
    lp.services.identity.model.emailaddress.UndeletableEmailAddress: This is a person's preferred email...

    >>> from lp.registry.tests.mailinglists_helper import (
    ...     new_list_for_team)
    >>> mailing_list = new_list_for_team(guadamen)
    >>> email = emailset.getByEmail(guadamen.mailing_list.address)
    >>> email.destroySelf()
    Traceback (most recent call last):
    ...
    lp.services.identity.model.emailaddress.UndeletableEmailAddress: This is the email address of a team's mailing list...
