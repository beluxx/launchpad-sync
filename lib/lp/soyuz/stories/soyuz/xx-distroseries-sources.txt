=================================
DistroSeries Source Package Pages
=================================

In Launchpad, SourcePackageReleases are directly attached to a
DistroSeries by a publication record (see doc/publishing.txt).

A SourcePackage, or better named DistroSeriesSourcePackage, is a
collection of SourcePackageReleases once published in a given
DistroSeries.

SourcePackages are available through the web UI after traversing
through a DistroSeries and SourceName. The URL schema is:

$LP/ubuntu/$DISTRORELEASE/+source/$SOURCENAME

A SourcePackageRelease once published in a Distribution is represented
by a DistributionSourcePackageRelease and easily reached by traversing a
DistributionSourcePackage instance with a valid version, like:

$LP/ubuntu/+source/$SOURCENAME/$VERSION

The path to click here is a bit involved, since the source package
page can only be reached by searching or getting a list of all
published packages. We will do the last:

Starting from distribution page:

    >>> browser.open('http://launchpad.test/ubuntu')

Search for mozilla in the packages:

    >>> browser.getControl(name='text').value = 'mozilla'
    >>> browser.getControl("Find a Package").click()

Let's have a look at the firefox DistributionSourcePackage.

    >>> browser.getLink("mozilla-firefox").click()
    >>> print(browser.url)
    http://launchpad.test/ubuntu/+source/mozilla-firefox

Click the "See full publishing history" link to see specific information
about Firefox's publishing history.

    >>> browser.getLink("View full publishing history").click()
    >>> table = find_tag_by_id(browser.contents, 'publishing-summary')
    >>> print(extract_text(table))  # noqa
    Date                      Status     Target   Pocket   Component   Section   Version
    2006-02-13 12:19:00 UTC   Published  Warty    release  main        web       0.9
    Published on 2006-02-13
    2004-09-27 11:57:13 UTC   Pending    Warty   release   main        editors   0.9
    >>> print(table.find_all("tr")[2].td["colspan"])
    8

Jump back to the DistributionSourcePackage page to continue the tests:

    >>> browser.open('http://launchpad.test/ubuntu/+source/mozilla-firefox')

By clicking in the 'target' distroseries we will get to the
SourcePackage page:

    >>> browser.getLink("The Warty Warthog Release").click()
    >>> browser.url
    'http://launchpad.test/ubuntu/warty/+source/mozilla-firefox'

Any user can see the package summary.

    >>> content = browser.contents
    >>> print(extract_text(find_tag_by_id(content, 'summary')))
    mozilla-firefox: Mozilla Firefox Web Browser
    mozilla-firefox-data: No summary available for mozilla-firefox-data in
    ubuntu warty.

This page provides its versions publications organised by pocket.
We can see 'mozilla-firefox' is published once in pocket RELEASE:

    >>> print(extract_text(find_tag_by_id(content, 'publishing_history')))
    Release
    The package versions that were published when the distribution release
    was made.
    mozilla-firefox 0.9 (main)

The user can also download the files for the "currentrelease" (last
published version) if they are available:

    >>> print(extract_text(find_portlet(
    ...     content, 'Download files from current release (0.9)')))
    Download files from current release (0.9)
    File Size SHA-256 Checksum
    firefox_0.9.2.orig.tar.gz 9.5 MiB ...

    >>> print(browser.getLink("firefox_0.9.2.orig.tar.gz").url)  # noqa
    http://launchpad.test/ubuntu/+archive/primary/+sourcefiles/mozilla-firefox/0.9/firefox_0.9.2.orig.tar.gz

This page also provides links to the binary packages generated by this
source in a specfic architecture:

    >>> print(extract_text(find_tag_by_id(content, 'binaries')))
    mozilla-firefox
    (hppa)
    (i386)
    mozilla-firefox-data
    (hppa)
    (i386)

Let's check the link to the binary package built on i386 architecture,
a DistroArchSeriesBinaryPackage:

    >>> print(browser.getLink("i386").url)
    http://launchpad.test/ubuntu/warty/i386/mozilla-firefox

More information about this page can be found at
17-distroarchseries-binpackages.txt.

Move back to the SourcePackage page to continue the tests:

    >>> browser.open(
    ...     'http://launchpad.test/ubuntu/breezy-autotest/+source/'
    ...     'commercialpackage')

PackageRelationships, 'builddepends', 'builddependsindep', 'builddependsarch',
'build_conflicts', 'build_conflicts_indep', and 'build_conflicts_arch' for the
source in question are provided in this page.

Even when the relationship section is empty they are presented,
keeping the page format constant.

    >>> depends_section = find_tag_by_id(browser.contents, 'depends')
    >>> parse_relationship_section(str(depends_section))
    EMPTY SECTION

    >>> dependsindep_section = find_tag_by_id(
    ...     browser.contents, 'dependsindep')
    >>> parse_relationship_section(str(dependsindep_section))
    EMPTY SECTION

    >>> dependsarch_section = find_tag_by_id(browser.contents, 'dependsarch')
    >>> parse_relationship_section(str(dependsarch_section))
    EMPTY SECTION

    >>> conflicts_section = find_tag_by_id(browser.contents, 'conflicts')
    >>> parse_relationship_section(str(conflicts_section))
    EMPTY SECTION

    >>> conflictsindep_section = find_tag_by_id(
    ...     browser.contents, 'conflictsindep')
    >>> parse_relationship_section(str(conflictsindep_section))
    EMPTY SECTION

    >>> conflictsarch_section = find_tag_by_id(
    ...     browser.contents, 'conflictsarch')
    >>> parse_relationship_section(str(conflictsarch_section))
    EMPTY SECTION

Let's inspect a page with non-empty relationships.

    >>> browser.open(
    ...     'http://launchpad.test/ubuntu/warty/+source/mozilla-firefox')

    >>> depends_section = find_tag_by_id(browser.contents, 'depends')
    >>> parse_relationship_section(str(depends_section))
    TEXT: "gcc-3.4 (>= 3.4.1-4sarge1)"
    TEXT: "gcc-3.4 (<< 3.4.2)"
    TEXT: "gcc-3.4-base"
    TEXT: "libc6 (>= 2.3.2.ds1-4)"
    TEXT: "libstdc++6-dev (>= 3.4.1-4sarge1)"
    LINK: "pmount" -> http://launchpad.test/ubuntu/warty/+package/pmount

    >>> dependsindep_section = find_tag_by_id(
    ...     browser.contents, 'dependsindep')
    >>> parse_relationship_section(str(dependsindep_section))
    TEXT: "bacula-common (= 1.34.6-2)"
    TEXT: "bacula-director-common (= 1.34.6-2)"
    LINK: "pmount" -> http://launchpad.test/ubuntu/warty/+package/pmount
    TEXT: "postgresql-client (>= 7.4)"

    >>> dependsarch_section = find_tag_by_id(browser.contents, 'dependsarch')
    >>> parse_relationship_section(str(dependsarch_section))
    EMPTY SECTION

    >>> conflicts_section = find_tag_by_id(browser.contents, 'conflicts')
    >>> parse_relationship_section(str(conflicts_section))
    TEXT: "gcc-4.0"
    LINK: "pmount" -> http://launchpad.test/ubuntu/warty/+package/pmount

    >>> conflictsindep_section = find_tag_by_id(
    ...     browser.contents, 'conflictsindep')
    >>> parse_relationship_section(str(conflictsindep_section))
    TEXT: "gcc-4.0-base"
    LINK: "pmount" -> http://launchpad.test/ubuntu/warty/+package/pmount

    >>> conflictsarch_section = find_tag_by_id(
    ...     browser.contents, 'conflictsarch')
    >>> parse_relationship_section(str(conflictsarch_section))
    EMPTY SECTION


The '+changelog' page provides an aggregation of the changelogs for
SourcePackageReleases published in this DistroSeries.

The text is generated automatically by appending:

{{{
  SOURCENAME (VERSION) UPLOADDISTRORELEASE; urgency=URGENCY

  CHANGELOG

  -- UPLOADER-RFC-822 TIMESTAMP
}}}

for each published version.

    >>> browser.getLink("View changelog").click()
    >>> browser.url
    'http://launchpad.test/ubuntu/warty/+source/mozilla-firefox/+changelog'

    >>> tag = find_tag_by_id(browser.contents, 'mozilla-firefox_0.9')
    >>> print(extract_text(tag))
    Mozilla dummy Changelog......


Back to the SourcePackage page:

    >>> browser.open(
    ...     'http://launchpad.test/ubuntu/warty/+source/mozilla-firefox')

Any user can see the copyright for the most recent source package release.

    >>> import transaction
    >>> from zope.component import getUtility
    >>> from zope.security.proxy import removeSecurityProxy
    >>> from lp.app.interfaces.launchpad import ILaunchpadCelebrities

    >>> login('admin@canonical.com')
    >>> ubuntu = getUtility(ILaunchpadCelebrities).ubuntu
    >>> warty_firefox = ubuntu.getSeries(
    ...     'warty').getSourcePackage('mozilla-firefox')
    >>> source_package_release = warty_firefox.distinctreleases[0]
    >>> removeSecurityProxy(source_package_release).copyright = (
    ...     'Copyright 2010 Ford Prefect.')
    >>> transaction.commit()
    >>> logout()

    >>> browser.getLink('copyright').click()
    >>> print(browser.title)
    Copyright : Warty (4.10) : mozilla-firefox package : Ubuntu

    >>> print(extract_text(find_tag_by_id(browser.contents, 'copyright')))
    Copyright 2010 Ford Prefect.

    >>> browser.open(
    ...     'http://launchpad.test/ubuntu/warty/+source/mozilla-firefox')


We can visit a specific published release of "mozilla-firefox", this
page is provided by an DistributionSourcePackageRelease instance:

    >>> browser.getLink("mozilla-firefox 0.9").click()
    >>> browser.url
    'http://launchpad.test/ubuntu/+source/mozilla-firefox/0.9'

The deprecated DistroSeriesSourcePackageRelease page redirects to the
same place.

    >>> browser.open(
    ...     'http://launchpad.test/ubuntu/warty/+source/mozilla-firefox/0.9')
    >>> browser.url
    'http://launchpad.test/ubuntu/+source/mozilla-firefox/0.9'

There we can see the respective 'changelog' content for this version:

    >>> tag = find_tag_by_id(browser.contents, 'mozilla-firefox_0.9')
    >>> print(extract_text(tag))
    Mozilla dummy Changelog......

With the possibility to download the entire changesfile (if available):

    >>> print(browser.getLink('View changes file').url)
    http://.../52/mozilla-firefox_0.9_i386.changes

And also download the files contained in this source, like '.orig',
'.diff' and the DSC:

    >>> print(extract_text(find_portlet(browser.contents, 'Downloads')))
    Downloads
    File Size SHA-256 Checksum
    firefox_0.9.2.orig.tar.gz 9.5 MiB ...

    >>> print(browser.getLink("firefox_0.9.2.orig.tar.gz").url)  # noqa
    http://launchpad.test/ubuntu/+archive/primary/+sourcefiles/mozilla-firefox/0.9/firefox_0.9.2.orig.tar.gz

If we go to the same page for alsa-utils, the changelog has text that is
linkified.

    >>> browser.open(
    ...  'http://launchpad.test/ubuntu/+source/alsa-utils/1.0.9a-4ubuntu1')

This changelog has got text of the form 'LP: #nnn' where nnn is a bug number,
and this is linkified so that when clicked it takes us to the bug page:

    >>> browser.getLink('#10').url
    'http://launchpad.test/bugs/10'

The same page for commercialpackage has an email address in the
changelog that is recognised in Launchpad.  It is linkified to point at
the profile page for that person:

    >>> user_browser.open(
    ...     "http://launchpad.test/ubuntu/+source/commercialpackage/1.0-1")
    >>> print(user_browser.getLink('foo.bar@canonical.com').url)
    http://launchpad.test/~name16

Let's check how the page behaves if we no files are present:

    >>> browser.open(
    ...     'http://launchpad.test/ubuntu/+source/cnews/cr.g7-37')

The Downloads portlet indicates that no files are available.

    >>> print(extract_text(find_portlet(browser.contents, 'Downloads')))
    Downloads
    No files available for download.
    No changes file available.


DistroSeries Partner Source Package Pages
=========================================

Partner packages in Launchpad differ from regular packages by two things:
1. Their component is 'partner'
2. Their archive is the partner archive, rather than the primary archive.

Their page functionality is identical to regular packages, which is described
in the previous section of this page.

    >>> browser.open(
    ...   "http://launchpad.test/ubuntu/breezy-autotest/"
    ...   "+source/commercialpackage")

This page provides its versions publications organised by pocket.
We can see 'commercialpackage' is published once in pocket RELEASE:

    >>> print(browser.getLink('commercialpackage 1.0-1').url)
    http://launchpad.test/ubuntu/+source/commercialpackage/1.0-1

The user can also download the files for the "currentrelease" (last
published version) if they are available:

    >>> print(extract_text(find_portlet(
    ...     browser.contents, 'Download files from current release (1.0-1)')))
    Download files from current release (1.0-1)
    File Size SHA-256 Checksum
    commercialpackage_1.0.orig.tar.gz 179 bytes ...
    commercialpackage_1.0-1.diff.gz 610 bytes ...
    commercialpackage_1.0-1.dsc 567 bytes ...

    >>> print(browser.getLink("commercialpackage_1.0.orig.tar.gz").url)
    ... # noqa
    http://launchpad.test/ubuntu/+archive/partner/+sourcefiles/commercialpackage/1.0-1/commercialpackage_1.0.orig.tar.gz
    >>> print(browser.getLink("commercialpackage_1.0-1.diff.gz").url)  # noqa
    http://launchpad.test/ubuntu/+archive/partner/+sourcefiles/commercialpackage/1.0-1/commercialpackage_1.0-1.diff.gz
    >>> print(browser.getLink("commercialpackage_1.0-1.dsc").url)  # noqa
    http://launchpad.test/ubuntu/+archive/partner/+sourcefiles/commercialpackage/1.0-1/commercialpackage_1.0-1.dsc

This page also provides links to the binary packages generated by this
source in a specfic architecture:

    >>> print(extract_text(find_tag_by_id(browser.contents, 'binaries')))
    commercialpackage (i386)

Let's check the link to the binary package built on i386 architecture,
a DistroArchSeriesBinaryPackage:

    >>> print(browser.getLink("i386").url)
    http://launchpad.test/ubuntu/breezy-autotest/i386/commercialpackage

More information about this page can be found at
17-distroarchseries-binpackages.txt.

The '+changelog' page provides an aggregation of the changelogs for
SourcePackageReleases published in this DistroSeries.

The text is generated automatically by appending:

{{{
  SOURCENAME (VERSION) UPLOADDISTRORELEASE; urgency=URGENCY

  CHANGELOG

  -- UPLOADER-RFC-822 TIMESTAMP
}}}

for each published version.

    >>> browser.getLink("View changelog").click()
    >>> browser.url  # noqa
    'http://launchpad.test/ubuntu/breezy-autotest/+source/commercialpackage/+changelog'

    >>> tag = find_tag_by_id(browser.contents, 'commercialpackage_1.0-1')
    >>> print(extract_text(tag))
    commercialpackage...


Back to the SourcePackage page:

    >>> browser.open(
    ...     "http://launchpad.test/ubuntu/breezy-autotest/+source/"
    ...     "commercialpackage")

We can visit a specific published release of "commercialpackage", this
page is provided by a DistributionSourcePackageRelease instance:

    >>> browser.getLink("commercialpackage 1.0-1").click()
    >>> browser.url
    'http://launchpad.test/ubuntu/+source/commercialpackage/1.0-1'

There we can see the respective 'changelog' content for this version:

    >>> tag = find_tag_by_id(browser.contents, 'commercialpackage_1.0-1')
    >>> print(extract_text(tag))
    commercialpackage...

With the possibility to download the entire changesfile (if available):

    >>> print(browser.getLink('View changes file').url)
    http://.../65/commercialpackage_1.0-1_source.changes

And also download the files contained in this source, like '.orig',
'.diff' and the DSC:

    >>> print(extract_text(find_portlet(browser.contents, 'Downloads')))
    Downloads
    File Size SHA-256 Checksum
    commercialpackage_1.0.orig.tar.gz 179 bytes ...
    commercialpackage_1.0-1.diff.gz 610 bytes ...
    commercialpackage_1.0-1.dsc 567 bytes ...

    >>> print(browser.getLink("commercialpackage_1.0.orig.tar.gz").url)
    ... # noqa
    http://launchpad.test/ubuntu/+archive/partner/+sourcefiles/commercialpackage/1.0-1/commercialpackage_1.0.orig.tar.gz
    >>> print(browser.getLink("commercialpackage_1.0-1.diff.gz").url)  # noqa
    http://launchpad.test/ubuntu/+archive/partner/+sourcefiles/commercialpackage/1.0-1/commercialpackage_1.0-1.diff.gz
    >>> print(browser.getLink("commercialpackage_1.0-1.dsc").url)  # noqa
    http://launchpad.test/ubuntu/+archive/partner/+sourcefiles/commercialpackage/1.0-1/commercialpackage_1.0-1.dsc


Tracing copied sources
======================

Any user can view the publishing history details for a source in the
distribution PRIMARY archive, specifically in the
DistributionSourcePackage 'Full publishing history' page. It offers
enough information to trace copied sources.

If the publishing is a copy, the original location, distribution,
distroseries and archive are shown.

    >>> anon_browser.open(
    ...     'http://launchpad.test/ubuntu/+source/alsa-utils/'
    ...     '+publishinghistory')

    >>> print(extract_text(
    ...    find_tag_by_id(anon_browser.contents, 'publishing-summary')))
    ... # noqa
    Date           Status     Target    Pocket  Component Section Version
    2006-02-15 ... Pending    Warty     release main      editors 1.0.9a-4ubuntu1
      Copied from ubuntu hoary in Primary Archive for Ubuntu Linux
    2005-09-16 ... Published  Warty     release main      base    1.0.9a-4
      Published on 2005-09-16
      Copied from debian sid in Primary Archive for Ubuntu Linux
    2005-09-15 ... Superseded Hoary     release main      editors 1.0.9a-4
      Removed from disk on 2005-09-15.
      Removal requested on 2005-09-15.
      Superseded on 2005-09-15 by alsa-utils - 1.0.9a-4ubuntu1
      Published on 2005-09-15
      Copied from debian sid in Primary Archive for Ubuntu Linux
    2005-09-15 ... Published  Hoary     release main      base    1.0.9a-4ubuntu1
      Published on 2005-09-15
    2005-09-15 ... Published  Warty     release main      base    1.0.8-1ubuntu1
      Published on 2005-09-15
