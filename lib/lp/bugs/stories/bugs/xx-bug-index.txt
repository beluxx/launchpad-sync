Bug report index page
=====================

The bug index is the main page of a bug report. It contains all sorts of
interesting things related to fixing a problem: the bug description,
comments, external references, details of places in which this bug needs
to be fixed, and so forth.

    >>> anon_browser.open(
    ...     "http://launchpad.test/debian/+source/mozilla-firefox/+bug/2")
    >>> anon_browser.title
    '...Blackhole Trash folder...'

The breadcrumbs and other navigation include a link to the bug itself.

    >>> print_location(anon_browser.contents)
    Hierarchy: Debian > mozilla-firefox package
    Tabs:
    * Overview - http://launchpad.test/debian/+source/mozilla-firefox
    * Code - http://code.launchpad.test/debian/+source/mozilla-firefox
    * Bugs (selected) -
      http://bugs.launchpad.test/debian/+source/mozilla-firefox
    * Blueprints - not linked
    * Translations -
      http://translations.launchpad.test/debian/+source/mozilla-firefox
    * Answers - http://answers.launchpad.test/debian/+source/mozilla-firefox
    Main heading: Blackhole Trash folder

The page features a table of places where people have asked for the bug
to be fixed. The row for the current context (and not any other row) is
highlighted.

    >>> anon_browser.open('http://launchpad.test/firefox/+bug/1')
    >>> print(anon_browser.contents)
    <!DOCTYPE...
    ...
    ...<tr class="highlight" id="...">
    ...Mozilla Firefox...
    ...
    ...<tr>
    ...mozilla-firefox (Debian)...
    ...
    ...<tr>
    ...mozilla-firefox (Ubuntu)...
    ...
    >>> anon_browser.contents.count(six.ensure_str('<tr class="highlight"'))
    1

    >>> anon_browser.open(
    ...     'http://launchpad.test/debian/+source/mozilla-firefox/+bug/1')
    >>> print(anon_browser.contents)
    <!DOCTYPE...
    ...
    ...<tr>
    ...Mozilla Firefox...
    ...
    ...<tr class="highlight" id="...">
    ...mozilla-firefox (Debian)...
    ...
    ...<tr>
    ...mozilla-firefox (Ubuntu)...
    ...
    >>> anon_browser.contents.count(six.ensure_str('<tr class="highlight"'))
    1

If the context is a distribution package, the package name has a
tooltip containing the package details.

    >>> print(anon_browser.getLink('mozilla-firefox (Ubuntu)').attrs['title'])
    Latest release: 0.9, uploaded to main on 2004-09-27 11:57:13+00:00...
    by Mark Shuttleworth (mark), maintained by Mark Shuttleworth (mark)

    >>> print(anon_browser.getLink('mozilla-firefox (Debian)').attrs['title'])
    No current release for this source package in Debian

(XXX 20080623 mpt: Projects and distributions should similarly have a tooltip
listing their latest release. <http://launchpad.net/bugs/242491>)

If you are logged in, each "Affects" row contains a form for editing the
status in that context. The forms are hidden initially using CSS.

    >>> user_browser.open(
    ...     "http://launchpad.test/debian/+source/mozilla-firefox/+bug/2")
    >>> print(user_browser.contents)
    <!DOCTYPE...
    ...
    ...Tomcat...
    ...Save Changes...
    ...
    ...Ubuntu...
    ...Save Changes...
    ...
    ...mozilla-firefox (Debian)...
    ...Save Changes...
    ...
    ...Woody...
    ...Save Changes...

Alongside the form is a table displaying details about the context,
including the latest release if it is a distribution package.

    >>> user_browser.open(
    ...     "http://launchpad.test/ubuntu/+source/mozilla-firefox/+bug/1")
    >>> print(extract_text(find_tag_by_id(user_browser.contents, 'task17')))
    Affecting: mozilla-firefox (Ubuntu)
    Filed here by: Foo Bar
    When: 2004-01-17
    Assigned: 2005-01-17
    ...

The bug page includes a link to report another bug.

    >>> user_browser.open('http://bugs.launchpad.test/firefox/+bug/1')
    >>> print(user_browser.getLink('Report a bug').url)
    http://bugs.launchpad.test/firefox/+filebug

    >>> user_browser.open(
    ...     'http://launchpad.test/ubuntu/+source/mozilla-firefox/+bug/1')
    >>> print(user_browser.getLink('Report a bug').url)
    http://launchpad.test/ubuntu/+source/mozilla-firefox/+filebug

There's also a link on the page that will take the user to the "Add
attachment or patch" page, for use when JavaScript isn't available.

    >>> print(user_browser.getLink('Add attachment or patch').url)
    http://bugs.launchpad.test/ubuntu/+source/.../+bug/1/+addcomment


Navigating to a bug in the wrong context
----------------------------------------

If we navigate to a bug in a context in which it doesn't exist, we are
redirected to the default context.

    >>> browser.open('http://bugs.launchpad.test/jokosher/+bug/10')
    >>> print(browser.url)
    http://bugs.launchpad.test/ubuntu/+source/linux-source-2.6.15/+bug/10


Bugs with many tasks
--------------------

Some bugs have many bug tasks, which causes the Javascript initialization
code for them take too long. As a last resort optimization we disable that
initialization code if there's more than 10 bug tasks.

    >>> from lp.testing import login, logout
    >>> from lp.services.webapp import canonical_url
    >>> login('foo.bar@canonical.com')
    >>> bug = factory.makeBug()
    >>> bug_id = bug.id
    >>> bug_url = canonical_url(bug)
    >>> logout()

On the bug page, for every bug task there's one expander.

    >>> browser.open(bug_url)
    >>> print(len(find_tags_by_class(
    ...     browser.contents, 'bugtask-expander')))
    1

We add four more tasks.

    >>> login('foo.bar@canonical.com')
    >>> for i in range(4):
    ...     _ = bug.addTask(bug.owner, factory.makeProduct())
    >>> logout()

And the expander appears five times.

    >>> browser.open(bug_url)
    >>> print(len(find_tags_by_class(
    ...     browser.contents, 'bugtask-expander')))
    5

But on pages with more than ten bug tasks, we don't include the expander
at all.

    >>> login('foo.bar@canonical.com')
    >>> for i in range(5):
    ...     _ = bug.addTask(bug.owner, factory.makeProduct())
    >>> logout()

    >>> browser.open(bug_url)
    >>> print(len(find_tags_by_class(
    ...     browser.contents, 'bugtask-expander')))
    0

