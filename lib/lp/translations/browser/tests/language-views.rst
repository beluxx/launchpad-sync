Language Views
==============

Admin Language
--------------

    >>> from zope.component import getUtility
    >>> from lp.services.worlddata.interfaces.language import ILanguageSet

    >>> language_set = getUtility(ILanguageSet)
    >>> portuguese = language_set.getLanguageByCode('pt_BR')
    >>> language_admin_view = create_view(portuguese, '+admin')
    >>> language_admin_view.initialize()

The language +admin view provides a label and a page_title for the page.

    >>> print(language_admin_view.label)
    Edit Portuguese (Brazil) in Launchpad

    >>> print(language_admin_view.page_title)
    Change details

The view provides also a cancel_url and a next_url, but they're the same
because the previous and next steps of editing a language are returning
to its index.

    >>> print(language_admin_view.cancel_url)
    http://translations.launchpad.test/+languages/pt_BR

    >>> print(language_admin_view.next_url)
    http://translations.launchpad.test/+languages/pt_BR


Validation
----------

Plural information entered on the admin page is checked for validity.

    >>> language_admin_view.validate({
    ...     'code': 'pt_BR',
    ...     'pluralforms': 2,
    ...     'pluralexpression': '1/n',
    ...     })
    >>> print(language_admin_view.getFieldError('pluralexpression'))
    Division by zero in plural expression for n = 0.


Add Language
------------

    >>> language_add_view = create_view(language_set, '+add')

    >>> print(language_add_view.label)
    Register a language in Launchpad

    >>> print(language_add_view.page_title)
    Register a language

The view provides also a cancel_url and a next_url:

    >>> print(language_add_view.cancel_url)
    http://translations.launchpad.test/+languages

    >>> print(language_add_view.field_names)
    ['code', 'englishname', 'nativename', 'pluralforms',
    'pluralexpression', 'visible', 'direction']

    >>> login("admin@canonical.com")
    >>> form = {
    ...     'field.code': 'lp_US',
    ...     'field.englishname': 'Launchpad English',
    ...     'field.nativename': '',
    ...     'field.pluralforms': '',
    ...     'field.pluralexpression': '',
    ...     'field.visible': True,
    ...     'field.direction': 'LTR',
    ...     'field.actions.add': 'Add',
    ...     }

    >>> language_add_view = create_initialized_view(
    ...     language_set, '+add', form=form)
    >>> language_add_view.errors
    []

    >>> print(language_add_view.next_url)
    http://translations.launchpad.test/+languages/lp_US


View Language
-------------

Translators lists for each language are computed using KarmaCache tables for
users which have configured their prefered language. Since KarmaCache tables
are generated using nightly builds, we will change Langauge.translators to
use the list of translators generated by this test.

Language.translators is deleted so that we can add our custom
implementation later.

    >>> from lp.services.worlddata.model.language import Language
    >>> translators_method = Language.translators
    >>> del Language.translators
    >>> serbian = language_set.getLanguageByCode('sr')
    >>> language_view = create_initialized_view(serbian, '+index')

The 'friendly_plural_forms' function shows us a list of plural forms and
a set of examples for each one, so one won't need to understand the plural
formula expression to see how it works.

    >>> friendly_plural_forms = language_view.friendly_plural_forms

    >>> for form_dict in friendly_plural_forms:
    ...     print(form_dict['form'], ':', form_dict['examples'])
    0 : 1, 21, 31, 41, 51, 61...
    1 : 2, 3, 4, 22, 23, 24...
    2 : 0, 5, 6, 7, 8, 9...

The top contributors are listed on the language page, and for a merged account
we will see their targed account.

Create some translators and a merged account.

    >>> from zope.security.proxy import removeSecurityProxy
    >>> translators = []
    >>> translator_main = factory.makePerson(
    ...     name='translator-main',
    ...     displayname='Translator Main')
    >>> translators.append(translator_main)
    >>> translator_merged = removeSecurityProxy(factory.makePerson(
    ...     name='translator-merged',
    ...     displayname='Translator Merged'))
    >>> translators.append(translator_merged)
    >>> translator_merged.merged = translator_main
    >>> for translator_nr in range(22):
    ...     translators.append(factory.makePerson(
    ...         name='translator-' + str(translator_nr),
    ...         displayname='Translator No.' + str(translator_nr)))

Create a product, a template with one msgset and a pofile

    >>> from lp.app.enums import ServiceUsage

    >>> product = factory.makeProduct(
    ...     translations_usage=ServiceUsage.LAUNCHPAD)
    >>> template = factory.makePOTemplate(
    ...     productseries=product.getSeries('trunk'))
    >>> potmsgset = factory.makePOTMsgSet(template)
    >>> pofile = factory.makePOFile('sr', potemplate=template)

Add a translation for each translator and one more for main and merged
accounts.

    >>> for translator in translators:
    ...     translation = factory.makeCurrentTranslationMessage(
    ...         pofile=pofile, translator=translator, potmsgset=potmsgset)
    >>> translation = factory.makeCurrentTranslationMessage(
    ...     pofile=pofile, translator=translator_merged, potmsgset=potmsgset)
    >>> translation = factory.makeCurrentTranslationMessage(
    ...     pofile=pofile, translator=translator_main, potmsgset=potmsgset)

Langauge.translators is Monkey-patched to avoid fetching KarmaCache.
Language.translator is a list containing all contributors decreasingly sorted
according to their karma value.

    >>> serbian.translators = translators
    >>> language_view = create_initialized_view(serbian, '+index')
    >>> top_contributors = language_view.top_contributors
    >>> translator_main in top_contributors
    True
    >>> translator_merged in top_contributors
    False
    >>> for translator in top_contributors:
    ...     print(translator.name)
    translator-main
    translator-0
    translator-1
    translator-2 ...

In the end, the changes done to Language class are reverted.

    >>> Language.translators = translators_method


View LanguageSet
------------------

    >>> login('carlos@canonical.com')
    >>> languageset_view = create_initialized_view(language_set, '+index')

The user_languages property contains a list of the current user's preferred
languages formated as links.

    >>> print(languageset_view.user_languages)
    <a href=".../ca" ...>Catalan</a>,
    <a href=".../en" ...>English</a>,
    <a href=".../es" ...>Spanish</a>

For a user without any preferred languages, English will be returned.

    >>> person = factory.makePerson()
    >>> print(person.languages)
    []
    >>> ignored = login_person(person)
    >>> languageset_view = create_initialized_view(language_set, '+index')
    >>> print(languageset_view.user_languages)
    <a href=".../en" ...>English</a>
