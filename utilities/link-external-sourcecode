#!/usr/bin/python3
#
# Copyright 2009-2023 Canonical Ltd. This software is licensed under the GNU
# Affero General Public License version 3 (see the file LICENSE).

import optparse
import subprocess
from os import curdir, symlink, unlink
from os.path import abspath, basename, exists, islink, join, realpath, relpath
from sys import stderr, stdout


def get_main_worktree(branch_dir):
    """Return the main worktree directory, otherwise `None`."""
    worktree_list = subprocess.check_output(
        ["git", "worktree", "list", "--porcelain"], universal_newlines=True
    )
    main_worktree = worktree_list.splitlines()[0].split(" ", 1)[1]
    if realpath(main_worktree) != realpath(branch_dir):
        return main_worktree
    return None


def link(source, destination):
    """Symlink source to destination.

    Assumes destination is missing or broken.
    """
    try:
        if islink(destination):
            unlink(destination)
        symlink(source, destination)
    except OSError as error:
        stderr.write(
            "  Error linking %s: %s\n" % (basename(destination), error)
        )
    else:
        if options.verbose:
            stdout.write("%s -> %s\n" % (relpath(destination), source))


if __name__ == "__main__":
    parser = optparse.OptionParser(
        usage="%prog [options] [parent]",
        description=(
            "Add a symlink from <target>/download-cache to "
            "<parent>/download-cache."
        ),
        epilog=(
            "Most of the time this does the right thing if run "
            "with no arguments."
        ),
        add_help_option=False,
    )
    parser.add_option(
        "-p",
        "--parent",
        dest="parent",
        default=None,
        help=(
            "The directory of the parent tree. If not specified, "
            "the main Git worktree."
        ),
        metavar="DIR",
    )
    parser.add_option(
        "-t",
        "--target",
        dest="target",
        default=curdir,
        help=(
            "The directory of the target tree. If not specified, "
            "the current working directory."
        ),
        metavar="DIR",
    )
    parser.add_option(
        "-q",
        "--quiet",
        dest="verbose",
        action="store_false",
        help="Be less verbose.",
    )
    parser.add_option(
        "-h", "--help", action="help", help="Show this help message and exit."
    )
    parser.set_defaults(verbose=True)

    options, args = parser.parse_args()

    # Be compatible with link-external-sourcecode.sh.
    if len(args) == 1:
        if options.parent is None:
            options.parent = args[0]
        else:
            parser.error(
                "Cannot specify parent tree as named "
                "argument and positional argument."
            )
    elif len(args) >= 2:
        parser.error("Too many arguments.")

    # Discover the parent tree using Git.
    if options.parent is None:
        options.parent = get_main_worktree(options.target)

    if options.parent is None:
        parser.error("Parent tree not specified.")

    for folder_name in ("download-cache",):
        source = abspath(join(options.parent, folder_name))
        destination = abspath(join(options.target, folder_name))
        if not exists(destination):
            if not exists(source):
                stderr.write(
                    "  Wanted to link %s to %s but source does not exist\n"
                    % (source, destination)
                )
            else:
                link(source, destination)
