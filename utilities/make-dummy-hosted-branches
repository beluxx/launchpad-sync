#!/usr/bin/python2 -S
#
# Copyright 2009 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Create dummy Bazaar branches for all HOSTED branches in the database.

The Launchpad sample data includes a number of HOSTED branches that users can
branch from, push to and view on the website. However, some of these things
will break if we are missing the actual Bazaar branches, so we have a script
to create them.

NOTE: This script will delete any existing sample data branches, so that the
sample data on the filesystem is consistent with the sample data in the
database.
"""

from __future__ import absolute_import, print_function

import _pythonpath  # noqa: F401

import os
import shutil
import sys
import tempfile

import transaction

from lp.code.enums import BranchType
from lp.code.model.branch import Branch
from lp.codehosting.tests.helpers import create_branch_with_one_revision
from lp.codehosting.vfs import branch_id_to_path
from lp.services.config import config
from lp.services.database.sqlbase import sqlvalues
from lp.services.scripts import execute_zcml_for_scripts


def make_bazaar_branch_and_tree(db_branch):
    """Make a dummy Bazaar branch and working tree from a database Branch."""
    assert db_branch.branch_type == BranchType.HOSTED, (
        "Can only create branches for HOSTED branches: %r"
        % db_branch)
    branch_dir = os.path.join(
        config.codehosting.mirrored_branches_root,
        branch_id_to_path(db_branch.id))
    return create_branch_with_one_revision(branch_dir)


def main(argv):
    os.environ['BZR_HOME'] = tempfile.mkdtemp()
    if os.path.exists(config.codehosting.mirrored_branches_root):
        shutil.rmtree(config.codehosting.mirrored_branches_root)
    execute_zcml_for_scripts()
    try:
        branches = Branch.select(
            "Branch.branch_type = %s" % sqlvalues(BranchType.HOSTED))
        for branch in branches:
            make_bazaar_branch_and_tree(branch)
    finally:
        transaction.abort()
    print("Created %d branches based on sample data." % len(list(branches)))


if __name__ == '__main__':
    main(sys.argv)
