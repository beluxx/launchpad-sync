Translation Export Request Queue
================================

The queue of export requests is served by a cron script. Let's check if it can
serve those requests properly.

    >>> from zope.component import getUtility
    >>> from lp.translations.interfaces.poexportrequest import (
    ...     IPOExportRequestSet)
    >>> from lp.translations.utilities.tests.helpers import (
    ...     is_valid_mofile)
    >>> from lp.testing.mail_helpers import pop_notifications, print_emails

Here's somebody to make a request.

    >>> person = factory.makePerson(
    ...     email='downloader@example.com',
    ...     name='downloader',
    ...     displayname='Happy Downloader')

Requesting PO files
-------------------

Our user requests the Catalan and Czech translations of a template.

    >>> from lp.translations.model.potemplate import POTemplate
    >>> potemplate = POTemplate.get(2)
    >>> ca = potemplate.getPOFileByLang('ca')
    >>> cs = potemplate.getPOFileByLang('cs')

    >>> request_set = getUtility(IPOExportRequestSet)
    >>> request_set.addRequest(person, None, [ca, cs])

Now we request that the queue be processed.

(Commits are needed to make the test requests seep through to the standby
database).

    >>> import transaction
    >>> from lp.translations.scripts.po_export_queue import process_queue
    >>> transaction.commit()
    >>> from lp.services.log.logger import FakeLogger
    >>> process_queue(transaction, FakeLogger())
    DEBUG Exporting objects for Happy Downloader, related to template pmount
    in Ubuntu Hoary package "pmount"
    INFO Stored file at http://.../launchpad-export.tar.gz

The user receives a confirmation email.

    >>> emails = pop_notifications()
    >>> len(emails)
    1
    >>> print_emails(notifications=emails, decode=True)  # noqa
    From: ...
    To: downloader@example.com
    Subject: Launchpad translation download: Ubuntu Hoary pmount -
    pmount template
    Hello Happy Downloader,
    <BLANKLINE>
    The translation files you requested from Launchpad are ready for
    download from the following location:
    <BLANKLINE>
      http://.../launchpad-export.tar.gz
    <BLANKLINE>
    Note: this link will expire in about 1 week.  If you want to
    download these translations again, you will have to request
    them again at
    <BLANKLINE>
      http://translations.launchpad.../hoary/+source/pmount/+pots/p...
    <BLANKLINE>
    -- 
    Automatic message from Launchpad.net.
    ----------------------------------------

The email contains a URL linking to where the exported file can be downloaded.

    >>> import re

    >>> def extract_url(text):
    ...     urls = re.compile(r'^ *(http://.*)$', re.M).findall(text)
    ...     return urls[0]

    >>> body = emails.pop().get_payload()
    >>> url = extract_url(body)

Let's download it and make sure the contents look ok.

    >>> from six.moves.urllib.request import urlopen
    >>> from lp.services.helpers import bytes_to_tarfile
    >>> tarball = bytes_to_tarfile(urlopen(url).read())
    >>> for name in sorted(tarball.getnames()):
    ...     print(name)
    pmount
    pmount/pmount-ca.po
    pmount/pmount-cs.po


Duplicate requests
------------------

On another occasion, the user requests just Catalan translation.  The
queue is initially empty.

    >>> from lp.services.database.interfaces import IStore
    >>> def render_request(request):
    ...     if request.pofile is None:
    ...         return request.potemplate.name
    ...     else:
    ...         return "%s:%s" % (request.potemplate.name,
    ...                           request.pofile.language.code)
    >>> from lp.translations.model.poexportrequest import (
    ...     POExportRequest)
    >>> def print_queue():
    ...     requests = [
    ...         render_request(request)
    ...         for request in IStore(POExportRequest).find(POExportRequest)]
    ...     for request in sorted(requests):
    ...         print(request)
    >>> print_queue()

    >>> request_set.addRequest(person, None, [ca])

The request is on the queue, as you'd expect.

    >>> print_queue()
    pmount:ca

The same user now makes a separate, new request for the Catalan and
Czech translations.

    >>> request_set.addRequest(person, None, [ca, cs])

Since the request for the Catalan translation is a duplicate, only the
Czech one is added to the export queue.

    >>> print_queue()
    pmount:ca
    pmount:cs

The user also requests the template again.

    >>> request_set.addRequest(person, potemplate)
    >>> print_queue()
    pmount
    pmount:ca
    pmount:cs

The user now requests all of these files again, as well as the Spanish
translation.

    >>> es = potemplate.getPOFileByLang('es')
    >>> request_set.addRequest(person, potemplate, [ca, cs, es])

Most of this request consists of duplications, and those are ignored.
Only the Spanish request is new, and that goes into the queue.

    >>> print_queue()
    pmount
    pmount:ca
    pmount:cs
    pmount:es

Clean up the queue again.

    >>> for request in IStore(POExportRequest).find(POExportRequest):
    ...     request.destroySelf()


Requesting MO files
-------------------

Let's try requesting an export in MO format:

    >>> from lp.translations.interfaces.translationfileformat import (
    ...     TranslationFileFormat)
    >>> request_set.addRequest(
    ...     person, None, [cs, cs.potemplate], TranslationFileFormat.MO)
    >>> transaction.commit()
    >>> process_queue(transaction, FakeLogger())
    DEBUG Exporting objects for Happy Downloader, related to template pmount
    in Ubuntu Hoary package "pmount"
    INFO Stored file at http://.../cs_LC_MESSAGES_pmount.mo

    >>> emails = pop_notifications()
    >>> len(emails)
    1
    >>> print_emails(notifications=emails, decode=True)  # noqa
    From: ...
    To: downloader@example.com
    Subject: Launchpad translation download: Ubuntu Hoary pmount - Czech
    translation of pmount
    Hello Happy Downloader,
    <BLANKLINE>
    The translation files you requested from Launchpad are ready for
    download from the following location:
    <BLANKLINE>
      http://.../cs_LC_MESSAGES_pmount.mo
    <BLANKLINE>
    Note: this link will expire in about 1 week.  If you want to
    download these translations again, you will have to request
    them again at
    <BLANKLINE>
      http://translations.launchpad.../pmount/+pots/pmount/cs/+export
    <BLANKLINE>
    -- 
    Automatic message from Launchpad.net.
    ----------------------------------------

Check whether we generated a good .mo file.

    >>> body = emails.pop().get_payload()
    >>> url = extract_url(body)
    >>> is_valid_mofile(urlopen(url).read())
    True


Cron script
-----------

Finally, the code should work when executed from the script. This is a good
way that the user used by the script has the needed rights to use the
database.

The queue can contain requests for translations from both distributions and
products.  Each request may request a template, or a list of templates, or
just PO files.

    # We need to request again some files.
    >>> ca.potemplate.distroseries is None
    False
    >>> cs.potemplate.distroseries is None
    False
    >>> request_set.addRequest(person, None, [ca, cs])
    >>> product_template = potemplate.get(1)
    >>> product_template.productseries is None
    False
    >>> request_set.addRequest(person, product_template)
    >>> alsa_template = IStore(POTemplate).find(
    ...     POTemplate, path='po/alsa-utils.pot').one()
    >>> alsa_es = alsa_template.getPOFileByLang('es')
    >>> netapplet_template = IStore(POTemplate).find(
    ...     POTemplate, path='po/netapplet.pot').one()
    >>> request_set.addRequest(
    ...     person, [alsa_template, netapplet_template], [alsa_es])
    >>> transaction.commit()

The script is run.

    >>> import subprocess
    >>> process = subprocess.Popen([
    ...     'cronscripts/rosetta-export-queue.py', '-v'
    ...     ], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    ...     stderr=subprocess.STDOUT, universal_newlines=True,
    ...     )
    >>> (output, empty) = process.communicate()
    >>> print(output)
    DEBUG   ...
    INFO    Creating lockfile: /var/lock/launchpad-rosetta-export-queue.lock
    DEBUG   Exporting objects for Happy Downloader, related to template
    evolution-2.2 in Evolution trunk
    DEBUG   Exporting objects for Happy Downloader, related to template
    pmount in Ubuntu Hoary package "pmount"
    DEBUG   Exporting objects for Happy Downloader, related to template
    netapplet in NetApplet trunk
    DEBUG   Exporting objects for Happy Downloader, related to template
    alsa-utils in alsa-utils trunk
    ...
    INFO    Stored file at http://.../launchpad-export.tar.gz
    DEBUG   rosetta-export-queue ran in ...s (excl. load & lock)
    DEBUG   Removing lock file: /var/lock/launchpad-rosetta-export-queue.lock
    <BLANKLINE>
