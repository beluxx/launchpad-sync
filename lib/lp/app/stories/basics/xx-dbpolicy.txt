Application Server Database Policy
==================================

The database policy chooses the default Storm store to used. Its goal
is to distribute load away from the master databases to read only
stores where possible. It will benefit old code - new code should
explicitly select objects from the master or slave stores as needed.

To test this policy, lets point the MAIN SLAVE store to a Launchpad
database with a different name. This makes it easy to check if a
request is querying the master or slave database.

    >>> from lp.services.config import config
    >>> from textwrap import dedent
    >>> config_overlay = dedent("""
    ...     [database]
    ...     rw_main_standby: dbname=launchpad_empty
    ...     """)
    >>> config.push('empty_standby', config_overlay)

    >>> from lp.registry.model.person import Person
    >>> from lp.services.database.interfaces import IMasterStore, ISlaveStore
    >>> from lp.testing.layers import DatabaseLayer
    >>> master = IMasterStore(Person)
    >>> dbname = DatabaseLayer._db_fixture.dbname
    >>> dbname == master.execute("SELECT current_database()").get_one()[0]
    True
    >>> slave = ISlaveStore(Person)
    >>> print(slave.execute("SELECT current_database()").get_one()[0])
    launchpad_empty

We should confirm that the empty database is as empty as we hope it is.

    >>> slave_store = ISlaveStore(Person)
    >>> master_store = IMasterStore(Person)
    >>> slave_store.find(Person).is_empty()
    True
    >>> master_store.find(Person).is_empty()
    False

This helper parses the output of the +whichdb view (which unfortunately
needs to be created externally to this pagetest).

    >>> def whichdb(browser):
    ...     dbname = extract_text(find_tag_by_id(browser.contents, 'dbname'))
    ...     if dbname == DatabaseLayer._db_fixture.dbname:
    ...         return 'MASTER'
    ...     elif dbname == 'launchpad_empty':
    ...         return 'SLAVE'
    ...     else:
    ...         return 'UNKNOWN'

Read only requests such as GET and HEAD will use the MAIN SLAVE
Store by default.

    >>> browser.open('http://launchpad.test/+whichdb')
    >>> print(whichdb(browser))
    SLAVE

POST requests might make updates, so they use the MAIN MASTER
Store by default.

    >>> browser.getControl('Do Post').click()
    >>> print(whichdb(browser))
    MASTER

This is an unauthenticated browser.  These typically have no session, unless
special dispensation has been made. Without a session, subsequent requests
will then immediately return to using the SLAVE.

    >>> browser.open('http://launchpad.test/+whichdb')
    >>> print(whichdb(browser))
    SLAVE

However, if the request has a session (that is, is authenticated; or is
unauthenticated, but under special dispensation to have a session), once a
POST request has been made, further GET and HEAD requests from the same client
continue to use the MAIN MASTER Store by default for 5 minutes. This ensures
that a user will see any changes they have made immediately, even though the
slave databases may lag some time behind the master database.

    >>> browser.addHeader('Authorization', 'Basic mark@example.com:test')
    >>> browser.getControl('Do Post').click() # POST request
    >>> print(whichdb(browser))
    MASTER
    >>> browser.open('http://launchpad.test/+whichdb') # GET request
    >>> print(whichdb(browser))
    MASTER

GET and HEAD requests from other clients are unaffected though
and use the MAIN SLAVE Store by default.

    >>> anon_browser.open('http://launchpad.test/+whichdb')
    >>> print(whichdb(anon_browser))
    SLAVE
    >>> admin_browser.open('http://launchpad.test/+whichdb')
    >>> print(whichdb(admin_browser))
    SLAVE

If no more POST requests are made for 5 minutes, GET and HEAD
requests will once again be using the MAIN SLAVE store as we
can assume that any changes made to the master database have
propagated to the slaves.

To test this, first we need to wind forward the database policy's clock.

    >>> from lp.services.database import policy as dbpolicy
    >>> from datetime import timedelta
    >>> _original_now = dbpolicy._now
    >>> def _future_now():
    ...     return _original_now() + timedelta(minutes=10)


    >>> browser.open('http://launchpad.test/+whichdb')
    >>> print(whichdb(browser))
    MASTER

    >>> dbpolicy._now = _future_now # Install the time machine.

    >>> browser.open('http://launchpad.test/+whichdb')
    >>> print(whichdb(browser))
    SLAVE

    >>> dbpolicy._now = _original_now # Reset the time machine.


When lag gets too bad, we stop using slave databases. This stops
replication oddities from becoming too bad, as well as lightening the load
on the slaves allowing them to catch up.

    >>> anon_browser.open('http://launchpad.test/+whichdb')
    >>> print(whichdb(anon_browser))
    SLAVE

    >>> dbpolicy._test_lag = timedelta(minutes=10)
    >>> anon_browser.open('http://launchpad.test/+whichdb')
    >>> print(whichdb(anon_browser))
    MASTER
    >>> dbpolicy._test_lag = None


A 404 error page is shown when code raises a LookupError. If a slave
database is being used, this might have been caused by replication lag
if the missing data was only recently created. To fix this surprising
error, requests are always retried using the master database before
returning a 404 error to the user.

    >>> anon_browser.handleErrors = True
    >>> anon_browser.raiseHttpErrors = False

    # Confirm requests are going to the SLAVE
    >>> anon_browser.open('http://launchpad.test/+whichdb')
    >>> print(whichdb(anon_browser))
    SLAVE

    # The slave database contains no data, but we don't get
    # a 404 page - the request is retried against the MASTER.
    >>> anon_browser.open('http://launchpad.test/~stub')
    >>> anon_browser.headers['Status']
    '200 Ok'

    # 404s are still returned though if the data doesn't exist in the
    # MASTER database either.
    >>> anon_browser.open('http://launchpad.test/~does-not-exist')
    >>> anon_browser.headers['Status']
    '404 Not Found'

    # This session is still using the SLAVE though by default.
    >>> anon_browser.open('http://launchpad.test/+whichdb')
    >>> print(whichdb(anon_browser))
    SLAVE

Reset our config to avoid affecting other tests.

    >>> ignored = config.pop('empty_standby')
