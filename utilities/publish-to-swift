#! /usr/bin/python3 -S
#
# Copyright 2021 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Publish a built tarball to Swift for deployment."""

import _pythonpath  # noqa: F401

import os
import re
from argparse import ArgumentParser

import iso8601
import requests
from swiftclient.service import (
    SwiftService,
    SwiftUploadObject,
    get_conn,
    process_options,
)
from swiftclient.shell import add_default_args


def ensure_container_privs(options, container_name):
    """Ensure that the container exists and is world-readable.

    This allows us to give services suitable credentials for getting the
    built code from a container.
    """
    options = dict(options)
    options["read_acl"] = ".r:*"
    with SwiftService(options=options) as swift:
        swift.post(container=container_name)


def get_swift_storage_url(options):
    """Return the storage URL under which Swift objects are published."""
    return get_conn(options).get_auth()[0]


def publish_file_to_swift(
    options, container_name, object_path, local_path, overwrite=True
):
    """Publish a file to a Swift container."""
    storage_url = get_swift_storage_url(options)

    with SwiftService(options=options) as swift:
        stat_results = swift.stat(
            container=container_name, objects=[object_path]
        )
        if stat_results and next(stat_results)["success"]:
            print(
                "Object {} already published to {}.".format(
                    object_path, container_name
                )
            )
            if not overwrite:
                return

        print(
            "Publishing {} to {} as {}.".format(
                local_path, container_name, object_path
            )
        )
        for r in swift.upload(
            container_name,
            [SwiftUploadObject(local_path, object_name=object_path)],
        ):
            if not r["success"]:
                raise r["error"]

        print(
            "Published file: {}/{}/{}".format(
                storage_url, container_name, object_path
            )
        )


def prune_old_files_from_swift(options, container_name, object_dir, suffix):
    """Prune files from Swift that we no longer need."""
    if suffix:
        suffix = "-" + suffix
    if suffix.endswith("-db"):
        try:
            response = requests.head("https://staging.launchpad.net/")
            ok = response.ok
        except requests.RequestException:
            ok = False
        if not ok:
            # Staging is routinely down in order to restore its database
            # from a recent production dump, so don't consider this an
            # error; just skip pruning if we can't determine its revision.
            print("staging.launchpad.net is down; not pruning.")
            return
    else:
        response = requests.head("https://launchpad.net/")
        response.raise_for_status()
    deployed_revision = response.headers["X-VCS-Revision"]

    with SwiftService(options=options) as swift:
        objs = {}
        deployed_mtime = None
        for stats in swift.list(
            container=container_name,
            options={"prefix": "{}/".format(object_dir)},
        ):
            if not stats["success"]:
                raise stats["error"]
            for item in stats["listing"]:
                if not item["name"].startswith("{}/".format(object_dir)):
                    continue
                # Only consider pruning builds that have the given suffix.
                # (For example, if we're publishing a build with the suffix
                # "-db", then we consider pruning builds with the label
                # "<commit>-db" but not plain "<commit>".)
                build_label = item["name"].split("/")[1]
                if not re.match(r"^.{40}%s$" % re.escape(suffix), build_label):
                    continue
                if item.get("subdir") is None:
                    mtime = iso8601.parse_date(item["last_modified"])
                    objs[item["name"]] = mtime
                    if build_label == deployed_revision + suffix:
                        deployed_mtime = mtime

        if deployed_mtime is None:
            print(
                "No file in {} corresponding to deployed revision {}; "
                "not pruning.".format(container_name, deployed_revision)
            )
            return

        for object_name, mtime in sorted(objs.items()):
            if mtime < deployed_mtime:
                print(
                    "Pruning {} (older than deployed revision)".format(
                        object_name
                    )
                )
                for r in swift.delete(
                    container=container_name, objects=[object_name]
                ):
                    if not r["success"]:
                        raise r["error"]


def main():
    parser = ArgumentParser()
    parser.add_argument("container_name")
    parser.add_argument("swift_object_path")
    parser.add_argument("local_path")
    parser.add_argument("suffix", nargs="?", default="")
    add_default_args(parser)
    args = parser.parse_args()

    if args.debug:
        # Print OpenStack-related environment variables for ease of
        # debugging.  Only OS_AUTH_TOKEN and OS_PASSWORD currently seem to
        # be secret, but for safety we only show unredacted contents of
        # variables specifically known to be safe.  See "swift --os-help"
        # for most of these.
        safe_keys = {
            "OS_AUTH_URL",
            "OS_AUTH_VERSION",
            "OS_CACERT",
            "OS_CERT",
            "OS_ENDPOINT_TYPE",
            "OS_IDENTITY_API_VERSION",
            "OS_INTERFACE",
            "OS_KEY",
            "OS_PROJECT_DOMAIN_ID",
            "OS_PROJECT_DOMAIN_NAME",
            "OS_PROJECT_ID",
            "OS_PROJECT_NAME",
            "OS_REGION_NAME",
            "OS_SERVICE_TYPE",
            "OS_STORAGE_URL",
            "OS_TENANT_ID",
            "OS_TENANT_NAME",
            "OS_USERNAME",
            "OS_USER_DOMAIN_ID",
            "OS_USER_DOMAIN_NAME",
            "OS_USER_ID",
        }
        for key, value in sorted(os.environ.items()):
            if key.startswith("OS_"):
                if key not in safe_keys:
                    value = "<redacted>"
                print("{}: {}".format(key, value))

    options = vars(args)
    process_options(options)

    overwrite = "FORCE_REBUILD" in os.environ
    ensure_container_privs(options, args.container_name)
    publish_file_to_swift(
        options,
        args.container_name,
        args.swift_object_path,
        args.local_path,
        overwrite=overwrite,
    )
    prune_old_files_from_swift(
        options,
        args.container_name,
        args.swift_object_path.split("/")[0],
        args.suffix,
    )


if __name__ == "__main__":
    main()
