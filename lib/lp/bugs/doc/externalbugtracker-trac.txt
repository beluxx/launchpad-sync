ExternalBugTracker: Trac
========================

This covers the implementation of the ExternalBugTracker class for Trac
bugwatches.


Basics
------

The ExternalBugTracker descendant class which implements methods for updating
bug watches on Trac bug trackers is externalbugtracker.Trac, which implements
IExternalBugTracker.

    >>> from lp.bugs.externalbugtracker import Trac
    >>> from lp.bugs.tests.externalbugtracker import (
    ...     new_bugtracker)
    >>> from lp.testing import verifyObject
    >>> from lp.bugs.interfaces.bugtracker import BugTrackerType
    >>> from lp.bugs.interfaces.externalbugtracker import IExternalBugTracker
    >>> trac = Trac('http://example.com/')
    >>> verifyObject(IExternalBugTracker, trac)
    True


LP plugin
---------

Some Trac instances have a plugin installed to make it easier for us to
communicate with them. getExternalBugTrackerToUse() probes the bug
tracker for the special authentication mechanism the plugin uses, and
returns a TracLPPlugin if it's found.

If the LP plugin is installed, the URL will return 401, since it fails
to validate the token.

    >>> import responses
    >>> from lp.bugs.externalbugtracker.trac import TracLPPlugin

    >>> trac = Trac('http://example.com/')
    >>> with responses.RequestsMock() as requests_mock:
    ...     requests_mock.add(
    ...         'GET', 'http://example.com/launchpad-auth/check', status=401)
    ...     chosen_trac = trac.getExternalBugTrackerToUse()
    >>> isinstance(chosen_trac, TracLPPlugin)
    True
    >>> print(chosen_trac.baseurl)
    http://example.com

Some Trac instances in the wild return HTTP 200 when the resource is
not found (HTTP 404 would be more appropriate). A distinguishing
difference between a 200 response from a broken Trac and a response
from a Trac with the plugin installed (when we've accidentally passed
a valid token, which is very unlikely), is that the broken Trac will
not include a "trac_auth" cookie.

The plain, non-plugin, external bug tracker is selected for broken
Trac installations:

    >>> with responses.RequestsMock() as requests_mock:
    ...     requests_mock.add(
    ...         'GET', 'http://example.com/launchpad-auth/check')
    ...     chosen_trac = trac.getExternalBugTrackerToUse()
    >>> isinstance(chosen_trac, TracLPPlugin)
    False
    >>> print(chosen_trac.baseurl)
    http://example.com

In the event that our deliberately bogus token is considered valid,
the external bug tracker that groks the plugin is selected:

    >>> with responses.RequestsMock() as requests_mock:
    ...     requests_mock.add(
    ...         'GET', 'http://example.com/launchpad-auth/check',
    ...         headers={'Set-Cookie': 'trac_auth=1234'})
    ...     chosen_trac = trac.getExternalBugTrackerToUse()
    >>> isinstance(chosen_trac, TracLPPlugin)
    True
    >>> print(chosen_trac.baseurl)
    http://example.com

If a 404 is returned, the normal Trac instance is returned.

    >>> with responses.RequestsMock() as requests_mock:
    ...     requests_mock.add(
    ...         'GET', 'http://example.com/launchpad-auth/check', status=404)
    ...     chosen_trac = trac.getExternalBugTrackerToUse()
    >>> chosen_trac is trac
    True

In the event that a connection error is returned, we return a normal Trac
instance. It will deal with the connection error later, if the situation
persists.

    >>> from requests.exceptions import ConnectTimeout
    >>> with responses.RequestsMock() as requests_mock:
    ...     requests_mock.add(
    ...         'GET', 'http://example.com/launchpad-auth/check',
    ...         body=ConnectTimeout())
    ...     chosen_trac = trac.getExternalBugTrackerToUse()
    >>> chosen_trac is trac
    True


Status Conversion
-----------------

The basic Trac ticket statuses map to Launchpad bug statuses.
Trac.convertRemoteStatus() handles the conversion.

    >>> trac = Trac('http://example.com/')
    >>> trac.convertRemoteStatus('open').title
    'New'
    >>> trac.convertRemoteStatus('new').title
    'New'
    >>> trac.convertRemoteStatus('reopened').title
    'New'
    >>> trac.convertRemoteStatus('accepted').title
    'Confirmed'
    >>> trac.convertRemoteStatus('assigned').title
    'Confirmed'
    >>> trac.convertRemoteStatus('fixed').title
    'Fix Released'
    >>> trac.convertRemoteStatus('closed').title
    'Fix Released'
    >>> trac.convertRemoteStatus('invalid').title
    'Invalid'
    >>> trac.convertRemoteStatus('wontfix').title
    "Won't Fix"
    >>> trac.convertRemoteStatus('duplicate').title
    'Confirmed'
    >>> trac.convertRemoteStatus('worksforme').title
    'Invalid'
    >>> trac.convertRemoteStatus('fixverified').title
    'Fix Released'

If the status isn't one that our Trac ExternalBugTracker can understand
an UnknownRemoteStatusError will be raised.

    >>> trac.convertRemoteStatus('eggs').title
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
      ...
    lp.bugs.externalbugtracker.base.UnknownRemoteStatusError: eggs


Initialization
--------------

Calling initializeRemoteBugDB() on our Trac instance and passing it a set of
remote bug IDs will fetch those bug IDs from the server and file them in a
local variable for later use.

We use a test-oriented implementation for the purposes of these tests, which
avoids relying on a network connection.

    >>> from lp.bugs.tests.externalbugtracker import TestTrac
    >>> trac = TestTrac(u'http://test.trac/')
    >>> with trac.responses():
    ...     trac.initializeRemoteBugDB([1])
    >>> sorted(trac.bugs.keys())
    [1]

If we initialize with a different set of keys we overwrite the first set:

    >>> with trac.responses():
    ...     trac.initializeRemoteBugDB([6, 7, 8, 9, 10, 11, 12])
    >>> sorted(trac.bugs.keys())
    [6, 7, 8, 9, 10, 11, 12]


Export Methods
--------------

There are two means by which we can export Trac bug statuses: on a bug-by-bug
basis and as a batch. When the number of bugs that need updating is less than
a given bug tracker's batch_query_threshold the bugs will be fetched
one-at-a-time:

    >>> trac.batch_query_threshold
    10

    >>> with trac.responses(trace_calls=True):
    ...     trac.initializeRemoteBugDB([6, 7, 8, 9, 10])
    GET http://test.trac/ticket/6
    GET http://test.trac/ticket/6?format=csv
    GET http://test.trac/ticket/6?format=csv
    GET http://test.trac/ticket/7?format=csv
    GET http://test.trac/ticket/8?format=csv
    GET http://test.trac/ticket/9?format=csv
    GET http://test.trac/ticket/10?format=csv

If there are more than batch_query_threshold bugs to update then they are
fetched as a batch:

    >>> trac.batch_query_threshold = 4
    >>> with trac.responses(trace_calls=True):
    ...     trac.initializeRemoteBugDB([6, 7, 8, 9, 10])
    GET http://test.trac/query?id=6&id=7...&format=csv

The batch updating method will also be used in cases where the Trac instance
doesn't support CSV exports of individual tickets:

    >>> trac.batch_query_threshold = 10
    >>> with trac.responses(trace_calls=True, supports_single_exports=False):
    ...     trac.initializeRemoteBugDB([6, 7, 8, 9, 10])
    GET http://test.trac/ticket/6
    GET http://test.trac/ticket/6?format=csv
    GET http://test.trac/query?id=6&id=7...&format=csv

If, when using the batch export method, the Trac instance comes across
invalid data, it will raise an UnparsableBugData exception. We will
force our trac instance to use invalid data for the purposes of this
test.

    >>> with trac.responses(broken=True):
    ...     trac.initializeRemoteBugDB([6, 7, 8, 9, 10])
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
      ...
    lp.bugs.externalbugtracker.base.UnparsableBugData: External bugtracker http://test.trac does not define all the necessary fields for bug status imports (Defined field names: ['<html>']).

This is also true of the single bug export mode.

    >>> with trac.responses(broken=True):
    ...     trac.initializeRemoteBugDB([6])
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
      ...
    lp.bugs.externalbugtracker.base.UnparsableBugData: External bugtracker http://test.trac does not define all the necessary fields for bug status imports (Defined field names: ['<html>']).

Trying to get the remote status of the bug will raise a BugNotFound
error since the bug was never imported.

    >>> trac.getRemoteStatus(6)
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
      ...
    lp.bugs.externalbugtracker.base.BugNotFound: 6

Both the single and batch ticket import modes use the _fetchBugData()
method to retrieve the CSV data from the remote Trac instance. This
method accepts a URL from which to retrieve the data as a parameter.

    >>> query_url = 'http://test.trac/query?id=%s&format=csv'
    >>> query_string = '&id='.join(['1', '2', '3', '4', '5'])
    >>> query_url = query_url % query_string

    >>> with trac.responses(trace_calls=True, supports_single_exports=False):
    ...     remote_bugs = trac._fetchBugData(query_url)
    GET http://test.trac/query?id=1&id=2...&format=csv

However, _fetchBugData() doesn't actually check the results it returns
except for checking that they are valid Trac CSV exports. in this case,
the IDs returned are nothing like the ones we asked for:

    >>> bug_ids = sorted(int(bug['id']) for bug in remote_bugs)
    >>> print(bug_ids)
    [1, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153]

If _fetchBugData() receives a response that isn't a valid Trac CSV
export, it will raise an UnparsableBugData error.

    >>> with trac.responses(broken=True):
    ...     trac._fetchBugData(query_url)
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
      ...
    lp.bugs.externalbugtracker.base.UnparsableBugData: External bugtracker http://test.trac does not define all the necessary fields for bug status imports (Defined field names: ['<html>']).


Updating Bug Watches
--------------------

First, we create some bug watches to test with:

    >>> from lp.bugs.interfaces.bug import IBugSet
    >>> from lp.registry.interfaces.person import IPersonSet

    >>> sample_person = getUtility(IPersonSet).getByEmail(
    ...     'test@canonical.com')

    >>> example_bug_tracker = new_bugtracker(BugTrackerType.TRAC)

    >>> from lp.app.interfaces.launchpad import ILaunchpadCelebrities
    >>> example_bug = getUtility(IBugSet).get(10)
    >>> example_bugwatch = example_bug.addWatch(
    ...     example_bug_tracker, '1',
    ...     getUtility(ILaunchpadCelebrities).janitor)


Collect the Example.com watches:

    >>> for bug_watch in example_bug_tracker.watches:
    ...     print("%s: %s" % (bug_watch.remotebug, bug_watch.remotestatus))
    1: None

And have a Trac instance process them:

    >>> transaction.commit()

    >>> from lp.services.log.logger import FakeLogger
    >>> from lp.testing.layers import LaunchpadZopelessLayer
    >>> from lp.bugs.scripts.checkwatches import CheckwatchesMaster
    >>> txn = LaunchpadZopelessLayer.txn
    >>> bug_watch_updater = CheckwatchesMaster(
    ...     txn, FakeLogger())
    >>> trac = TestTrac(example_bug_tracker.baseurl)
    >>> with trac.responses():
    ...     bug_watch_updater.updateBugWatches(
    ...         trac, example_bug_tracker.watches)
    INFO Updating 1 watches for 1 bugs on http://bugs.some.where

    >>> for bug_watch in example_bug_tracker.watches:
    ...     print("%s: %s" % (bug_watch.remotebug, bug_watch.remotestatus))
    1: fixed

We'll add some more watches now.

    >>> from lp.bugs.interfaces.bugwatch import IBugWatchSet

    >>> bug_watch_set = getUtility(IBugWatchSet)
    >>> bug_watches = dict(
    ...     (int(bug_watch.remotebug), bug_watch.id)
    ...     for bug_watch in example_bug_tracker.watches)

    >>> for remote_bug, bug_watch_id in bug_watches.items():
    ...     bug_watch = getUtility(IBugWatchSet).get(bug_watch_id)
    ...     print("%s: %s" % (remote_bug, bug_watch.remotestatus))
    1: fixed

    >>> remote_bugs = [
    ...     (143, 'fixed'),
    ...     (144, 'assigned'),
    ...     (145, 'duplicate'),
    ...     (146, 'invalid'),
    ...     (147, 'worksforme'),
    ...     (148, 'wontfix'),
    ...     (149, 'reopened'),
    ...     (150, 'new'),
    ...     (151, 'new'),
    ...     (152, 'new'),
    ...     (153, 'new'),
    ... ]

    >>> for remote_bug_id, remote_status in remote_bugs:
    ...     bug_watch = bug_watch_set.createBugWatch(
    ...         bug=example_bug, owner=sample_person,
    ...         bugtracker=example_bug_tracker,
    ...         remotebug=str(remote_bug_id))
    ...     bug_watches[remote_bug_id] = bug_watch.id

    >>> with trac.responses(trace_calls=True):
    ...     bug_watch_updater.updateBugWatches(
    ...         trac, example_bug_tracker.watches)
    INFO Updating 12 watches for 12 bugs on http://bugs.some.where
    GET http://bugs.some.where/query?id=...

    >>> for remote_bug_id in sorted(bug_watches.keys()):
    ...     bug_watch = getUtility(IBugWatchSet).get(
    ...         bug_watches[remote_bug_id])
    ...     remote_status = bug_watch.remotestatus
    ...     print('Remote bug %d: %s' % (remote_bug_id, remote_status))
    Remote bug 1: fixed
    Remote bug 143: fixed
    Remote bug 144: assigned
    Remote bug 145: duplicate
    Remote bug 146: invalid
    Remote bug 147: worksforme
    Remote bug 148: wontfix
    Remote bug 149: reopened
    Remote bug 150: new
    Remote bug 151: new
    Remote bug 152: new
    Remote bug 153: new

updateBugWatches() updates the lastchecked attribute on the watches, so
now no bug watches are in need of updating:

    >>> flush_database_updates()
    >>> example_bug_tracker.watches_needing_update.count()
    0

If the status isn't different, the lastchanged attribute doesn't get
updated. If we set a bug watch's lastchanged timestamp manually and call
update, lastchanged shouldn't be affected because the remote status of the bug
watch hasn't altered:

    >>> import pytz
    >>> from datetime import datetime, timedelta
    >>> from operator import attrgetter
    >>> sorted_bug_watches = sorted(
    ...     (bug_watch for bug_watch in example_bug_tracker.watches),
    ...     key=attrgetter('remotebug'))
    >>> bug_watch = sorted_bug_watches[-1]
    >>> now = datetime.now(pytz.timezone('UTC'))
    >>> bug_watch.lastchanged = now - timedelta(weeks=2)
    >>> old_last_changed = bug_watch.lastchanged
    >>> print(bug_watch.remotebug)
    153
    >>> print(bug_watch.remotestatus)
    new

    >>> trac.batch_query_threshold = 0
    >>> with trac.responses():
    ...     bug_watch_updater.updateBugWatches(trac, [bug_watch])
    INFO Updating 1 watches for 1 bugs on http://bugs.some.where

    >>> bug_watch.lastchanged == old_last_changed
    True
    >>> print(bug_watch.remotebug)
    153
    >>> print(bug_watch.remotestatus)
    new
