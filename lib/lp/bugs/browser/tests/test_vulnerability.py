# Copyright 2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Vulnerability browser tests"""
from datetime import datetime, timezone

from soupmatchers import HTMLContains, Tag, Within
from testtools.matchers import MatchesAll, Not
from zope.security.proxy import removeSecurityProxy

from lp.app.enums import InformationType
from lp.bugs.model.tests.test_vulnerability import (
    grant_access_to_non_public_vulnerability,
)
from lp.registry.enums import BugSharingPolicy
from lp.services.webapp import canonical_url
from lp.testing import (
    ANONYMOUS,
    BrowserTestCase,
    login,
    person_logged_in,
    record_two_runs,
)
from lp.testing.layers import DatabaseFunctionalLayer
from lp.testing.matchers import HasQueryCount
from lp.testing.views import create_initialized_view


class TestVulnerabilityPage(BrowserTestCase):
    """Tests for the vulnerability browser page."""

    layer = DatabaseFunctionalLayer

    def get_vulnerability_field_tag(self, name, text):
        return Within(
            Tag(
                "{} dl".format(name),
                "dl",
                attrs={"id": "-".join(name.lower().split())},
                text=text,
            ),
            Tag(
                name,
                "dd",
                text=text,
            ),
        )

    def test_page_title_vulnerability_without_linked_cve(self):
        vulnerability = self.factory.makeVulnerability()
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                Tag(
                    "page title",
                    "title",
                    text="Vulnerability #{} : Bugs : {}".format(
                        vulnerability.id,
                        vulnerability.distribution.displayname,
                    ),
                )
            ),
        )

    def test_page_title_vulnerability_with_linked_cve(self):
        cve = self.factory.makeCVE(sequence="2022-1234")
        vulnerability = self.factory.makeVulnerability(cve=cve)
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                Tag(
                    "page title",
                    "title",
                    text="Vulnerability CVE-2022-1234 : Bugs : {}".format(
                        vulnerability.distribution.displayname
                    ),
                )
            ),
        )

    def test_vulnerability_page_contains_all_expected_fields(self):
        vulnerability = self.factory.makeVulnerability()
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        fields = (
            "Date created",
            "Date made public",
            "CVE",
            "Information type",
            "Status",
            "Importance",
            "Importance explanation",
            "Creator",
            "Notes",
            "Mitigation",
        )
        matchers = []
        for field in fields:
            matchers.append(
                HTMLContains(Tag(field, "dt", text="{}:".format(field)))
            )
        self.assertThat(browser.contents, MatchesAll(*matchers))

    def test_vulnerability_page_default_values(self):
        vulnerability = self.factory.makeVulnerability()
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            MatchesAll(
                HTMLContains(
                    self.get_vulnerability_field_tag(
                        "Date created",
                        vulnerability.date_created.strftime("%Y-%m-%d"),
                    ),
                    self.get_vulnerability_field_tag(
                        "Date made public", "None"
                    ),
                    self.get_vulnerability_field_tag("CVE", "None"),
                    self.get_vulnerability_field_tag(
                        "Information type",
                        vulnerability.information_type.title,
                    ),
                    self.get_vulnerability_field_tag(
                        "Status", vulnerability.status.title
                    ),
                    self.get_vulnerability_field_tag(
                        "Importance", vulnerability.importance.title
                    ),
                    self.get_vulnerability_field_tag(
                        # importance_explanation defaults to `None` but the
                        # factory
                        # method auto-generates a value for it.
                        "Importance explanation",
                        vulnerability.importance_explanation,
                    ),
                    Within(
                        Tag("Creator", "dl", attrs={"id": "creator"}),
                        Tag(
                            "Creator link",
                            "a",
                            attrs={
                                "href": canonical_url(vulnerability.creator),
                                "class": "sprite person",
                            },
                            text=vulnerability.creator.displayname,
                        ),
                    ),
                    self.get_vulnerability_field_tag("Notes", "None"),
                    self.get_vulnerability_field_tag("Mitigation", "None"),
                ),
                Not(
                    HTMLContains(
                        Tag(
                            "Related bugs", "div", attrs={"id": "related-bugs"}
                        )
                    )
                ),
            ),
        )

    def test_vulnerability_cve_linked(self):
        cve = self.factory.makeCVE(sequence="2022-1234")
        vulnerability = self.factory.makeVulnerability(cve=cve)
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                Within(
                    Tag(
                        "CVE dl",
                        "dl",
                        attrs={"id": "cve"},
                    ),
                    Tag(
                        "CVE link",
                        "a",
                        attrs={
                            "href": canonical_url(cve, force_local_path=True)
                        },
                    ),
                )
            ),
        )

    def test_vulnerability_optional_parameters_set(self):
        vulnerability = self.factory.makeVulnerability(
            date_made_public=datetime(1970, 1, 1, tzinfo=timezone.utc),
            notes="These are some notes",
            mitigation="Here is a mitigation",
        )
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                self.get_vulnerability_field_tag(
                    "Date made public",
                    vulnerability.date_made_public.strftime("%Y-%m-%d"),
                ),
                self.get_vulnerability_field_tag(
                    "Notes", "These are some notes"
                ),
                self.get_vulnerability_field_tag(
                    "Mitigation", "Here is a mitigation"
                ),
            ),
        )

    def test_vulnerability_related_bugs_present(self):
        vulnerability = self.factory.makeVulnerability()
        bug1 = self.factory.makeBug()
        bug2 = self.factory.makeBug()
        with person_logged_in(vulnerability.distribution.owner):
            vulnerability.linkBug(bug1)
            vulnerability.linkBug(bug2)
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                Tag("Related bugs", "div", attrs={"id": "related-bugs"}),
                Tag(
                    "Bug #{}".format(bug1.id),
                    "a",
                    attrs={
                        "class": "sprite bug",
                        "href": canonical_url(bug1, force_local_path=True),
                    },
                    text="Bug #{}: {}".format(bug1.id, bug1.title),
                ),
                Tag(
                    "Bug #{}".format(bug2.id),
                    "a",
                    attrs={
                        "class": "sprite bug",
                        "href": canonical_url(bug2, force_local_path=True),
                    },
                    text="Bug #{}: {}".format(bug2.id, bug2.title),
                ),
            ),
        )


class TestVulnerabilityListingPage(BrowserTestCase):
    """Tests for the vulnerability listing page."""

    layer = DatabaseFunctionalLayer

    def setUp(self):
        super().setUp()
        self.cve_index = 1

    def makeVulnerabilitiesAndMatchers(
        self, distribution, count, cve_sequence_start=1234
    ):
        vulnerability_matchers = []
        for _ in range(count):
            cve = self.factory.makeCVE("2022-%04i" % self.cve_index)
            self.cve_index += 1
            vulnerability_matchers.append(
                Tag(
                    "vulnerability link",
                    "a",
                    attrs={
                        "href": canonical_url(
                            self.factory.makeVulnerability(
                                distribution=distribution, cve=cve
                            )
                        )
                    },
                )
            )
        return vulnerability_matchers

    def assertBatches(self, context, link_matchers, batched, start, size):
        view = create_initialized_view(context, "+vulnerabilities")
        listing_tag = Tag(
            "vulnerability listing", "div", attrs={"class": "listing"}
        )
        batch_nav_tag = Tag(
            "batch nav links", "td", attrs={"class": "batch-navigation-links"}
        )
        present_links = ([batch_nav_tag] if batched else []) + [
            matcher
            for i, matcher in enumerate(link_matchers)
            if i in range(start, start + size)
        ]
        absent_links = ([] if batched else [batch_nav_tag]) + [
            matcher
            for i, matcher in enumerate(link_matchers)
            if i not in range(start, start + size)
        ]
        self.assertThat(
            view.render(),
            MatchesAll(
                HTMLContains(listing_tag, *present_links),
                Not(HTMLContains(*absent_links)),
            ),
        )

    def assertVulnerabilitiesQueryCount(self, context, create_func):
        self.pushConfig("launchpad", default_batch_size=5)
        recorder1, recorder2 = record_two_runs(
            lambda: self.getMainText(context, "+vulnerabilities"),
            create_func,
            5,
        )
        self.assertThat(recorder2, HasQueryCount.byEquality(recorder1))

    def test_vulnerabilities_with_cves_listing_query_count(self):
        distribution = self.factory.makeDistribution()

        def create_vulnerability():
            login(ANONYMOUS)
            self.factory.makeVulnerability(
                distribution=distribution,
                cve=self.factory.makeCVE(
                    sequence="2022-{:04d}".format(
                        self.factory.getUniqueInteger()
                    )
                ),
            )

        self.assertVulnerabilitiesQueryCount(
            distribution, create_vulnerability
        )

    def test_vulnerabilities_without_cve_listing_query_count(self):
        distribution = self.factory.makeDistribution()

        def create_vulnerability():
            login(ANONYMOUS)
            self.factory.makeVulnerability(distribution=distribution)

        self.assertVulnerabilitiesQueryCount(
            distribution, create_vulnerability
        )

    def test_vulnerability_listing(self):
        distribution = self.factory.makeDistribution()
        vulnerability1 = self.factory.makeVulnerability(
            distribution=distribution
        )
        vulnerability2 = self.factory.makeVulnerability()
        cve = self.factory.makeCVE(sequence="2022-1234")
        vulnerability3 = self.factory.makeVulnerability(
            distribution=distribution, cve=cve
        )

        browser = self.getUserBrowser(
            canonical_url(distribution) + "/+vulnerabilities",
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            Not(
                HTMLContains(
                    Tag(
                        "vulnerability 2 link",
                        "a",
                        attrs={
                            "href": canonical_url(vulnerability2),
                        },
                    )
                )
            ),
        )
        for vulnerability in (vulnerability1, vulnerability3):
            vulnerability_div = Tag(
                "vulnerability div",
                "div",
                attrs={
                    "id": "vulnerability-{}".format(vulnerability.id),
                },
            )
            vulnerability_img = Tag(
                "vulnerability img",
                "img",
                attrs={
                    "src": "/@@/cve",
                },
            )
            vulnerability_link = Tag(
                "vulnerability link",
                "a",
                attrs={
                    "href": canonical_url(vulnerability),
                },
            )

            description = ""
            if vulnerability.description:
                description = vulnerability.description
            elif vulnerability.cve:
                description = vulnerability.cve.description

            if not description:
                vulnerability_description = Tag(
                    "vulnerability description", "div"
                )
            else:
                vulnerability_description = Tag(
                    "vulnerability description", "div", text=description
                )
            self.assertThat(
                browser.contents,
                HTMLContains(
                    Within(
                        vulnerability_div,
                        vulnerability_img,
                    ),
                    Within(
                        vulnerability_div,
                        vulnerability_link,
                    ),
                    Within(
                        vulnerability_div,
                        vulnerability_description,
                    ),
                ),
            )

    def test_vulnerability_listing_some_private_vulnerabilities(self):
        distribution = self.factory.makeDistribution(
            bug_sharing_policy=BugSharingPolicy.PROPRIETARY
        )
        vulnerability = self.factory.makeVulnerability(
            distribution=distribution
        )
        private_vulnerability = self.factory.makeVulnerability(
            distribution=distribution,
            information_type=InformationType.PROPRIETARY,
        )
        browser = self.getUserBrowser(
            canonical_url(distribution) + "/+vulnerabilities",
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                Tag(
                    "vulnerability link",
                    "a",
                    attrs={
                        "href": canonical_url(vulnerability),
                    },
                )
            ),
        )
        self.assertThat(
            browser.contents,
            Not(
                HTMLContains(
                    Tag(
                        "private vulnerability link",
                        "a",
                        attrs={
                            "href": canonical_url(
                                removeSecurityProxy(private_vulnerability)
                            ),
                        },
                    )
                )
            ),
        )
        person_with_access = self.factory.makePerson()
        grant_access_to_non_public_vulnerability(
            private_vulnerability, person_with_access
        )
        browser = self.getUserBrowser(
            canonical_url(distribution) + "/+vulnerabilities",
            user=person_with_access,
        )
        with person_logged_in(person_with_access):
            self.assertThat(
                browser.contents,
                HTMLContains(
                    Tag(
                        "vulnerability link",
                        "a",
                        attrs={
                            "href": canonical_url(vulnerability),
                        },
                    ),
                    Tag(
                        "private vulnerability link",
                        "a",
                        attrs={
                            "href": canonical_url(private_vulnerability),
                        },
                    ),
                ),
            )

    def test_vulnerability_batched_listing(self):
        distribution = self.factory.makeDistribution()
        link_matchers = self.makeVulnerabilitiesAndMatchers(distribution, 3)
        self.assertBatches(distribution, link_matchers, False, 0, 3)
        link_matchers.extend(
            self.makeVulnerabilitiesAndMatchers(
                distribution, 7, cve_sequence_start=2345
            )
        )
        self.assertBatches(distribution, link_matchers, True, 0, 5)


class TestVulnerabilitiesLinksOnCVEPage(BrowserTestCase):
    """Test for the vulnerabilities links on the CVE page."""

    layer = DatabaseFunctionalLayer

    def test_cve_page_when_no_linked_vulnerabilities(self):
        cve = self.factory.makeCVE(sequence="2022-1234")
        browser = self.getUserBrowser(
            canonical_url(cve),
            user=self.factory.makePerson(),
        )
        self.assertThat(
            browser.contents,
            Not(
                HTMLContains(
                    Tag(
                        "Related distributions heading",
                        "h2",
                        text="Related distributions",
                    ),
                ),
            ),
        )

    def test_cve_page_when_linked_vulnerabilities_present(self):
        cve = self.factory.makeCVE(sequence="2022-1234")
        distribution1 = self.factory.makeDistribution()
        distribution2 = self.factory.makeDistribution()
        vulnerability1 = self.factory.makeVulnerability(
            cve=cve,
            distribution=distribution1,
        )
        vulnerability2 = self.factory.makeVulnerability(
            cve=cve,
            distribution=distribution2,
        )
        browser = self.getUserBrowser(
            canonical_url(cve), user=self.factory.makePerson()
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                Tag(
                    "Related distributions heading",
                    "h2",
                    text="Related distributions",
                ),
                Tag(
                    "vulnerability1",
                    "a",
                    attrs={
                        "href": canonical_url(
                            vulnerability1, force_local_path=True
                        )
                    },
                    text=distribution1.displayname,
                ),
                Tag(
                    "vulnerability2",
                    "a",
                    attrs={
                        "href": canonical_url(
                            vulnerability2, force_local_path=True
                        )
                    },
                    text=distribution2.displayname,
                ),
            ),
        )

    def test_query_count_constant_vs_number_of_linked_vulnerabilities(self):
        cve = self.factory.makeCVE(sequence="2022-1234")

        def create_vulnerability():
            login(ANONYMOUS)
            self.factory.makeVulnerability(
                cve=cve, distribution=self.factory.makeDistribution()
            )

        recorder1, recorder2 = record_two_runs(
            lambda: self.getMainText(cve),
            create_vulnerability,
            5,
        )
        self.assertThat(recorder2, HasQueryCount.byEquality(recorder1))

    def test_non_public_vulnerabilities_not_linked_unauthorized_users(self):
        cve = self.factory.makeCVE(sequence="2022-1234")
        distribution = self.factory.makeDistribution(
            bug_sharing_policy=BugSharingPolicy.PROPRIETARY
        )
        vulnerability = self.factory.makeVulnerability(
            cve=cve,
            distribution=distribution,
            information_type=InformationType.PROPRIETARY,
        )
        person = self.factory.makePerson()
        browser = self.getUserBrowser(canonical_url(cve), user=person)
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            Not(
                HTMLContains(
                    Tag(
                        "Related distributions heading",
                        "h2",
                        text="Related distributions",
                    ),
                ),
            ),
        )
        distribution2 = self.factory.makeDistribution()
        vulnerability2 = self.factory.makeVulnerability(
            cve=cve,
            distribution=distribution2,
        )
        browser = self.getUserBrowser(canonical_url(cve), user=person)
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            MatchesAll(
                HTMLContains(
                    Tag(
                        "Related distributions heading",
                        "h2",
                        text="Related distributions",
                    ),
                    Tag(
                        "vulnerability2",
                        "a",
                        attrs={
                            "href": canonical_url(
                                vulnerability2,
                                force_local_path=True,
                            ),
                        },
                        text=distribution2.displayname,
                    ),
                ),
                Not(
                    HTMLContains(
                        Tag(
                            "vulnerability",
                            "a",
                            attrs={
                                "href": canonical_url(
                                    removeSecurityProxy(vulnerability),
                                    force_local_path=True,
                                ),
                            },
                            text=distribution.displayname,
                        )
                    )
                ),
            ),
        )

    def test_authorized_users_can_see_links_to_non_public_vulnerabilities(
        self,
    ):
        cve = self.factory.makeCVE(sequence="2022-1234")
        distribution1 = self.factory.makeDistribution()
        distribution2 = self.factory.makeDistribution(
            bug_sharing_policy=BugSharingPolicy.PROPRIETARY
        )
        vulnerability1 = self.factory.makeVulnerability(
            cve=cve, distribution=distribution1
        )
        vulnerability2 = self.factory.makeVulnerability(
            cve=cve,
            distribution=distribution2,
            information_type=InformationType.PROPRIETARY,
        )
        person_with_access = self.factory.makePerson()
        grant_access_to_non_public_vulnerability(
            vulnerability2, person_with_access
        )
        browser = self.getUserBrowser(
            canonical_url(cve), user=person_with_access
        )
        with person_logged_in(person_with_access):
            self.assertThat(
                browser.contents,
                HTMLContains(
                    Tag(
                        "Related distributions heading",
                        "h2",
                        text="Related distributions",
                    ),
                    Tag(
                        "vulnerability1",
                        "a",
                        attrs={
                            "href": canonical_url(
                                vulnerability1,
                                force_local_path=True,
                            ),
                        },
                        text=distribution1.displayname,
                    ),
                    Tag(
                        "vulnerability2",
                        "a",
                        attrs={
                            "href": canonical_url(
                                vulnerability2,
                                force_local_path=True,
                            ),
                        },
                        text=distribution2.displayname,
                    ),
                ),
            )
