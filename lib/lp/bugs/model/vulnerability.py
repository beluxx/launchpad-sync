# Copyright 2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

__all__ = [
    'Vulnerability',
    'VulnerabilitySet',
    ]

import operator

import pytz
from storm.locals import (
    Bool,
    DateTime,
    Int,
    Reference,
    Unicode,
    )
from zope.component import getUtility
from zope.interface import implementer

from lp.bugs.interfaces.buglink import IBugLinkTarget
from lp.bugs.interfaces.bugtask import BugTaskImportance
from lp.bugs.interfaces.vulnerability import (
    IVulnerability,
    IVulnerabilityActivity,
    IVulnerabilityActivitySet,
    IVulnerabilitySet,
    VulnerabilityChange,
    VulnerabilityStatus,
    )
from lp.bugs.model.bug import Bug
from lp.bugs.model.buglinktarget import BugLinkTargetMixin
from lp.services.database import bulk
from lp.services.database.constants import UTC_NOW
from lp.services.database.enumcol import DBEnum
from lp.services.database.interfaces import IStore
from lp.services.database.stormbase import StormBase
from lp.services.xref.interfaces import IXRefSet
from lp.services.xref.model import XRef


@implementer(IVulnerability, IBugLinkTarget)
class Vulnerability(StormBase, BugLinkTargetMixin):
    __storm_table__ = 'Vulnerability'

    id = Int(primary=True)

    distribution_id = Int(name="distribution", allow_none=False)
    distribution = Reference(distribution_id, "Distribution.id")

    cve_id = Int(name="cve", allow_none=True, default=None)
    cve = Reference(cve_id, "Cve.id")

    status = DBEnum(name='status', allow_none=False,
                    enum=VulnerabilityStatus)

    description = Unicode(name='description', allow_none=True)

    notes = Unicode(name='notes', allow_none=True)

    mitigation = Unicode(name='mitigation', allow_none=True)

    importance = DBEnum(
        name='importance', allow_none=False,
        enum=BugTaskImportance,
        default=BugTaskImportance.UNDECIDED)

    importance_explanation = Unicode(
        name='importance_explanation', allow_none=True)

    private = Bool(name='private', allow_none=False, default=False)

    date_made_public = DateTime(
        name='date_made_public', tzinfo=pytz.UTC, allow_none=True)

    def __init__(self, distribution, status, importance,
                 private, cve=None, description=None, notes=None,
                 mitigation=None, importance_explanation=None,
                 date_made_public=None):
        super().__init__()
        self.distribution = distribution
        self.cve = cve
        self.status = status
        self.description = description
        self.notes = notes
        self.mitigation = mitigation
        self.importance = importance
        self.importance_explanation = importance_explanation
        self.private = private
        self.date_made_public = date_made_public

    @property
    def bugs(self):
        bug_ids = [
            int(id) for _, id in getUtility(IXRefSet).findFrom(
                ('vulnerability', str(self.id)), types=['bug'])]
        return list(sorted(
            bulk.load(Bug, bug_ids), key=operator.attrgetter('id')))

    def createBugLink(self, bug, props=None):
        """See BugLinkTargetMixin."""
        if props is None:
            props = {}
        getUtility(IXRefSet).create(
            {('vulnerability', str(self.id)): {('bug', str(bug.id)): props}})

    def deleteBugLink(self, bug):
        """See BugLinkTargetMixin."""
        getUtility(IXRefSet).delete(
            {('vulnerability', str(self.id)): [('bug', str(bug.id))]})


@implementer(IVulnerabilitySet)
class VulnerabilitySet:

    def new(self, distribution, status, importance,
            private, cve=None, description=None, notes=None, mitigation=None,
            importance_explanation=None, date_made_public=None):
        """See `IVulnerabilitySet`."""
        store = IStore(Vulnerability)
        vulnerability = Vulnerability(distribution=distribution, cve=cve,
                                      status=status, description=description,
                                      notes=notes, mitigation=mitigation,
                                      importance=importance, private=private,
                                      importance_explanation=
                                      importance_explanation,
                                      date_made_public=date_made_public)
        store.add(vulnerability)
        return vulnerability

    def getByID(self, id):
        return IStore(Vulnerability).get(Vulnerability, id)

    def getBugVulnerabilityCount(self):
        """See IVulnerabilitySet."""
        return IStore(XRef).find(
            XRef, XRef.from_type == 'bug',
            XRef.to_type == 'vulnerability').count()


@implementer(IVulnerabilityActivity)
class VulnerabilityActivity(StormBase):
    __storm_table__ = 'VulnerabilityActivity'

    id = Int(primary=True)

    vulnerability_id = Int(name="vulnerability", allow_none=False)
    vulnerability = Reference(vulnerability_id, "Vulnerability.id")

    changer_id = Int(name="changer", allow_none=False)
    changer = Reference(changer_id, "Person.id")

    date_changed = DateTime(
        name='date_changed', tzinfo=pytz.UTC, allow_none=False)

    what_changed = DBEnum(name='what_changed', allow_none=False,
                          enum=VulnerabilityChange)

    old_value = Unicode(name='old_value', allow_none=True)

    new_value = Unicode(name='new_value', allow_none=True)

    def __init__(self, vulnerability, changer, what_changed=None,
                 old_value=None, new_value=None):
        super().__init__()
        self.vulnerability = vulnerability
        self.changer = changer
        self.what_changed = what_changed
        self.old_value = old_value
        self.new_value = new_value
        self.date_changed = UTC_NOW


@implementer(IVulnerabilityActivitySet)
class VulnerabilityActivitySet:

    def new(self, vulnerability, changer,
            what_changed,
            old_value=None, new_value=None):
        """See `VulnerabilitySet`."""
        store = IStore(VulnerabilityActivity)
        activity = VulnerabilityActivity(vulnerability, changer,
                                         what_changed,
                                         old_value, new_value)
        store.add(activity)
        return activity
