# Copyright 2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

__all__ = [
    'Vulnerability',
    'VulnerabilitySet',
    ]

import operator

import pytz
from storm.locals import (
    DateTime,
    Int,
    Reference,
    Unicode,
    )
from zope.component import getUtility
from zope.interface import implementer

from lp.app.enums import InformationType
from lp.app.model.launchpad import InformationTypeMixin
from lp.bugs.enums import VulnerabilityStatus
from lp.bugs.interfaces.buglink import IBugLinkTarget
from lp.bugs.interfaces.bugtask import BugTaskImportance
from lp.bugs.interfaces.vulnerability import (
    IVulnerability,
    IVulnerabilityActivity,
    IVulnerabilityActivitySet,
    IVulnerabilitySet,
    VulnerabilityChange,
    )
from lp.bugs.model.bug import Bug
from lp.bugs.model.buglinktarget import BugLinkTargetMixin
from lp.services.database import bulk
from lp.services.database.constants import UTC_NOW
from lp.services.database.enumcol import DBEnum
from lp.services.database.interfaces import IStore
from lp.services.database.stormbase import StormBase
from lp.services.xref.interfaces import IXRefSet


@implementer(IVulnerability, IBugLinkTarget)
class Vulnerability(StormBase, BugLinkTargetMixin, InformationTypeMixin):
    __storm_table__ = 'Vulnerability'

    id = Int(primary=True)

    distribution_id = Int(name="distribution", allow_none=False)
    distribution = Reference(distribution_id, "Distribution.id")

    cve_id = Int(name="cve", allow_none=True, default=None)
    cve = Reference(cve_id, "Cve.id")

    status = DBEnum(name='status', allow_none=False,
                    enum=VulnerabilityStatus)

    description = Unicode(name='description', allow_none=True)

    notes = Unicode(name='notes', allow_none=True)

    mitigation = Unicode(name='mitigation', allow_none=True)

    importance = DBEnum(
        name='importance', allow_none=False,
        enum=BugTaskImportance,
        default=BugTaskImportance.UNDECIDED)

    importance_explanation = Unicode(
        name='importance_explanation', allow_none=True)

    information_type = DBEnum(
        enum=InformationType, default=InformationType.PUBLIC,
        allow_none=False, name="information_type")

    date_created = DateTime(
        name='date_created', tzinfo=pytz.UTC, allow_none=False,
        default=UTC_NOW)

    date_made_public = DateTime(
        name='date_made_public', tzinfo=pytz.UTC, allow_none=True)

    creator_id = Int(name='creator', allow_none=False)
    creator = Reference(creator_id, 'Person.id')

    def __init__(self, distribution, status, importance,
                 creator, information_type=InformationType.PUBLIC, cve=None,
                 description=None, notes=None, mitigation=None,
                 importance_explanation=None, date_made_public=None):
        super().__init__()
        self.distribution = distribution
        self.cve = cve
        self.status = status
        self.importance = importance
        self.information_type = information_type
        self.creator = creator
        self.description = description
        self.notes = notes
        self.mitigation = mitigation
        self.importance_explanation = importance_explanation
        self.date_made_public = date_made_public
        self.date_created = UTC_NOW

    @property
    def bugs(self):
        bug_ids = [
            int(id) for _, id in getUtility(IXRefSet).findFrom(
                ('vulnerability', str(self.id)), types=['bug'])]
        return list(sorted(
            bulk.load(Bug, bug_ids), key=operator.attrgetter('id')))

    def createBugLink(self, bug, props=None):
        """See BugLinkTargetMixin."""
        if props is None:
            props = {}
        getUtility(IXRefSet).create(
            {('vulnerability', str(self.id)): {('bug', str(bug.id)): props}})

    def deleteBugLink(self, bug):
        """See BugLinkTargetMixin."""
        getUtility(IXRefSet).delete(
            {('vulnerability', str(self.id)): [('bug', str(bug.id))]})


@implementer(IVulnerabilitySet)
class VulnerabilitySet:

    def new(self, distribution, status, importance,
            creator, information_type=InformationType.PUBLIC, cve=None,
            description=None, notes=None, mitigation=None,
            importance_explanation=None, date_made_public=None):
        """See `IVulnerabilitySet`."""
        store = IStore(Vulnerability)
        vulnerability = Vulnerability(distribution=distribution,
                                      creator=creator, cve=cve,
                                      status=status, description=description,
                                      notes=notes, mitigation=mitigation,
                                      importance=importance,
                                      information_type=information_type,
                                      importance_explanation=
                                      importance_explanation,
                                      date_made_public=date_made_public)
        store.add(vulnerability)
        store.flush()
        return vulnerability


@implementer(IVulnerabilityActivity)
class VulnerabilityActivity(StormBase):
    __storm_table__ = 'VulnerabilityActivity'

    id = Int(primary=True)

    vulnerability_id = Int(name="vulnerability", allow_none=False)
    vulnerability = Reference(vulnerability_id, "Vulnerability.id")

    changer_id = Int(name="changer", allow_none=False)
    changer = Reference(changer_id, "Person.id")

    date_changed = DateTime(
        name='date_changed', tzinfo=pytz.UTC, allow_none=False)

    what_changed = DBEnum(name='what_changed', allow_none=False,
                          enum=VulnerabilityChange)

    old_value = Unicode(name='old_value', allow_none=True)

    new_value = Unicode(name='new_value', allow_none=True)

    def __init__(self, vulnerability, changer, what_changed=None,
                 old_value=None, new_value=None):
        super().__init__()
        self.vulnerability = vulnerability
        self.changer = changer
        self.what_changed = what_changed
        self.old_value = old_value
        self.new_value = new_value
        self.date_changed = UTC_NOW


@implementer(IVulnerabilityActivitySet)
class VulnerabilityActivitySet:

    def new(self, vulnerability, changer,
            what_changed,
            old_value=None, new_value=None):
        """See `IVulnerabilityActivitySet`."""
        store = IStore(VulnerabilityActivity)
        activity = VulnerabilityActivity(vulnerability, changer,
                                         what_changed,
                                         old_value, new_value)
        store.add(activity)
        return activity
