TestBugzillaAPIXMLRPCTransport
==============================

The TestBugzillaAPIXMLRPCTransport is an XML-RPC transport that behaves
in the same way as the XML-RPC endpoint of a Bugzilla 3.4 installation.
It implements the parts of the Bugzilla API which Launchpad uses to
communicate with those instances. The TestBugzillaAPIXMLRPCTransport is
very similar to the TestBugzillaXMLRPCTransport, which it subclasses.
Only the parts of TestBugzillaAPIXMLRPCTransport that are different from
its ancestor will be tested here.

    >>> from six.moves import xmlrpc_client
    >>> from lp.bugs.tests.externalbugtracker import (
    ...     TestBugzillaAPIXMLRPCTransport)
    >>> bugzilla_transport = TestBugzillaAPIXMLRPCTransport(
    ...     'http://example.com/xmlrpc.cgi')
    >>> server = xmlrpc_client.ServerProxy(
    ...     'http://example.com/xmlrpc.cgi', transport=bugzilla_transport)


Version discovery
-----------------

The TestBugzillaAPIXMLRPCTransport provides a method, Bugzilla.version(),
which returns the version of the Bugzilla instance to which the client
is currently connected.

    >>> server.Bugzilla.version()
    {'version': '3.4.1+'}


Logging in
----------

Unlike TestBugzillaXMLRPCTransport, TestBugzillaAPIXMLRPCTransport uses
the standard Bugzilla username and password system for authentication.
Users can log in to the Bugzilla instance by calling User.login(). This
method will return the user's user ID in a dict.

    >>> server.User.login(
    ...     {'login': 'foo.bar@canonical.com', 'password': 'test'})
    {'id': 0}

The Bugzilla_logincookie will now have been set for the transport, too.

    >>> print(bugzilla_transport.cookie_jar)
    <RequestsCookieJar[<Cookie Bugzilla_login=...>,
                       <Cookie Bugzilla_logincookie=...>]>

Trying to log in with an incorrect username or password will result in
an error being raised.

    >>> server.User.login(
    ...     {'login': 'test@canonical.com', 'password': 'test'})
    Traceback (most recent call last):
      ...
    xmlrpc.client.Fault:
    <Fault 300: 'The username or password you entered is not valid.'>


Getting the current time
------------------------

The Bugzilla.time() method allows us to retrieve a dict of the time on
the remote server.

    >>> time_dict = server.Bugzilla.time()
    >>> for key in sorted(time_dict):
    ...     print("%s: %s" % (key, time_dict[key]))
    db_time: 2008-05-01 01:01:01
    tz_name: UTC
    tz_offset: +0000
    tz_short_name: UTC
    web_time: 2008-05-01 01:01:01
    web_time_utc: 2008-05-01 01:01:01

If the remote server is in a different timezone, the db_time and
web_time items will be in the server's local timezone whilst
web_time_utc will be in UTC.

    >>> bugzilla_transport.utc_offset = 60**2
    >>> bugzilla_transport.timezone = 'CET'
    >>> time_dict = server.Bugzilla.time()
    >>> for key in sorted(time_dict):
    ...     print("%s: %s" % (key, time_dict[key]))
    db_time: 2008-05-01 01:01:01
    tz_name: CET
    tz_offset: +0100
    tz_short_name: CET
    web_time: 2008-05-01 01:01:01
    web_time_utc: 2008-05-01 00:01:01


Getting bugs from the server
----------------------------

The Bugzilla API method Bug.get() allows us to get one or more bugs from
the remote server. It takes a list of bug IDs to return and returns a
list of dicts containing those bugs' data.

    >>> return_value = server.Bug.get(
    ...     {'ids': [1], 'permissive': True})
    >>> [bug_dict] = return_value['bugs']
    >>> for key in sorted(bug_dict):
    ...     print("%s: %s" % (key, bug_dict[key]))
    alias:
    assigned_to: test@canonical.com
    component: GPPSystems
    creation_time: 2008-06-10 16:19:53
    id: 1
    internals:...
    is_open: True
    last_change_time: 2008-06-10 16:19:53
    priority: P1
    product: Marvin
    resolution: FIXED
    see_also: []
    severity: normal
    status: RESOLVED
    summary: That bloody robot still exists.

Note that further tests for this functionality can be found in the
"Bug.get()" section, above. This is because these two methods
are synonymous.


Searching for bugs
------------------

The Bugzilla API offers a Bug.search() method which, somewhat
unsurprisingly, can be used to search for Bugs on the Bugzilla instance.
It accepts a number of arguments on which to search.

Specifying a 'last_change_time' parameter when calling Launchpad.get_bugs()
will cause the method to only return bugs that have changed since that
date / time.

    >>> from datetime import datetime
    >>> last_change_time = datetime(2008, 6, 11, 9, 0, 0)
    >>> return_value = server.Bug.search({
    ...     'last_change_time': last_change_time,
    ...     })

    >>> bug_dicts = return_value['bugs']
    >>> assert len(bug_dicts) == 1, "There should only be one bug dict."

    >>> bug_dict = bug_dicts[0]
    >>> for key in sorted(bug_dict):
    ...     print("%s: %s" % (key, bug_dict[key]))
    alias: bug-two
    assigned_to: marvin@heartofgold.ship
    component: Crew
    creation_time: 2008-06-11 09:23:12
    id: 2
    internals:...
    is_open: True
    last_change_time: 2008-06-11 09:24:29
    priority: P1
    product: HeartOfGold
    resolution:
    see_also: []
    severity: high
    status: NEW
    summary: Collect unknown persons in docking bay 2.

Specifying a range of IDs when calling Bug.search() will limit the
results to those IDs.

    >>> last_change_time = datetime(2007, 6, 10, 1, 1, 1)
    >>> return_value = server.Bug.search({
    ...     'id': [1],
    ...     'last_change_time': last_change_time,
    ...     })

    >>> bug_dicts = return_value['bugs']
    >>> for bug_dict in bug_dicts:
    ...     for key in sorted(bug_dict):
    ...         print("%s: %s" % (key, bug_dict[key]))
    alias:
    assigned_to: test@canonical.com
    component: GPPSystems
    creation_time: 2008-06-10 16:19:53
    id: 1
    internals:...
    is_open: True
    last_change_time: 2008-06-10 16:19:53
    priority: P1
    product: Marvin
    resolution: FIXED
    see_also: []
    severity: normal
    status: RESOLVED
    summary: That bloody robot still exists.

Setting last_change_time to a date in the future will mean that no bugs are
returned.

    >>> from datetime import timedelta
    >>> last_change_time = datetime.now() + timedelta(days=42)
    >>> return_value = server.Bug.search({
    ...     'last_change_time': last_change_time,
    ...     })

    >>> bug_dicts = return_value['bugs']
    >>> len(bug_dicts)
    0

It's possible to search for bugs filed on a particular product.

    >>> return_value = server.Bug.search({
    ...     'product': ['HeartOfGold'],
    ...     })

    >>> bug_dicts = return_value['bugs']
    >>> for bug_dict in bug_dicts:
    ...     for key in sorted(bug_dict):
    ...         print("%s: %s" % (key, bug_dict[key]))
    alias: bug-two
    assigned_to: marvin@heartofgold.ship
    component: Crew
    creation_time: 2008-06-11 09:23:12
    id: 2
    internals:...
    is_open: True
    last_change_time: 2008-06-11 09:24:29
    priority: P1
    product: HeartOfGold
    resolution:
    see_also: []
    severity: high
    status: NEW
    summary: Collect unknown persons in docking bay 2.

You can search for more than one product.

    >>> return_value = server.Bug.search({
    ...     'product': ['HeartOfGold', 'Marvin'],
    ...     })
    >>> bug_dicts = return_value['bugs']
    >>> for bug_dict in bug_dicts:
    ...     for key in sorted(bug_dict):
    ...         print("%s: %s" % (key, bug_dict[key]))
    alias:
    assigned_to: test@canonical.com
    component: GPPSystems
    creation_time: 2008-06-10 16:19:53
    id: 1
    internals:...
    is_open: True
    last_change_time: 2008-06-10 16:19:53
    priority: P1
    product: Marvin
    resolution: FIXED
    see_also: []
    severity: normal
    status: RESOLVED
    summary: That bloody robot still exists.
    alias: bug-two
    assigned_to: marvin@heartofgold.ship
    component: Crew
    creation_time: 2008-06-11 09:23:12
    id: 2
    internals:...
    is_open: True
    last_change_time: 2008-06-11 09:24:29
    priority: P1
    product: HeartOfGold
    resolution:
    see_also: []
    severity: high
    status: NEW
    summary: Collect unknown persons in docking bay 2.
    alias: ['bug-three', 'bad-diodes']
    assigned_to: marvin@heartofgold.ship
    component: Crew
    creation_time: 2008-06-10 09:23:12
    id: 3
    internals:...
    is_open: True
    last_change_time: 2008-06-10 09:24:29
    priority: P1
    product: Marvin
    resolution:
    see_also: []
    severity: high
    status: NEW
    summary: Pain in all the diodes down my left hand side.


Getting the comments for a bug
------------------------------

The Bugzilla API provides a Bug.comments() method for retrieving the
comments for a particular bug or set of bugs. We'll define a helper
method to print out comments for us.

    >>> import operator
    >>> def print_bug_comments(bugs_dict, sort_key='id'):
    ...     for key in sorted(bugs_dict):
    ...         print("Bug %s:" % key)
    ...         bug_comments = sorted(
    ...             bugs_dict[key]['comments'],
    ...             key=operator.itemgetter(sort_key))
    ...
    ...         for comment in bug_comments:
    ...             for comment_key in sorted(comment):
    ...                 print("    %s: %s" % (
    ...                     comment_key, comment[comment_key]))
    ...             print()
    ...         print()

Passing a list of bug IDs to Bug.comments() will cause it to return all
the comments for those bugs.

    >>> return_dict = server.Bug.comments({'ids': [1, 2]})
    >>> bugs_dict = return_dict['bugs']

    >>> print_bug_comments(bugs_dict)
    Bug 1:
        author: trillian
        bug_id: 1
        id: 1
        is_private: False
        text: I'd really appreciate it if Marvin would enjoy life a bit.
        time: 2008-06-16 12:44:29
    <BLANKLINE>
        author: marvin
        bug_id: 1
        id: 3
        is_private: False
        text: Life? Don't talk to me about life.
        time: 2008-06-16 13:22:29
    <BLANKLINE>
    <BLANKLINE>
    Bug 2:
        author: trillian
        bug_id: 2
        id: 2
        is_private: False
        text: Bring the passengers to the bridge please Marvin.
        time: 2008-06-16 13:08:08
    <BLANKLINE>
        author: Ford Prefect <ford.prefect@h2g2.com>
        bug_id: 2
        id: 4
        is_private: False
        text: I appear to have become a perfectly safe penguin.
        time: 2008-06-17 20:28:40
    <BLANKLINE>
        author: arthur.dent@earth.example.com
        bug_id: 2
        id: 5
        is_private: False
        text: I never could get the hang of Thursdays.
        time: 2008-06-19 09:30:00
    <BLANKLINE>
        bug_id: 2
        creator: Slartibartfast <slarti@magrathea.example.net>
        id: 6
        is_private: False
        text: You know the fjords in Norway?  I got a prize for creating those, you know.
        time: 2008-06-20 12:37:00
    <BLANKLINE>
    <BLANKLINE>

Passing a list of comment IDs to Bug.comments will cause it to return
those comments in a 'comments' dict.

    >>> return_dict = server.Bug.comments({'comment_ids': [1, 4]})
    >>> comments_dict = return_dict['comments']

    >>> for comment_id, comment in comments_dict.items():
    ...     print("Comment %s:" % comment_id)
    ...     for comment_key in sorted(comment):
    ...         print("    %s: %s" % (
    ...             comment_key, comment[comment_key]))
    ...     print()
    Comment 1:
        author: trillian
        bug_id: 1
        id: 1
        is_private: False
        text: I'd really appreciate it if Marvin would enjoy life a bit.
        time: 2008-06-16 12:44:29
    Comment 4:
        author: Ford Prefect <ford.prefect@h2g2.com>
        bug_id: 2
        id: 4
        is_private: False
        text: I appear to have become a perfectly safe penguin.
        time: 2008-06-17 20:28:40
    <BLANKLINE>

Note that only comments have been returned when only 'comment_ids' have
been passed. The bugs dict is empty.

    >>> print(return_dict['bugs'])
    {}

Passing an include_fields parameter allows us to limit which fields are
returned for each comment.

    >>> return_dict = server.Bug.comments(
    ...     {'ids': [1, 2], 'include_fields': ('id', 'author', 'creator')})
    >>> bugs_dict = return_dict['bugs']

    >>> print_bug_comments(bugs_dict, sort_key='id')
    Bug 1:
        author: trillian
        id: 1
    <BLANKLINE>
        author: marvin
        id: 3
    <BLANKLINE>
    <BLANKLINE>
    Bug 2:
        author: trillian
        id: 2
    <BLANKLINE>
        author: Ford Prefect <ford.prefect@h2g2.com>
        id: 4
    <BLANKLINE>
        author: arthur.dent@earth.example.com
        id: 5
    <BLANKLINE>
        creator: Slartibartfast <slarti@magrathea.example.net>
        id: 6

    >>> return_dict = server.Bug.comments(
    ...     {'comment_ids': [1, 4], 'include_fields': ('id', 'author')})
    >>> comments_dict = return_dict['comments']

    >>> for comment_id, comment in comments_dict.items():
    ...     print("Comment %s:" % comment_id)
    ...     for comment_key in sorted(comment):
    ...         print("    %s: %s" % (
    ...             comment_key, comment[comment_key]))
    Comment 1:
        author: trillian
        id: 1
    Comment 4:
        author: Ford Prefect <ford.prefect@h2g2.com>
        id: 4
    <BLANKLINE>


Bug.add_comment()
-----------------------

The Bug.add_comment() method is used to add comments to a remote bug. It
takes at least two arguments: the ID of the remote comment and the body
of the comment to be added to it.

add_comment() requires authentication.

    >>> bugzilla_transport.expireCookie(bugzilla_transport.auth_cookie)
    >>> server.Bug.add_comment({'id': 1, 'comment': "This won't work"})
    Traceback (most recent call last):
      ...
    xmlrpc.client.Fault: <Fault 410: 'Login Required'>

Bug.add_comment() will return the integer comment ID of the new comment
on the remote server.

    >>> comment = "I'm supposed to write something apposite here."
    >>> bugzilla_transport.setCookie('Bugzilla_logincookie=open sesame')
    >>> return_dict = server.Bug.add_comment({'id': 1, 'comment': comment})
    >>> return_dict
    {'id': 7}

The comment will be stored with the other comments on the remote server.

    >>> return_dict = server.Bug.comments({
    ...     'id': [1], 'comment_ids': [7]})
    >>> comments_dict = return_dict['comments']

    >>> for comment_id, comment in comments_dict.items():
    ...     print("Comment %s:" % comment_id)
    ...     for comment_key in sorted(comment):
    ...         print("    %s: %s" % (
    ...             comment_key, comment[comment_key]))
    Comment 7:
        author: launchpad
        bug_id: 1
        id: 7
        is_private: False
        text: I'm supposed to write something apposite here.
        time: ...

If add_comment is called on a bug that doesn't exist a fault will be
raised.

    >>> server.Bug.add_comment({'id': 42, 'comment': "This breaks"})
    Traceback (most recent call last):
      ...
    xmlrpc.client.Fault: <Fault 101: 'Bug #42 does not exist.'>


Updating the "See also" links on a bug
--------------------------------------

It's possible to alter the list of bugs linked to a bug in a Bugzilla
instance by calling the Bug.update_see_also() method.

URLs can be added to the list of "See also" links by passing them in the
`add` parameter.

    >>> server.Bug.update_see_also({
    ...     'ids': [1], 'add': ['https://launchpad.net/bugs/15']})
    {'changes': {1: {'see_also':
        {'added': ['https://launchpad.net/bugs/15']}}}}

The URL will now have been added to the bug's see_also list.

    >>> return_value = server.Bug.get(
    ...     {'ids': [1], 'permissive': True})
    >>> bug_dict = return_value['bugs'][0]
    >>> for key in sorted(bug_dict):
    ...     print("%s: %s" % (key, bug_dict.get(key)))
    alias:
    assigned_to: test@canonical.com
    component: GPPSystems
    creation_time: 2008-06-10 16:19:53
    id: 1
    internals:...
    is_open: True
    last_change_time: 2008-06-10 16:19:53
    priority: P1
    product: Marvin
    resolution: FIXED
    see_also: ['https://launchpad.net/bugs/15']
    severity: normal
    status: RESOLVED
    summary: That bloody robot still exists.

Any attempt to add the same URL again will simply be ignored.

    >>> server.Bug.update_see_also({
    ...     'ids': [1], 'add': ['https://launchpad.net/bugs/15']})
    {'changes': {}}

Trying to add a non Bugzilla or Launchpad URL will raise a Fault.

    >>> server.Bug.update_see_also({
    ...     'ids': [1], 'add': ['http://example.com/fail']});
    Traceback (most recent call last):
      ...
    xmlrpc.client.Fault:
    <Fault 112: 'Bug URL http://example.com/fail is invalid.'>

It's also possible to remove items from a bug's see_also list.

    >>> server.Bug.update_see_also({
    ...     'ids': [1], 'remove': ['https://launchpad.net/bugs/15']})
    {'changes': {1: {'see_also':
        {'removed': ['https://launchpad.net/bugs/15']}}}}

If a URL is passed in both the `add` and `remove` argument, it will be
added (i.e. `add` overrides `remove`).

    >>> server.Bug.update_see_also({
    ...     'ids': [1], 'add': ['https://launchpad.net/bugs/14'],
    ...     'remove': ['https://launchpad.test/bugs/14']})
    {'changes': {1: {'see_also':
        {'added': ['https://launchpad.net/bugs/14']}}}}
