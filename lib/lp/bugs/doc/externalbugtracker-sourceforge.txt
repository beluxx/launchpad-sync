ExternalBugTracker: SourceForge
===============================

This covers the implementation of the ExternalBugTracker class for
SourceForge bugwatches.


Basics
------

The ExternalBugTracker descendant class which implements methods for
updating bug watches on SourceForge bug trackers is
externalbugtracker.SourceForge, which implements IExternalBugTracker.

    >>> from lp.bugs.externalbugtracker import (
    ...     SourceForge)
    >>> from lp.testing import verifyObject
    >>> from lp.bugs.interfaces.bugtracker import BugTrackerType
    >>> from lp.bugs.interfaces.externalbugtracker import IExternalBugTracker
    >>> verifyObject(IExternalBugTracker,
    ...     SourceForge('http://example.com'))
    True


Status Conversion
-----------------

The SourceForge bug status/resolution combinations map to Launchpad bug
statuses. SourceForge.convertRemoteStatus() handles the conversion.

    >>> sourceforge = SourceForge('http://example.com')
    >>> sourceforge.convertRemoteStatus('Open').title
    'New'
    >>> sourceforge.convertRemoteStatus('Closed').title
    'Fix Released'
    >>> sourceforge.convertRemoteStatus('Pending').title
    'Incomplete'
    >>> sourceforge.convertRemoteStatus('Open:Accepted').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Duplicate').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Fixed').title
    'Fix Committed'
    >>> sourceforge.convertRemoteStatus('Open:Invalid').title
    'Invalid'
    >>> sourceforge.convertRemoteStatus('Open:Later').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Out of Date').title
    'Invalid'
    >>> sourceforge.convertRemoteStatus('Open:Postponed').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus('Open:Rejected').title
    "Won't Fix"
    >>> sourceforge.convertRemoteStatus('Open:Remind').title
    'Confirmed'
    >>> sourceforge.convertRemoteStatus("Open:Won't Fix").title
    "Won't Fix"
    >>> sourceforge.convertRemoteStatus('Open:Works For Me').title
    'Invalid'
    >>> sourceforge.convertRemoteStatus('Closed:Accepted').title
    'Fix Committed'
    >>> sourceforge.convertRemoteStatus('Closed:Fixed').title
    'Fix Released'
    >>> sourceforge.convertRemoteStatus('Closed:Postponed').title
    "Won't Fix"
    >>> sourceforge.convertRemoteStatus('Pending:Postponed').title
    "Won't Fix"

If the status isn't something that our SourceForge ExternalBugTracker can
understand an UnknownRemoteStatusError will be raised.

    >>> sourceforge.convertRemoteStatus('eggs').title
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
      ...
    lp.bugs.externalbugtracker.base.UnknownRemoteStatusError: eggs


Initialization
--------------

Calling initializeRemoteBugDB() on our SourceForge instance and passing
it a set of remote bug IDs will fetch those bug IDs from the server and
file them in a local variable for later use.

We use a test-oriented implementation for the purposes of these tests, which
avoids relying on a working network connection.

    >>> from lp.bugs.tests.externalbugtracker import (
    ...     TestSourceForge, print_bugwatches)
    >>> sourceforge = TestSourceForge('http://example.com/')
    >>> with sourceforge.responses():
    ...     sourceforge.initializeRemoteBugDB([1722250])
    >>> sorted(sourceforge.bugs.keys())
    [1722250]

If a remote bug doesn't define the requisite data, an error will be
raised. We use a special sample bug, bug 0, which defines no status or
resolution, to demonstrate this:

    >>> with sourceforge.responses():
    ...     sourceforge.initializeRemoteBugDB([0])
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
      ...
    lp.bugs.externalbugtracker.base.UnparsableBugData: Remote bug 0 does not define a status.

Some SourceForge bugs are marked private. Although we can't import a
status from them, we don't raise an error when trying to initialize the
remote bug database. Sample bug 99 is private.

    >>> with sourceforge.responses():
    ...     sourceforge.initializeRemoteBugDB([99])
    >>> sorted(sourceforge.bugs.keys())
    [99]

If we look at the bug, however, we can see that its private field has
been set to True:

    >>> sourceforge.bugs[99]['private']
    True

The SourceForge ExternalBugTracker class has an _extractErrorMessage()
method which can be used to find error messages.

    >>> page_data = open(
    ...     'lib/lp/bugs/tests/testfiles/'
    ...     'sourceforge-sample-bug-99.html')
    >>> print(sourceforge._extractErrorMessage(page_data))
    Artifact: This Artifact Has Been Made Private. Only Group Members
    Can View Private ArtifactTypes.

Trying to access the remote status of a private bug, however, will raise
a PrivateRemoteBug error.

    >>> sourceforge.getRemoteStatus(99)
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
     ...
    lp.bugs.externalbugtracker.base.PrivateRemoteBug: Bug 99 on http://example.com is private.


Updating Bug Watches
--------------------

First, we create some bug watches to test with. Example.com hosts a
SourceForge instance which has several bugs that we wish to watch:

    >>> from lp.bugs.interfaces.bug import IBugSet

Launchpad.dev bug #10 is the same bug as reported in example.com bug
#1722250, so we add a watch against the remote bug.

    >>> from lp.app.interfaces.launchpad import ILaunchpadCelebrities
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from lp.bugs.tests.externalbugtracker import (
    ...     new_bugtracker)
    >>> example_bug = getUtility(IBugSet).get(10)
    >>> example_bug_tracker = new_bugtracker(BugTrackerType.SOURCEFORGE)
    >>> sample_person = getUtility(IPersonSet).getByEmail(
    ...     'test@canonical.com')
    >>> example_bugwatch = example_bug.addWatch(
    ...     example_bug_tracker, '1722250',
    ...     getUtility(ILaunchpadCelebrities).janitor)

    >>> print_bugwatches(example_bug_tracker.watches)
    Remote bug 1722250: None

Our SourceForge ExternalBugTracker can now process, and retrieve a
remote status for, the bug watch that we have created.

    >>> transaction.commit()

    >>> from lp.services.log.logger import FakeLogger
    >>> from lp.testing.layers import LaunchpadZopelessLayer
    >>> from lp.bugs.scripts.checkwatches import CheckwatchesMaster
    >>> txn = LaunchpadZopelessLayer.txn
    >>> bug_watch_updater = CheckwatchesMaster(
    ...     txn, logger=FakeLogger())
    >>> sourceforge = TestSourceForge(example_bug_tracker.baseurl)
    >>> with sourceforge.responses():
    ...     bug_watch_updater.updateBugWatches(
    ...         sourceforge, example_bug_tracker.watches)
    INFO Updating 1 watches for 1 bugs on http://bugs.some.where
    >>> print_bugwatches(example_bug_tracker.watches)
    Remote bug 1722250: Open:None

We now add some more watches against remote bugs in the example.com bug
tracker with a variety of statuses.

    >>> from lp.bugs.interfaces.bugwatch import IBugWatchSet
    >>> print_bugwatches(example_bug_tracker.watches,
    ...     sourceforge.convertRemoteStatus)
    Remote bug 1722250: New

    >>> remote_bugs = [
    ...     1722251,
    ...     1722252,
    ...     1722253,
    ...     1722254,
    ...     1722255,
    ...     1722256,
    ...     1722257,
    ...     1722258,
    ...     1722259,
    ... ]

    >>> bug_watch_set = getUtility(IBugWatchSet)
    >>> for remote_bug_id in remote_bugs:
    ...     bug_watch = bug_watch_set.createBugWatch(
    ...         bug=example_bug, owner=sample_person,
    ...         bugtracker=example_bug_tracker,
    ...         remotebug=str(remote_bug_id))

By default, SourceForge ExternalBugTrackers will only import one bug at
a time so as to avoid tripping SourceForge's rate limiting filters. So
even if we pass it 10 bug watches to update only one will actually be
updated. In this case it will be the first bug watch that hasn't yet
been checked.

    >>> transaction.commit()

    >>> from operator import attrgetter
    >>> with sourceforge.responses(trace_calls=True):
    ...     bug_watch_updater.updateBugWatches(
    ...         sourceforge,
    ...         sorted(example_bug_tracker.watches, key=attrgetter('id')))
    INFO Updating 1 watches for 1 bugs on http://bugs.some.where
    GET http://bugs.some.where/support/tracker.php?aid=1722251

For the sake of this test we can set the bug tracker's batch_size to
None so that it will process all the updates at once:

    >>> sourceforge.batch_size = None
    >>> with sourceforge.responses(trace_calls=True):
    ...     bug_watch_updater.updateBugWatches(
    ...         sourceforge, example_bug_tracker.watches)
    INFO Updating 10 watches for 10 bugs on http://bugs.some.where
    GET http://bugs.some.where/support/tracker.php?aid=1722250
    GET http://bugs.some.where/support/tracker.php?aid=1722251
    GET http://bugs.some.where/support/tracker.php?aid=1722252
    GET http://bugs.some.where/support/tracker.php?aid=1722253
    GET http://bugs.some.where/support/tracker.php?aid=1722254
    GET http://bugs.some.where/support/tracker.php?aid=1722255
    GET http://bugs.some.where/support/tracker.php?aid=1722256
    GET http://bugs.some.where/support/tracker.php?aid=1722257
    GET http://bugs.some.where/support/tracker.php?aid=1722258
    GET http://bugs.some.where/support/tracker.php?aid=1722259

The bug statuses have now been imported from the Example.com bug
tracker, so the bug watches should now have valid Launchpad bug
statuses:

    >>> print_bugwatches(example_bug_tracker.watches,
    ...     sourceforge.convertRemoteStatus)
    Remote bug 1722250: New
    Remote bug 1722251: Won't Fix
    Remote bug 1722252: Incomplete
    Remote bug 1722253: Won't Fix
    Remote bug 1722254: Invalid
    Remote bug 1722255: Confirmed
    Remote bug 1722256: Won't Fix
    Remote bug 1722257: Fix Committed
    Remote bug 1722258: Invalid
    Remote bug 1722259: Won't Fix


Getting the remote product for a bug
------------------------------------

It's possible to get the remote product for a bug by calling
SourceForge.getRemoteProduct(). In SourceForge's case, what we refer to
in Launchpad as a 'remote product' is a combination of (group_id, atid),
where 'group_id' is the ID of the 'artifact group' on SourceForge to
which a bug belongs and 'atid' is the 'artifact tracker ID'. This allows
us to pinpoint the specific SourceForge tracker to which the bug
belongs. The remote product is returned by getRemoteProduct() as an
ampersand-separated string.

    >>> print(sourceforge.getRemoteProduct('1722250'))
    155120&794532

If you try to get the remote product of a bug that doesn't exist you'll
get a BugNotFound error.

    >>> print(sourceforge.getRemoteProduct(999999999))
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
      ...
    lp.bugs.externalbugtracker.base.BugNotFound: 999999999

If SourceForge can't find the group_id and atid for the bug (for example
if the bug is private), getRemoteProduct() will return None.

    >>> transaction.commit()

    >>> with sourceforge.responses():
    ...     sourceforge.initializeRemoteBugDB([99])
    >>> print(sourceforge.getRemoteProduct(99))
    None
