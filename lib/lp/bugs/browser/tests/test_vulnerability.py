# Copyright 2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Vulnerability browser tests"""
from datetime import datetime, timezone

from soupmatchers import HTMLContains, Tag, Within
from testtools.matchers import MatchesAll, Not

from lp.services.webapp import canonical_url
from lp.testing import ANONYMOUS, BrowserTestCase, login, person_logged_in
from lp.testing.layers import DatabaseFunctionalLayer


class TestVulnerabilityPage(BrowserTestCase):
    """Tests for the vulnerability browser page."""

    layer = DatabaseFunctionalLayer

    def get_vulnerability_field_tag(self, name, text):
        return Within(
            Tag(
                "{} dl".format(name),
                "dl",
                attrs={"id": "-".join(name.lower().split())},
                text=text,
            ),
            Tag(
                name,
                "dd",
                text=text,
            ),
        )

    def test_page_title_vulnerability_without_linked_cve(self):
        vulnerability = self.factory.makeVulnerability()
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                Tag(
                    "page title",
                    "title",
                    text="Vulnerability #{} : Bugs : {}".format(
                        vulnerability.id,
                        vulnerability.distribution.displayname,
                    ),
                )
            ),
        )

    def test_page_title_vulnerability_with_linked_cve(self):
        cve = self.factory.makeCVE(sequence="2022-1234")
        vulnerability = self.factory.makeVulnerability(cve=cve)
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                Tag(
                    "page title",
                    "title",
                    text="Vulnerability CVE-2022-1234 : Bugs : {}".format(
                        vulnerability.distribution.displayname
                    ),
                )
            ),
        )

    def test_vulnerability_page_contains_all_expected_fields(self):
        vulnerability = self.factory.makeVulnerability()
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        fields = (
            "Date created",
            "Date made public",
            "CVE",
            "Information type",
            "Status",
            "Importance",
            "Importance explanation",
            "Creator",
            "Notes",
            "Mitigation",
        )
        matchers = []
        for field in fields:
            matchers.append(
                HTMLContains(Tag(field, "dt", text="{}:".format(field)))
            )
        self.assertThat(browser.contents, MatchesAll(*matchers))

    def test_vulnerability_page_default_values(self):
        vulnerability = self.factory.makeVulnerability()
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            MatchesAll(
                HTMLContains(
                    self.get_vulnerability_field_tag(
                        "Date created",
                        vulnerability.date_created.strftime("%Y-%m-%d"),
                    ),
                    self.get_vulnerability_field_tag(
                        "Date made public", "None"
                    ),
                    self.get_vulnerability_field_tag("CVE", "None"),
                    self.get_vulnerability_field_tag(
                        "Information type",
                        vulnerability.information_type.title,
                    ),
                    self.get_vulnerability_field_tag(
                        "Status", vulnerability.status.title
                    ),
                    self.get_vulnerability_field_tag(
                        "Importance", vulnerability.importance.title
                    ),
                    self.get_vulnerability_field_tag(
                        # importance_explanation defaults to `None` but the
                        # factory
                        # method auto-generates a value for it.
                        "Importance explanation",
                        vulnerability.importance_explanation,
                    ),
                    Within(
                        Tag("Creator", "dl", attrs={"id": "creator"}),
                        Tag(
                            "Creator link",
                            "a",
                            attrs={
                                "href": canonical_url(vulnerability.creator),
                                "class": "sprite person",
                            },
                            text=vulnerability.creator.displayname,
                        ),
                    ),
                    self.get_vulnerability_field_tag("Notes", "None"),
                    self.get_vulnerability_field_tag("Mitigation", "None"),
                ),
                Not(
                    HTMLContains(
                        Tag(
                            "Related bugs", "div", attrs={"id": "related-bugs"}
                        )
                    )
                ),
            ),
        )

    def test_vulnerability_cve_linked(self):
        cve = self.factory.makeCVE(sequence="2022-1234")
        vulnerability = self.factory.makeVulnerability(cve=cve)
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                Within(
                    Tag(
                        "CVE dl",
                        "dl",
                        attrs={"id": "cve"},
                    ),
                    Tag(
                        "CVE link",
                        "a",
                        attrs={
                            "href": canonical_url(cve, force_local_path=True)
                        },
                    ),
                )
            ),
        )

    def test_vulnerability_optional_parameters_set(self):
        vulnerability = self.factory.makeVulnerability(
            date_made_public=datetime(1970, 1, 1, tzinfo=timezone.utc),
            notes="These are some notes",
            mitigation="Here is a mitigation",
        )
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                self.get_vulnerability_field_tag(
                    "Date made public",
                    vulnerability.date_made_public.strftime("%Y-%m-%d"),
                ),
                self.get_vulnerability_field_tag(
                    "Notes", "These are some notes"
                ),
                self.get_vulnerability_field_tag(
                    "Mitigation", "Here is a mitigation"
                ),
            ),
        )

    def test_vulnerability_related_bugs_present(self):
        vulnerability = self.factory.makeVulnerability()
        bug1 = self.factory.makeBug()
        bug2 = self.factory.makeBug()
        with person_logged_in(vulnerability.distribution.owner):
            vulnerability.linkBug(bug1)
            vulnerability.linkBug(bug2)
        browser = self.getUserBrowser(
            canonical_url(vulnerability),
            user=self.factory.makePerson(),
        )
        login(ANONYMOUS)
        self.assertThat(
            browser.contents,
            HTMLContains(
                Tag("Related bugs", "div", attrs={"id": "related-bugs"}),
                Tag(
                    "Bug #{}".format(bug1.id),
                    "a",
                    attrs={
                        "class": "sprite bug",
                        "href": canonical_url(bug1, force_local_path=True),
                    },
                    text="Bug #{}: {}".format(bug1.id, bug1.title),
                ),
                Tag(
                    "Bug #{}".format(bug2.id),
                    "a",
                    attrs={
                        "class": "sprite bug",
                        "href": canonical_url(bug2, force_local_path=True),
                    },
                    text="Bug #{}: {}".format(bug2.id, bug2.title),
                ),
            ),
        )
