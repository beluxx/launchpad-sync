#! /bin/bash
#
# Copyright 2009-2021 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).
#
# This script will set up a brand new Ubuntu machine as a LP developer
# workstation, from scratch. The script lives in the LP codebase itself,
# as utilities/rocketfuel-setup

# load up Ubuntu release details so we know which repos to enable
source /etc/lsb-release
DO_WORKSPACE=1
INSTALL_OPTS=""
getopt_output="$(getopt -o '' -l no-workspace,lpusername:,assume-yes -- "$@")" || exit 1
eval set -- "$getopt_output"
while :; do
  case $1 in
    --no-workspace)
        DO_WORKSPACE=0
        shift
        ;;
    --lpusername)
        lpusername=$2
        echo "Using username $lpusername for Launchpad"
        shift
        ;;
    --assume-yes)
        echo "Installing packages without prompting"
        INSTALL_OPTS="-y"
        shift
        ;;
    -- | *) shift; break ;;
    esac
done

if [ -z "$lpusername" ]; then
  # Establish LP username
  whoami=`whoami`
  printf "What is your Launchpad username? [$whoami] "
  read lpusername
  if [ -z "$lpusername" ]; then
    lpusername=${whoami}
  fi
fi

# Make sure you have all the needed virtual hosts

dev_host() {
  if ! grep -q "^127.0.0.88.* ${hostname}" /etc/hosts; then
    sudo sed -i "s/^127.0.0.88.*$/&\ ${hostname}/" /etc/hosts
    echo "${hostname} added to /etc/hosts"
  fi
  }

if ! grep -q "^127.0.0.88" /etc/hosts; then
  echo "Adding development hosts on local machine"
  echo "
# Launchpad virtual domains. This should be on one line.
127.0.0.88      launchpad.test
" | sudo tee -a /etc/hosts > /dev/null
  echo "launchpad.test added to /etc/hosts"
fi

declare -a hostnames
hostnames=$(cat <<EOF
    answers.launchpad.test
    archive.launchpad.test
    api.launchpad.test
    bazaar.launchpad.test
    bazaar-internal.launchpad.test
    blueprints.launchpad.test
    bugs.launchpad.test
    code.launchpad.test
    feeds.launchpad.test
    keyserver.launchpad.test
    lists.launchpad.test
    ppa.launchpad.test
    private-ppa.launchpad.test
    testopenid.test
    translations.launchpad.test
    xmlrpc-private.launchpad.test
    xmlrpc.launchpad.test
EOF
    )

for hostname in $hostnames; do
  dev_host;
done

# Enable relevant Ubuntu package repositories
if ! grep -qE "^deb https?:.* ${DISTRIB_CODENAME} .*universe" /etc/apt/sources.list; then
    echo "Please enable the 'universe' component in /etc/apt/sources.list'"
    exit 1
fi
if ! grep -qE "^deb https?:.* ${DISTRIB_CODENAME} .*multiverse" /etc/apt/sources.list; then
    echo "Please enable the 'multiverse' component in /etc/apt/sources.list'"
    exit 1
fi

LPDEV_SOURCES="/etc/apt/sources.list.d/launchpad-dev.list"
if [ ! -e $LPDEV_SOURCES ]; then
  sudo touch $LPDEV_SOURCES
fi

LP_PPA="deb http://ppa.launchpad.net/launchpad/ppa/ubuntu ${DISTRIB_CODENAME} main"
if ! grep -q "^${LP_PPA}" $LPDEV_SOURCES; then
  echo "Adding ~launchpad PPA repository to package source list."
  echo "$LP_PPA"  | sudo tee -a $LPDEV_SOURCES
fi
REQUIRED_PPA_KEYS="2AF499CB24AC5F65461405572D1FFB6C0A5174AF"

# Get the key used to sign the launchpad-developer-dependencies in the PPA.
for key in $REQUIRED_PPA_KEYS; do
   if ! sudo APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 \
       apt-key adv --list-keys --with-colons --fingerprint | grep -qE "^fpr:+$key"; then
     echo "Retrieving key $key."
     if ! gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $key; then
       echo "Could not retrieve key $key."
       exit 1
     fi
     if ! gpg --export -a $key | sudo apt-key add -; then
       echo "Could not install key $key."
       exit 1
     fi
   fi
done

do_install() {
  if ! dpkg -s "$pkg" | grep -q "^Status: install ok installed"; then
    echo "Installing $pkg package..."
    if ! sudo apt-get install $INSTALL_OPTS "$pkg"; then
      echo "Unable to install $pkg."
      exit 1
    fi
  fi
  }

sudo apt-get update
REQUIRED_PACKAGES="launchpad-developer-dependencies apache2 libapache2-mod-wsgi"
for pkg in $REQUIRED_PACKAGES; do
  do_install;
done

# Create the document root(s) to avoid Apache warnings
mkdir -p /var/tmp/bazaar.launchpad.test/static
mkdir -p /var/tmp/bazaar.launchpad.test/mirrors

if ! sudo a2enmod proxy > /dev/null; then
  echo "ERROR: Unable to enable proxy module in Apache2"
  exit 1
fi

if ! sudo a2enmod proxy_http > /dev/null; then
  echo "ERROR: Unable to enable proxy_http module in Apache2"
  exit 1
fi

if ! sudo a2enmod rewrite > /dev/null; then
  echo "ERROR: Unable to enable rewrite module in Apache2"
  exit 1
fi

if ! sudo a2enmod ssl > /dev/null; then
  echo "ERROR: Unable to enable ssl module in Apache2"
  exit 1
fi

if ! sudo a2enmod deflate > /dev/null; then
  echo "ERROR: Unable to enable deflate module in Apache2"
  exit 1
fi

if ! sudo a2enmod headers > /dev/null; then
  echo "ERROR: Unable to enable headers module in Apache2"
  exit 1
fi

if ! sudo a2enmod wsgi > /dev/null; then
  echo "ERROR: Unable to enable wsgi module in Apache2"
  exit 1
fi

if [ $DO_WORKSPACE == 0 ]; then
  cat <<EOT
Branches have not been created, as requested.  You will need to do some or all
of the following steps:
$ git clone lp:launchpad
$ cd launchpad
$ git clone --depth=1 lp:lp-source-dependencies download-cache
$ utilities/update-sourcecode
$ utilities/launchpad-database-setup
$ make schema
$ sudo make install
EOT
  exit 0
fi

if [ ! -e "$HOME/.rocketfuel-env.sh" ]; then
  echo "# Common environment variables for the rocketfuel-* scripts.
#
# The ones you can set are:
#
# LP_PROJECT_ROOT - The root directory of all your Launchpad stuff.  Your
#                   Launchpad repository will live in a child directory
#                   of this directory.
# LP_TRUNK_NAME   - The directory name (not path!) to your rocketfuel trunk
#                   mirror directory.  This is relative to your
#                   LP_PROJECT_ROOT.
# LP_SOURCEDEPS_DIR - The name of the directory (not path!) where your
#                   trunk sourcecode will be placed.  This is relative to your
#                   LP_PROJECT_ROOT and should /not/ have the 'sourcecode'
#                   path appended to it, since this is automatically added by
#                   the scripts.

LP_PROJECT_ROOT=\${LP_PROJECT_ROOT:=~/launchpad}
LP_TRUNK_NAME=\${LP_TRUNK_NAME:=launchpad}
LP_TRUNK_PATH=\$LP_PROJECT_ROOT/\$LP_TRUNK_NAME

LP_SOURCEDEPS_DIR=\${LP_SOURCEDEPS_DIR:=lp-sourcedeps}
LP_SOURCEDEPS_PATH=\$LP_PROJECT_ROOT/\$LP_SOURCEDEPS_DIR/sourcecode

# Force tilde expansion
LP_SOURCEDEPS_PATH=\$(eval echo \${LP_SOURCEDEPS_PATH})
" > "$HOME/.rocketfuel-env.sh"
fi

if ! source "$HOME/.rocketfuel-env.sh"; then
    echo "Something went wrong with rocketfuel-setup!"
    exit 1
fi


# Create the local branch structure we will use for managing Launchpad code
mkdir -p "$LP_PROJECT_ROOT"
cd "$LP_PROJECT_ROOT" || exit 1

echo "Logging bzr into Launchpad (it's okay if this errors)..."
if ! bzr launchpad-login "$lpusername"; then
  echo ""
  echo "You can ignore any error above about not registering an SSH key"
  echo "with Launchpad.  Registering an SSH key is only important if you"
  echo "are writing data to Launchpad, or trying to access private data."
  echo ""
fi

# Make sure "git clone lp:..." works.  Yes, it's pretty odd to use bzr to
# help configure git, but it knows how to check whether the user has SSH
# keys.  If we eventually want to drop our dependency on bzr then we can
# write this out longhand in Python.
echo "Configuring git..."
if [ "$(git ls-remote --get-url lp:launchpad)" = lp:launchpad ]; then
  if bzr launchpad-login --verbose 2>/dev/null | grep -q 'has SSH keys'; then
    git config --global url.git+ssh://git.launchpad.net/.insteadof lp:
  else
    git config --global url.https://git.launchpad.net/.insteadof lp:
  fi
fi

cd "$LP_PROJECT_ROOT" || exit 1
if [ ! -d "$LP_TRUNK_NAME" ]; then
  echo "Making local clone of Launchpad; this may take a while..."
  if ! git clone lp:launchpad "$LP_TRUNK_NAME"; then
    echo "ERROR: Unable to create local clone of Launchpad"
    exit 1
  fi
fi

cd "$LP_TRUNK_NAME" || exit 1
if ! git status; then
  echo "ERROR: Your clone in $LP_TRUNK_PATH is corrupted.
       Please delete $LP_TRUNK_PATH and run rocketfuel-setup again."
       exit 1
fi
if [ "$(git remote get-url origin)" != "//git.launchpad.net/launchpad" ]; then
  echo "ERROR: Your clone in $LP_TRUNK_PATH has an incorrect pull location, correcting now..."
  if ! git remote set-url origin git+ssh://git.launchpad.net/launchpad; then
    echo "ERROR: Unable to set trunk pull location to lp:launchpad"
    exit 1
  fi
fi

# Call the newly minted Launchpad branch's 'make install' target to do some
# more apache setup.
if ! sudo make install > /dev/null; then
  echo "ERROR: Unable to install apache config appropriately"
  exit 1
fi


# Set up scripts in /usr/local/bin
cd /usr/local/bin || exit 1
if [ ! -e rocketfuel-get ]; then
  sudo ln -s "$LP_TRUNK_PATH/utilities/rocketfuel-get"
fi
if ! ls -l rocketfuel-get | cut -d">" -f2 | grep -q "$LP_TRUNK_NAME\/utilities\/rocketfuel"; then
  echo "WARNING: /usr/local/bin/rocketfuel-get should be deleted so I can
         recreate it."
fi
if [ ! -e rocketfuel-setup ]; then
  sudo ln -s "$LP_TRUNK_PATH/utilities/rocketfuel-setup"
fi
if ! ls -l rocketfuel-setup | cut -d">" -f2 | grep -q "$LP_TRUNK_NAME\/utilities\/rocketfuel"; then
  echo "WARNING: /usr/local/bin/rocketfuel-setup should be deleted so I can
         recreate it."
fi


# Make sure we have all the right code in place for source dependencies
/usr/local/bin/rocketfuel-get

echo "
Thank you for using this script.  You can improve it for everyone by
committing changes to Launchpad in utilities/rocketfuel-setup.

Please see http://dev.launchpad.net/ for more information on
developing and testing Launchpad, and on submitting changes.

You can use the following commands to manage your Launchpad
development environment:

 rocketfuel-get
    Update your copy of $LP_TRUNK_NAME and the necessary source
    dependencies, and make sure all source dependencies are properly
    linked in to all the branches you are working on.

Consider installing pre-commit (https://pre-commit.com/) as a git hook to
take advantage of some extra checks when committing:

 $ pre-commit install

Happy hacking!
"
