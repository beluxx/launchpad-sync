#! /bin/bash
#
# Copyright 2009-2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).
#
# Update your copy of master and the necessary source dependencies.

# Stop if there's an error, and treat unset variables as errors.
set -eu

# Helper function to run a child process, indenting stdout to aid
# readability.
run-child() {
    "$@" | sed -e "s/^/        /"
}

# Load local settings.
if [ -e "$HOME/.rocketfuel-env.sh" ]
then
    # shellcheck disable=SC1091
    source "$HOME/.rocketfuel-env.sh"
else
    echo "Please run rocketfuel-setup first." >&2
    exit 1
fi

LP_DOWNLOAD_CACHE_PATH="$LP_PROJECT_ROOT/$LP_SOURCEDEPS_DIR/download-cache"
YUI_PATH="$LP_PROJECT_ROOT/$LP_SOURCEDEPS_DIR/yui"
LP_DOWNLOAD_CACHE_PATH="$(eval echo "$LP_DOWNLOAD_CACHE_PATH")"

# Pull launchpad devel from launchpad.
INITIAL_REV=$(git -C "$LP_TRUNK_PATH" rev-parse HEAD)
git -C "$LP_TRUNK_PATH" pull
FINAL_REV=$(git -C "$LP_TRUNK_PATH" rev-parse HEAD)

# Make sure our directories are around.
mkdir -p "$(dirname "$LP_DOWNLOAD_CACHE_PATH")" "$YUI_PATH"

# Get/update the download cache.
if [ -d "$LP_DOWNLOAD_CACHE_PATH" ]
then
    git -C "$LP_DOWNLOAD_CACHE_PATH" pull
else
    git clone --depth=1 lp:lp-source-dependencies "$LP_DOWNLOAD_CACHE_PATH"
fi

echo "Linking download-cache into current local branches:"

# Find directories among local branches containing "utilities" directories.
# Prints each as a null-terminated record (since Unix filenames may contain
# newlines).
find_branches_to_relink() {
    find "$LP_PROJECT_ROOT" \
        -mindepth 2 -maxdepth 2 -type d -name utilities -printf '%h\0'
}

# Some setups may have lp-sourcedeps mixed in with the local branches.  Echo
# stdin to stdout, with these filenames filtered out.  Filenames must be
# null-terminated on input, and remain null-terminated on output.
filter_branches_to_relink() {
    grep -vz '/lp-sourcedeps$'
}

# Link download-cache into local branches.  Takes the branch paths from
# stdin, as null-terminated records.
relink_branches() {
    run-child xargs --no-run-if-empty --max-args=1 --null \
        "$LP_TRUNK_PATH/utilities/link-external-sourcecode" \
            --parent "$LP_PROJECT_ROOT/$LP_SOURCEDEPS_DIR" --target
}

# Actually do it:
find_branches_to_relink | filter_branches_to_relink | relink_branches


# Build launchpad if there were changes.
if [ "$FINAL_REV" != "$INITIAL_REV" ]
then
    make -C "$LP_TRUNK_PATH"
fi
