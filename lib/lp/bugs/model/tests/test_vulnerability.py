# Copyright 2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Tests for the vulnerability and related models."""
from zope.component import getUtility

from lp.bugs.interfaces.vulnerability import (
    IVulnerabilitySet,
    VulnerabilityChange,
    )
from lp.services.webapp.authorization import check_permission
from lp.testing import (
    admin_logged_in,
    anonymous_logged_in,
    person_logged_in,
    TestCaseWithFactory,
    verifyObject,
    )
from lp.testing.layers import DatabaseFunctionalLayer


class TestVulnerability(TestCaseWithFactory):

    layer = DatabaseFunctionalLayer

    def setUp(self):
        super().setUp()
        self.distribution = self.factory.makeDistribution()
        self.vulnerability = self.factory.makeVulnerability(
            distribution=self.distribution)

    def test_random_user(self):
        with person_logged_in(self.factory.makePerson()):
            self.assertTrue(
                check_permission("launchpad.View", self.vulnerability))
            self.assertFalse(
                check_permission("launchpad.Edit", self.vulnerability))

    def test_admin(self):
        with admin_logged_in():
            self.assertTrue(
                check_permission("launchpad.View", self.vulnerability))
            self.assertTrue(
                check_permission("launchpad.Edit", self.vulnerability))

    def test_non_admin(self):
        with person_logged_in(self.distribution.owner):
            self.assertTrue(
                check_permission("launchpad.View", self.vulnerability))
            self.assertTrue(
                check_permission("launchpad.Edit", self.vulnerability))

    def test_anonymous(self):
        with anonymous_logged_in():
            self.assertFalse(
                check_permission("launchpad.View", self.vulnerability))
            self.assertFalse(
                check_permission("launchpad.Edit", self.vulnerability))


class TestVulnerabilityActivity(TestCaseWithFactory):

    layer = DatabaseFunctionalLayer

    def test_vulnerability_activity_changes(self):
        vulnerability = self.factory.makeVulnerability()
        changer = self.factory.makePerson()
        activity = self.factory.makeVulnerabilityActivity(
            vulnerability=vulnerability, changer=None)
        with person_logged_in(changer):
            self.assertTrue(VulnerabilityChange.DESCRIPTION,
                            activity.what_changed)


class TestVulnerabilitySet(TestCaseWithFactory):

    layer = DatabaseFunctionalLayer

    def test_VulnerabilitySet_implements_IVulnerabilitySet(self):
        vulnerabilitySet = getUtility(IVulnerabilitySet)
        self.assertTrue(verifyObject(IVulnerabilitySet, vulnerabilitySet))

    def test_bugVulnerabilityCount(self):
        # vulnerability3 linked bugs will not be reflected
        # in computations of linked bugs on
        # vulnerability 1 and 2

        vulnerability1 = self.factory.makeVulnerability()
        vulnerability2 = self.factory.makeVulnerability()
        vulnerability3 = self.factory.makeVulnerability()
        bug1 = self.factory.makeBug()
        bug2 = self.factory.makeBug()
        initial_number = len(vulnerability1.bugs)
        with admin_logged_in():
            vulnerability1.linkBug(bug1)
            vulnerability3.linkBug(bug1)
            vulnerability3.linkBug(bug2)

        self.assertEqual(
            initial_number + 1,
            len(vulnerability1.bugs))

        with admin_logged_in():
            vulnerability2.linkBug(bug2)
        self.assertEqual(
            initial_number + 2,
            (len(vulnerability1.bugs) + len(vulnerability2.bugs)))

        with admin_logged_in():
            vulnerability2.linkBug(bug1)
        self.assertEqual(
            initial_number + 3,
            (len(vulnerability1.bugs) + len(vulnerability2.bugs)))

        with admin_logged_in():
            vulnerability1.unlinkBug(bug1)
            vulnerability2.unlinkBug(bug2)
            vulnerability2.unlinkBug(bug1)
        self.assertEqual(
            initial_number,
            (len(vulnerability1.bugs) + len(vulnerability2.bugs)))
