Upload path parsing
===================

The upload path is used to decide in which context a uploaded package
will be processed.

This is decided by `parse_upload_path` function.

    >>> from lp.archiveuploader.uploadprocessor import (
    ...     parse_upload_path)

We will use a helper function to check how `parse_upload_path` behaves
in several scenarios.

    >>> def check_upload(relative_path):
    ...     (distribution, suite_name, archive) = parse_upload_path(
    ...         relative_path)
    ...     print('Archive: %s' % archive.name)
    ...     print('Distribution: %s' % distribution.name)
    ...     print('Suite: %s' % suite_name)


Distribution uploads
--------------------

Upload placed on 'root', i.e, no 'relative_path' will be targeted to
'ubuntu' primary archive.

    >>> check_upload('')
    Archive: primary
    Distribution: ubuntu
    Suite: None

When the first relative path part does not start with '~' it's assumed
to be the 'target distribution name'.

    >>> check_upload('ubuntu')
    Archive: primary
    Distribution: ubuntu
    Suite: None

    >>> check_upload('debian')
    Archive: primary
    Distribution: debian
    Suite: None

If such distribution doesn't exist, parse_upload_path() raises
`UploadPathError`.

    >>> check_upload('does-not-exist')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.UploadPathError: Could not find distribution 'does-not-exist'.

Upload to a distribution can have their 'changesfile' suite target
overridden by including a specific suite name in the upload path.

    >>> check_upload('ubuntu/warty-backports')
    Archive: primary
    Distribution: ubuntu
    Suite: warty-backports

    >>> check_upload('debian/woody')
    Archive: primary
    Distribution: debian
    Suite: woody

Again, if the given suite name can not be found an `UploadPathError`
is raised.

    >>> check_upload('debian/imaginary')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.UploadPathError: Could not find suite 'imaginary'.


PPA uploads
-----------

An upload will be considered targeted to a PPA if the first path term
starts with '~', then the subsequent text in this term will be looked
up as a Person in Launchpad.

    >>> from zope.component import getUtility
    >>> from lp.registry.interfaces.distribution import IDistributionSet
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from lp.soyuz.enums import ArchivePurpose
    >>> from lp.soyuz.interfaces.archive import IArchiveSet
    >>> debian = getUtility(IDistributionSet).getByName('debian')
    >>> cprov = getUtility(IPersonSet).getByName('cprov')
    >>> copy_archive = getUtility(IArchiveSet).new(
    ...     ArchivePurpose.PPA, cprov, 'ppa', distribution=debian)

    >>> check_upload('~cprov/ubuntu/ppa')
    Archive: ppa
    Distribution: ubuntu
    Suite: None

    >>> check_upload('~cprov/debian/ppa')
    Archive: ppa
    Distribution: debian
    Suite: None

    >>> check_upload('~does-not-exist/ubuntu/ppa')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.PPAUploadPathError: Could not find person or team named 'does-not-exist'.

    >>> check_upload('~cprov/notbuntu/ppa')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.PPAUploadPathError: Could not find distribution 'notbuntu'.

Two deprecated PPA paths are still supported for compatibility. Before
mid-2014 all PPAs were for Ubuntu, and the distribution came after the
PPA name and could be omitted. Before 2009 each user had at most one
PPA, so the name was omitted -- we assume "ppa".

    >>> check_upload('~cprov/ppa/ubuntu')
    Archive: ppa
    Distribution: ubuntu
    Suite: None
    >>> check_upload('~cprov/ppa')
    Archive: ppa
    Distribution: ubuntu
    Suite: None

    >>> check_upload('~cprov/ubuntu')
    Archive: ppa
    Distribution: ubuntu
    Suite: None

PPA uploads also support overrides to the changesfile suite when it's
valid. It's also supported for uploads to the deprecated paths.

    >>> check_upload('~cprov/ubuntu/ppa/warty-backports')
    Archive: ppa
    Distribution: ubuntu
    Suite: warty-backports

    >>> check_upload('~cprov/ppa/ubuntu/warty-backports')
    Archive: ppa
    Distribution: ubuntu
    Suite: warty-backports

    >>> check_upload('~cprov/ppa/ubuntu/boing')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.PPAUploadPathError: Could not find suite 'boing'.

We will disable Celso's default PPA and uploads to it will result in
an error.

    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> cprov_ppa = cprov.getPPAByName(ubuntu, 'ppa')
    >>> cprov_ppa.disable()

    >>> import transaction
    >>> transaction.commit()

    >>> check_upload('~cprov/ubuntu/ppa')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.PPAUploadPathError: PPA for Celso Providelo is disabled.

    >>> check_upload('~cprov/ppa/ubuntu')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.PPAUploadPathError: PPA for Celso Providelo is disabled.

Uploading to named PPA that does not exist fails.

    >>> check_upload('~cprov/ubuntu/beta')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.PPAUploadPathError: Could not find a PPA owned by 'cprov' for 'ubuntu' named 'beta'.

    >>> check_upload('~cprov/beta/ubuntu')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.PPAUploadPathError: Could not find a PPA owned by 'cprov' for 'ubuntu' named 'beta'.

We will create a 'beta' PPA for Celso.

    >>> beta_ppa = getUtility(IArchiveSet).new(
    ...     ArchivePurpose.PPA, cprov, 'beta')

And the upload now found its way to the new named PPA.

    >>> check_upload('~cprov/ubuntu/beta')
    Archive: beta
    Distribution: ubuntu
    Suite: None

    >>> check_upload('~cprov/beta/ubuntu')
    Archive: beta
    Distribution: ubuntu
    Suite: None


Non-sense upload paths
----------------------

Obviously upload paths can be completely bogus and the processing function
identifies and warns users accordingly.

An extra path part that cannot be processed for distribution uploads.

    >>> check_upload('ubuntu/warty/ding-dong')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.UploadPathError: Path format mismatch.

A distribution specific uploads starting with '~' as if it was a
person name. Note that users can't be named like distribution anyways.

    >>> check_upload('~ubuntu')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.UploadPathError: Path format mismatch.

An extra path part that cannot be processed for PPA uploads.

    >>> check_upload('~cprov/ubuntu/ppa/warty/ding-dong')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.UploadPathError: Path format mismatch.

A PPA upload missing '~':

    >>> check_upload('cprov/ubuntu/ppa')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.UploadPathError: Path format mismatch.

A old-style PPA upload missing '~':

    >>> check_upload('cprov/ubuntu')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.UploadPathError: Could not find distribution 'cprov'.

An old-style named PPA upload missing '~'.

    >>> check_upload('cprov/ppa/ubuntu')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.UploadPathError: Path format mismatch.


Binary uploads from build slaves
--------------------------------

A relative path for a binary upload from a build slave will have the
following format: <archive_id>/<distribution_name> where archive_id
is the database key of the archive in question.

So, here is a binary upload path to the primary archive:

    >>> ubuntu = getUtility(IDistributionSet)['ubuntu']
    >>> primary = getUtility(IArchiveSet).getByDistroPurpose(
    ...     ubuntu, ArchivePurpose.PRIMARY, 'primary')
    >>> check_upload('%s/ubuntu' % primary.id)
    Archive: primary
    Distribution: ubuntu
    Suite: None

The same for a PPA:

    >>> cprov_ppa.enable()
    >>> check_upload('%s/ubuntu' % cprov_ppa.id)
    Archive: ppa
    Distribution: ubuntu
    Suite: None

And, last but not least, for a copy archive:

    >>> copy_archive = getUtility(IArchiveSet).new(
    ...     ArchivePurpose.COPY, cprov, 'samplecopyarchive')
    >>> check_upload('%s/ubuntu' % copy_archive.id)
    Archive: samplecopyarchive
    Distribution: ubuntu
    Suite: None

In the case where an archive cannot be found an 'UploadPathError' exception
is raised.

    >>> check_upload('1234567890/ubuntu')
    ... # doctest: +IGNORE_EXCEPTION_MODULE_IN_PYTHON2
    Traceback (most recent call last):
    ...
    lp.archiveuploader.uploadprocessor.UploadPathError: Could not find archive with id=1234567890.
