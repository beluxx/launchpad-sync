Distribution Mirrors
====================

For every mirror of distribution we publish most of its attributes. For
archive mirrors:

    >>> from lazr.restful.testing.webservice import pprint_entry
    >>> distros = webservice.get("/distros").jsonBody()
    >>> distro = distros['entries'][0]
    >>> ubuntu = webservice.get(distro['self_link']).jsonBody()
    >>> ubuntu_archive_mirrors = webservice.get(
    ...     ubuntu['archive_mirrors_collection_link']).jsonBody()
    >>> canonical_archive = webservice.named_get(
    ...     ubuntu['self_link'], 'getMirrorByName',
    ...     name='canonical-archive').jsonBody()
    >>> pprint_entry(canonical_archive)
    content: 'Archive'
    country_dns_mirror: False
    country_link: 'http://.../+countries/GB'
    date_created: '2006-10-16T18:31:43.434567+00:00'
    date_reviewed: None
    description: None
    displayname: None
    distribution_link: 'http://.../ubuntu'
    enabled: True
    ftp_base_url: None
    http_base_url: 'http://archive.ubuntu.com/ubuntu/'
    https_base_url: None
    name: 'canonical-archive'
    official_candidate: True
    owner_link: 'http://.../~mark'
    resource_type_link: 'http://.../#distribution_mirror'
    reviewer_link: None
    rsync_base_url: None
    self_link: 'http://.../ubuntu/+mirror/canonical-archive'
    speed: '100 Mbps'
    status: 'Official'
    web_link: 'http://launchpad.../ubuntu/+mirror/canonical-archive'
    whiteboard: None

And CD image mirrors:

    >>> ubuntu_cd_mirrors = webservice.get(
    ...     ubuntu['cdimage_mirrors_collection_link']).jsonBody()
    >>> canonical_releases =  ubuntu_cd_mirrors['entries'][0]
    >>> canonical_releases_json = webservice.get(
    ...     canonical_releases['self_link']).jsonBody()
    >>> pprint_entry(canonical_releases_json)
    content: 'CD Image'
    country_dns_mirror: False
    country_link: 'http://.../+countries/GB'
    date_created: '2006-10-16T18:31:43.434567+00:00'
    date_reviewed: None
    description: None
    displayname: None
    distribution_link: 'http://.../ubuntu'
    enabled: True
    ftp_base_url: None
    http_base_url: 'http://releases.ubuntu.com/'
    https_base_url: None
    name: 'canonical-releases'
    official_candidate: True
    owner_link: 'http://.../~mark'
    resource_type_link: 'http://.../#distribution_mirror'
    reviewer_link: None
    rsync_base_url: None
    self_link: 'http://.../ubuntu/+mirror/canonical-releases'
    speed: '100 Mbps'
    status: 'Official'
    web_link: 'http://launchpad.../ubuntu/+mirror/canonical-releases'
    whiteboard: None

Security checks
===============

People who are not mirror listing admins or the mirrors registrar may not
change the owner's of mirrors:

    >>> from zope.component import getUtility
    >>> from lp.testing.pages import webservice_for_person
    >>> from lp.services.webapp.interfaces import OAuthPermission
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from simplejson import dumps
    >>> login(ANONYMOUS)
    >>> karl_db = getUtility(IPersonSet).getByName('karl')
    >>> test_db = getUtility(IPersonSet).getByName('name12')
    >>> no_priv_db = getUtility(IPersonSet).getByName('no-priv')
    >>> karl_webservice = webservice_for_person(
    ...     karl_db, permission=OAuthPermission.WRITE_PUBLIC)
    >>> test_webservice = webservice_for_person(
    ...     test_db, permission=OAuthPermission.WRITE_PUBLIC)
    >>> no_priv_webservice = webservice_for_person(
    ...     no_priv_db, permission=OAuthPermission.READ_PUBLIC)
    >>> logout()

Ensure that anonymous API sessions can view mirror listings; archive/releases.

    >>> archive_response = anon_webservice.get(
    ...     ubuntu['archive_mirrors_collection_link'])
    >>> anon_archive_mirrors = archive_response.jsonBody()
    >>> print(anon_archive_mirrors['total_size'])
    5

    >>> cd_response = anon_webservice.get(
    ...     ubuntu['cdimage_mirrors_collection_link'])
    >>> anon_cd_mirrors = cd_response.jsonBody()
    >>> print(anon_cd_mirrors['total_size'])
    4

One must have special permissions to access certain attributes:

    >>> archive_404_mirror = webservice.named_get(
    ...     ubuntu['self_link'], 'getMirrorByName',
    ...     name="archive-404-mirror").jsonBody()
    >>> response = no_priv_webservice.get(
    ...     archive_404_mirror['self_link']).jsonBody()
    >>> pprint_entry(response)
    content: ...
    ...
    date_reviewed: ...redacted...
    ...
    official_candidate: ...redacted...
    ...
    reviewer_link: ...redacted...
    ...
    whiteboard: ...redacted...

Mirror registrars may see some:

    >>> response = test_webservice.get(
    ...     archive_404_mirror['self_link']).jsonBody()
    >>> pprint_entry(response)
    content: ...
    ...
    date_reviewed: ...redacted...
    ...
    reviewer_link: ...redacted...

Mirror listing admins may see all:

    >>> response = karl_webservice.get(
    ...     archive_404_mirror['self_link']).jsonBody()
    >>> pprint_entry(response)
    content: 'Archive'
    country_dns_mirror: False
    country_link: 'http://.../+countries/FR'
    date_created: '2006-10-16T18:31:43.438573+00:00'
    date_reviewed: None
    description: None
    displayname: None
    distribution_link: 'http://.../ubuntu'
    enabled: True
    ftp_base_url: None
    http_base_url: 'http://localhost:11375/archive-mirror/'
    https_base_url: None
    name: 'archive-404-mirror'
    official_candidate: True
    owner_link: 'http://.../~name12'
    resource_type_link: 'http://.../#distribution_mirror'
    reviewer_link: None
    rsync_base_url: None
    self_link: 'http://.../ubuntu/+mirror/archive-404-mirror'
    speed: '512 Kbps'
    status: 'Official'
    web_link: 'http://launchpad.../ubuntu/+mirror/archive-404-mirror'
    whiteboard: None

Now trying to set the owner using Sample Person's webservice is not
authorized.

    >>> karl = webservice.get("/~karl").jsonBody()
    >>> patch = {
    ...     u'owner_link': karl['self_link']
    ... }
    >>> response = test_webservice.patch(
    ...     canonical_archive['self_link'], 'application/json', dumps(patch))
    >>> response.status
    401

But if we use Karl, the mirror listing admin's, webservice, we can update
the owner.

    >>> response = karl_webservice.patch(
    ...     canonical_archive['self_link'], 'application/json', dumps(patch))
    >>> response.status
    209

    >>> patched_canonical_archive = response.jsonBody()
    >>> print(patched_canonical_archive['owner_link'])
    http://.../~karl

Some attributes are read-only via the API:

    >>> distros = webservice.get("/distros").jsonBody()
    >>> debian_distro = distros['entries'][3]
    >>> patch = {
    ...     u'date_reviewed' : u'2010-02-04T17:19:16.424198+00:00',
    ...     u'distribution_link' : debian_distro['self_link'],
    ...     u'enabled' : False,
    ...     u'reviewer_link' : karl['self_link']
    ... }
    >>> response = karl_webservice.patch(
    ...     canonical_releases['self_link'], 'application/json', dumps(patch))
    >>> print(response)
    HTTP/1.1 400 Bad Request
    ...
    distribution_link: You tried to modify a read-only attribute.
    enabled: You tried to modify a read-only attribute.
    reviewer_link: You tried to modify a read-only attribute.
    date_reviewed: You tried to modify a read-only attribute.

While others can be set with the appropriate authorization:

    >>> greenland = webservice.named_get("/+countries",
    ...     "getByCode", code="GL").jsonBody()
    >>> patch = {
    ...     u'country_link': greenland['self_link'],
    ...     u'status' : 'Unofficial',
    ...     u'whiteboard' : u'This mirror is too shiny to be true'
    ... }
    >>> response = test_webservice.patch(
    ...     canonical_releases['self_link'], 'application/json', dumps(patch))
    >>> response.status
    401

    >>> response = karl_webservice.patch(
    ...     canonical_releases['self_link'], 'application/json',
    ...     dumps(patch)).jsonBody()
    >>> pprint_entry(response)
    content: 'CD Image'
    country_dns_mirror: False
    country_link: 'http://.../+countries/GL'
    date_created: '2006-10-16T18:31:43.434567+00:00'
    date_reviewed: None
    description: None
    displayname: None
    distribution_link: 'http://.../ubuntu'
    enabled: True
    ftp_base_url: None
    http_base_url: 'http://releases.ubuntu.com/'
    https_base_url: None
    name: 'canonical-releases'
    official_candidate: True
    owner_link: 'http://.../~mark'
    resource_type_link: 'http://.../#distribution_mirror'
    reviewer_link: None
    rsync_base_url: None
    self_link: 'http://.../ubuntu/+mirror/canonical-releases'
    speed: '100 Mbps'
    status: 'Unofficial'
    web_link: 'http://launchpad.../ubuntu/+mirror/canonical-releases'
    whiteboard: 'This mirror is too shiny to be true'

Distribution Mirror Custom Operations
=====================================

DistributionMirror has some custom operations.

"isOfficial" returns a boolean result on whether a mirror is an official
mirror or not.

    >>> is_official_mirror = webservice.named_get(
    ...     canonical_releases['self_link'], 'isOfficial').jsonBody()
    >>> print(is_official_mirror)
    False

"getOverallFreshness" returns the freshness of the mirror determined by the
mirror prober from the mirror's last probe.

    >>> releases_mirror2 = webservice.named_get(
    ...     ubuntu['self_link'], 'getMirrorByName',
    ...     name='releases-mirror2').jsonBody()
    >>> freshness = webservice.named_get(releases_mirror2['self_link'],
    ...     'getOverallFreshness').jsonBody()
    >>> print(freshness)
    Up to date
