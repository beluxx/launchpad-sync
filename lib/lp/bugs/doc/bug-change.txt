Tracking changes to a bug
=========================

The base class for BugChanges doesn't actually implement anything.

    >>> import pytz
    >>> from lp.testing import verifyObject
    >>> from datetime import datetime
    >>> from lp.bugs.adapters.bugchange import BugChangeBase
    >>> from lp.bugs.interfaces.bugchange import IBugChange

    >>> from lp.testing.factory import LaunchpadObjectFactory
    >>> factory = LaunchpadObjectFactory()
    >>> login("test@canonical.com")
    >>> example_person = factory.makePerson(
    ...     name="ford-prefect", displayname="Ford Prefect")

    >>> nowish = datetime(2009, 3, 13, 10, 9, tzinfo=pytz.timezone('UTC'))
    >>> base_instance = BugChangeBase(when=nowish, person=example_person)
    >>> verifyObject(IBugChange, base_instance)
    True

    >>> base_instance.getBugNotification()
    Traceback (most recent call last):
      ...
    NotImplementedError...

    >>> base_instance.getBugActivity()
    Traceback (most recent call last):
      ...
    NotImplementedError...

But the basic attributes are still available.

    >>> print(base_instance.when)
    2009-03-13 10:09:00+00:00

    >>> print(base_instance.person.displayname)
    Ford Prefect

Because the base class is abstract, you can't pass it to
Bug.addChange().

    >>> example_product = factory.makeProduct(
    ...     owner=example_person, name="heart-of-gold",
    ...     displayname="Heart of Gold")
    >>> example_bug = factory.makeBug(
    ...     target=example_product, owner=example_person,
    ...     title="Reality is on the blink again",
    ...     description="I'm tired of thinking up funny strings for tests")
    >>> example_bug.addChange(base_instance)
    Traceback (most recent call last):
      ...
    NotImplementedError...

We'll create a test class that actually implements the methods we need.

    >>> from lp.bugs.mail.bugnotificationrecipients import (
    ...     BugNotificationRecipients)

    >>> example_message = factory.makeMessage(content="Hello, world")
    >>> example_person_2 = factory.makePerson(
    ...     displayname="Zaphod Beeblebrox")

    >>> recipients = BugNotificationRecipients()
    >>> recipients.addDirectSubscriber(example_person_2)

    >>> class TestBugChange(BugChangeBase):
    ...
    ...     bug_activity_data = {
    ...         'whatchanged': 'Nothing',
    ...         'oldvalue': 'OldValue',
    ...         'newvalue': 'NewValue',
    ...         }
    ...
    ...     bug_notification_data = {
    ...         'text': 'Some message text',
    ...         }
    ...
    ...     def getBugActivity(self):
    ...         return self.bug_activity_data
    ...
    ...     def getBugNotification(self):
    ...         return self.bug_notification_data

    >>> activity_to_ignore = set()
    >>> def print_bug_activity(activity):
    ...     for activity in activity:
    ...         if activity not in activity_to_ignore:
    ...             print("%s: %s %s => %s (%s)" % (
    ...                 activity.datechanged, activity.whatchanged,
    ...                 activity.oldvalue, activity.newvalue,
    ...                 activity.person.displayname))

Creating bugs generates activity records, indirectly, using the
addChange() API, but we want to ignore them for now.

    >>> activity_to_ignore.update(example_bug.activity)

BugActivity entries are added when addChange() is called.

    >>> example_bug.addChange(
    ...     TestBugChange(when=nowish, person=example_person),
    ...     recipients=recipients)
    >>> print_bug_activity(example_bug.activity)
    2009-03-13...: Nothing OldValue => NewValue (Ford Prefect)

As are BugNotifications.

    >>> from lp.bugs.model.bugnotification import BugNotification
    >>> from lp.services.database.interfaces import IStore
    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.text_contents)
    Some message text

The notification's recipients are taken from the recipients parameter
passed to addChange().

    >>> for recipient in latest_notification.recipients:
    ...     print(recipient.person.displayname)
    Zaphod Beeblebrox

But if getBugActivity() returns None, no activity entries will be added.

    >>> class NoActionBugChange(TestBugChange):
    ...     bug_activity_data = None
    ...     bug_notification_data = None

    >>> example_bug.addChange(
    ...     NoActionBugChange(when=nowish, person=example_person))
    >>> print_bug_activity(example_bug.activity)
    2009-03-13...: Nothing OldValue => NewValue (Ford Prefect)

And if getBugNotification() returns None, no notification will be added.

    >>> new_latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> new_latest_notification.id == latest_notification.id
    True

If no recipients are passed to addChange() the default recipient list
for the Bug will be used. This includes people subscribed to the
bug's target for Meta data changes, but not for lifecycle changes.


    >>> from lp.testing import person_logged_in
    >>> from lp.bugs.enums import BugNotificationLevel
    >>> lifecycle_subscriber = factory.makePerson(
    ...         displayname='Lifecycle subscriber')
    >>> metadata_subscriber = factory.makePerson(
    ...         displayname='Meta-data subscriber')
    >>> subscription = example_bug.bugtasks[0].target.addBugSubscription(
    ...     lifecycle_subscriber, lifecycle_subscriber)
    >>> with person_logged_in(lifecycle_subscriber):
    ...     filter = subscription.bug_filters.one()
    ...     filter.bug_notification_level = BugNotificationLevel.LIFECYCLE
    >>> subscription = example_bug.bugtasks[0].target.addBugSubscription(
    ...     metadata_subscriber, metadata_subscriber)
    >>> with person_logged_in(metadata_subscriber):
    ...     filter = subscription.bug_filters.one()
    ...     filter.bug_notification_level = BugNotificationLevel.METADATA
    >>> example_bug.addChange(
    ...     TestBugChange(when=nowish, person=example_person))
    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.text_contents)
    Some message text

    >>> recipients = [
    ...     recipient.person.displayname
    ...     for recipient in latest_notification.recipients]
    >>> for name in sorted(recipients):
    ...     print(name)
    Ford Prefect
    Meta-data subscriber

If you try to send a notification without adding a text body for the
notification you'll get an error.

    >>> class NoNotificationTextBugChange(TestBugChange):
    ...
    ...     bug_notification_data = {
    ...         'text': None,
    ...         }

    >>> example_bug.addChange(
    ...     NoNotificationTextBugChange(when=nowish, person=example_person))
    Traceback (most recent call last):
      ...
    AssertionError: notification_data must include a `text` value.


BugChange subclasses
--------------------

Getting the right bug change class
..................................

Given that we know what's changing and the name of the field that is
being changed, we can find a suitable IBugChange implementation to
help us describe the change.

    >>> from lp.bugs.adapters.bugchange import (
    ...     get_bug_change_class)

If get_bug_change_class() is asked for a BugChange for an object or
field that it doesn't know about, it will raise a NoBugChangeFoundError.

    >>> get_bug_change_class(object(), 'fooix')
    Traceback (most recent call last):
      ...
    lp.bugs.adapters.bugchange.NoBugChangeFoundError: Unable to find a suitable BugChange for field 'fooix' on object <object object at ...>

For fields it knows about, it will return a more suitable class.

    >>> get_bug_change_class(example_bug, 'title')
    <class '...BugTitleChange'>

get_bug_change_class will also work for BugTasks.

    >>> get_bug_change_class(example_bug.bugtasks[0], 'importance')
    <class '...BugTaskImportanceChange'>


AttributeChange
...............

The AttributeChange class offers basic functionality for dealing with
bug attribute changes.

    >>> from lp.bugs.adapters.bugchange import (
    ...     AttributeChange)

    >>> simple_change = AttributeChange(
    ...     when=nowish, person=example_person, what_changed='title',
    ...     old_value=example_bug.title, new_value='Spam')

In its getBugActivity() method AttributeChange merely returns the
field name, old value and new value as passed to its __init__()
method.

    >>> activity_data = simple_change.getBugActivity()
    >>> print(pretty(activity_data))
    {'newvalue': 'Spam',
     'oldvalue': 'Reality is on the blink again',
     'whatchanged': 'title'}


BugDescriptionChange
....................

This describes a change to the description of a
bug. getBugNotification() returns a formatted description of the
change.

    >>> from lp.bugs.adapters.bugchange import (
    ...     BugDescriptionChange)

    >>> bug_desc_change = BugDescriptionChange(
    ...     when=nowish, person=example_person,
    ...     what_changed='description', old_value=example_bug.description,
    ...     new_value='Well, maybe not')
    >>> print(bug_desc_change.getBugNotification()['text'])
    ** Description changed:
    <BLANKLINE>
    - I'm tired of thinking up funny strings for tests
    + Well, maybe not


BugTitleChange
..............

This, surprisingly, describes a title change for a bug. Again,
getBugNotification() returns a specially formatted description of
what's changed.

    >>> from lp.bugs.adapters.bugchange import (
    ...     BugTitleChange)

    >>> bug_title_change = BugTitleChange(
    ...     when=nowish, person=example_person,
    ...     what_changed='title', old_value=example_bug.title,
    ...     new_value='Spam')
    >>> print(bug_title_change.getBugNotification()['text'])
    ** Summary changed:
    <BLANKLINE>
    - Reality is on the blink again
    + Spam

BugTitleChange mutates the `what_changed` field and will return
'summary' rather than 'title'. This is to maintain naming consistency
within the UI.

    >>> print(bug_title_change.getBugActivity()['whatchanged'])
    summary


BugDuplicateChange
..................

This describes a change to the duplicate marker for a bug.

    >>> from lp.bugs.adapters.bugchange import (
    ...     BugDuplicateChange)

    >>> duplicate_bug = factory.makeBug(title="Fish can't walk")

    >>> bug_duplicate_change = BugDuplicateChange(
    ...     when=nowish, person=example_person,
    ...     what_changed='duplicateof', old_value=None,
    ...     new_value=duplicate_bug)
    >>> print(bug_duplicate_change.getBugNotification()['text'])
    ** This bug has been marked a duplicate of bug ...
       Fish can't walk

BugDuplicateChange overrides getBugActivity() to customize all the
returned fields.

    >>> print(pretty(bug_duplicate_change.getBugActivity()))
    {'newvalue': '...',
     'whatchanged': 'marked as duplicate'}


BugTagsChange
-------------

BugTagsChange is used to represent a change in a Bug's tag list.

    >>> from lp.bugs.adapters.bugchange import (
    ...     BugTagsChange)

    >>> tags_change = BugTagsChange(
    ...     when=nowish, person=example_person,
    ...     what_changed='tags',
    ...     old_value=[u'first-tag', u'second-tag', u'third-tag'],
    ...     new_value=[u'second-tag', u'third-tag', u'zillionth-tag'])

This change is expressed in the activity entry in the same way as any
other attribute change. The list of tags is converted to a
space-separated string for display.

    >>> print(pretty(tags_change.getBugActivity()))
    {'newvalue': 'second-tag third-tag zillionth-tag',
     'oldvalue': 'first-tag second-tag third-tag',
     'whatchanged': 'tags'}

Addtions and removals are expressed separately in the notification.

    >>> print(tags_change.getBugNotification()['text'])
    ** Tags removed: first-tag
    ** Tags added: zillionth-tag


CveLinkedToBug / CveUnlinkedFromBug
...................................

These describe the linking or unlinking of a CVE to a bug.

    >>> from lp.bugs.interfaces.cve import ICveSet
    >>> cve = getUtility(ICveSet)['1999-8979']

getBugNotification() returns a formatted description of the change
when a CVE is linked to a bug.

    >>> from lp.bugs.adapters.bugchange import (
    ...     CveLinkedToBug, CveUnlinkedFromBug)

    >>> bug_cve_linked = CveLinkedToBug(
    ...     when=nowish, person=example_person, cve=cve)

    >>> print(pretty(bug_cve_linked.getBugActivity()))
    {'newvalue': '1999-8979',
     'whatchanged': 'cve linked'}

    >>> print(bug_cve_linked.getBugNotification()['text'])
    ** CVE added: https://cve.mitre.org/cgi-bin/cvename.cgi?name=1999-8979

And when a CVE is unlinked from a bug.

    >>> bug_cve_unlinked = CveUnlinkedFromBug(
    ...     when=nowish, person=example_person, cve=cve)

    >>> print(pretty(bug_cve_unlinked.getBugActivity()))
    {'oldvalue': '1999-8979',
     'whatchanged': 'cve unlinked'}

    >>> print(bug_cve_unlinked.getBugNotification()['text'])
    ** CVE removed: https://cve.mitre.org/cgi-bin/cvename.cgi?name=1999-8979


BugAttachmentChange
-------------------

BugAttachmentChange is used to handle the addition and removal of
attachments from a bug.

    >>> from lp.bugs.adapters.bugchange import (
    ...     BugAttachmentChange)

You can add an attachment...

    >>> attachment = factory.makeBugAttachment(
    ...     description='sample-attachment')
    >>> attachment_change = BugAttachmentChange(
    ...     when=nowish, person=example_person,
    ...     what_changed='security_related',
    ...     old_value=None, new_value=attachment)

    >>> print(pretty(attachment_change.getBugActivity()))
    {'newvalue':
         'sample-attachment http://bugs.launchpad.test/bugs/...+files/...',
     'oldvalue': None,
     'whatchanged': 'attachment added'}

    >>> print(attachment_change.getBugNotification()['text'])
    ** Attachment added: "sample-attachment"
    http://bugs.launchpad.test/bugs/.../+attachment/.../+files/...

Or remove one.

    >>> attachment_change = BugAttachmentChange(
    ...     when=nowish, person=example_person,
    ...     what_changed='security_related',
    ...     old_value=attachment, new_value=None)

    >>> print(pretty(attachment_change.getBugActivity()))
    {'newvalue': None,
     'oldvalue':
         'sample-attachment http://bugs.launchpad.test/bugs/...+files/...',
     'whatchanged': 'attachment removed'}

    >>> print(attachment_change.getBugNotification()['text'])
    ** Attachment removed: "sample-attachment"
    http://bugs.launchpad.test/bugs/.../+attachment/.../+files/...


BugTaskAttributeChange
----------------------

BugTaskAttributeChange is a generic BugChange that can be used to
represent a change in the attributes of one of a Bug's BugTasks. It is
intended to be subclassed.

    >>> from lp.bugs.interfaces.bugtask import (
    ...     BugTaskStatus, BugTaskImportance)
    >>> from lp.bugs.adapters.bugchange import (
    ...     BugTaskAttributeChange)

BugTaskAttributeChange takes an instance of BugTask. It uses this to
work out how to describe to the user which BugTask's attributes have
changed.

Subclasses must at least define `display_attribute`.

    >>> class ExampleBugTaskAttributeChange(BugTaskAttributeChange):
    ...     display_attribute = 'title'

    >>> example_bug_task = example_bug.bugtasks[0]
    >>> task_attribute_change = ExampleBugTaskAttributeChange(
    ...     when=nowish, person=example_person,
    ...     what_changed='status',
    ...     old_value=BugTaskStatus.NEW,
    ...     new_value=BugTaskStatus.FIXRELEASED,
    ...     bug_task=example_bug_task)

    >>> print(task_attribute_change.display_activity_label)
    status
    >>> print(task_attribute_change.display_notification_label)
    Status
    >>> print(task_attribute_change.display_old_value)
    New
    >>> print(task_attribute_change.display_new_value)
    Fix Released

Several types of attribute change can be handled by
BugTaskAttributeChange.


Status changes
..............

Status changes use a BugTaskStatus's `title` attribute to describe to
the user what has changed.

    >>> from lp.bugs.adapters.bugchange import (
    ...     BugTaskStatusChange)

    >>> status_change = BugTaskStatusChange(
    ...     bug_task=example_bug_task, when=nowish, person=example_person,
    ...     what_changed='status', old_value=BugTaskStatus.NEW,
    ...     new_value=BugTaskStatus.FIXRELEASED)
    >>> print(pretty(status_change.getBugActivity()))
    {'newvalue': 'Fix Released',
     'oldvalue': 'New',
     'whatchanged': 'heart-of-gold: status'}

    >>> notification_text = status_change.getBugNotification()['text']
    >>> print(notification_text) #doctest: -NORMALIZE_WHITESPACE
    ** Changed in: heart-of-gold
           Status: New => Fix Released


Importance changes
..................

Importance changes use a BugTaskImportance's `title` attribute to
describe to the user what has changed.

    >>> from lp.bugs.adapters.bugchange import (
    ...     BugTaskImportanceChange)

    >>> importance_change = BugTaskImportanceChange(
    ...     bug_task=example_bug_task, when=nowish, person=example_person,
    ...     what_changed='importance',
    ...     old_value=BugTaskImportance.UNDECIDED,
    ...     new_value=BugTaskImportance.CRITICAL)
    >>> print(pretty(importance_change.getBugActivity()))
    {'newvalue': 'Critical',
     'oldvalue': 'Undecided',
     'whatchanged': 'heart-of-gold: importance'}

    >>> notification_text = importance_change.getBugNotification()['text']
    >>> print(notification_text) #doctest: -NORMALIZE_WHITESPACE
    ** Changed in: heart-of-gold
       Importance: Undecided => Critical


Milestone changes
.................

Milestone changes use a Milestone's `name` attribute to describe to
the user what has changed.

    >>> from lp.bugs.adapters.bugchange import (
    ...     BugTaskMilestoneChange)

    >>> milestone = factory.makeMilestone(
    ...     product=example_bug_task.product,
    ...     name="example-milestone")

    >>> milestone_change = BugTaskMilestoneChange(
    ...     bug_task=example_bug_task, when=nowish,
    ...     person=example_person, what_changed='milestone',
    ...     old_value=None, new_value=milestone)
    >>> print(pretty(milestone_change.getBugActivity()))
    {'newvalue': 'example-milestone',
     'oldvalue': None,
     'whatchanged': 'heart-of-gold: milestone'}

    >>> notification_text = milestone_change.getBugNotification()['text']
    >>> print(notification_text) #doctest: -NORMALIZE_WHITESPACE
    ** Changed in: heart-of-gold
        Milestone: None => example-milestone


Bugwatch changes
................

Bugwatch changes use a Bugwatch's `title` attribute to describe to the
user what has changed.

    >>> from lp.bugs.adapters.bugchange import (
    ...     BugTaskBugWatchChange)

    >>> bug_tracker = factory.makeBugTracker(
    ...     base_url="http://bugs.example.com/")
    >>> bug_watch = factory.makeBugWatch(
    ...     bug=example_bug_task.bug, bugtracker=bug_tracker,
    ...     remote_bug="1245")

    >>> bug_watch_change = BugTaskBugWatchChange(
    ...     bug_task=example_bug_task, when=nowish,
    ...     person=example_person, what_changed='bugwatch',
    ...     old_value=None, new_value=bug_watch)
    >>> print(pretty(bug_watch_change.getBugActivity()))
    {'newvalue': 'bugs.example.com/ #1245',
     'oldvalue': None,
     'whatchanged': 'heart-of-gold: remote watch'}

    >>> notification_text = bug_watch_change.getBugNotification()['text']
    >>> print(notification_text) #doctest: -NORMALIZE_WHITESPACE
    ** Changed in: heart-of-gold
     Remote watch: None => bugs.example.com/ #1245


Assignee changes
................

Assignee changes use the assignee's `unique_displayname` attribute to
describe to the user what has changed.

    >>> from lp.bugs.adapters.bugchange import (
    ...     BugTaskAssigneeChange)

    >>> assignee_change = BugTaskAssigneeChange(
    ...     bug_task=example_bug_task, when=nowish,
    ...     person=example_person, what_changed='assignee',
    ...     old_value=None, new_value=example_person)
    >>> print(pretty(assignee_change.getBugActivity()))
    {'newvalue': 'Ford Prefect (ford-prefect)',
     'oldvalue': None,
     'whatchanged': 'heart-of-gold: assignee'}

    >>> notification_text = assignee_change.getBugNotification()['text']
    >>> print(notification_text) #doctest: -NORMALIZE_WHITESPACE
    ** Changed in: heart-of-gold
         Assignee: (unassigned) => Ford Prefect (ford-prefect)


Target (Affects) changes
........................

Changes to the bug task target (aka affects) use the BugTaskTargetChange
class to describe the change. It inspects the `bugtargetname`
attribute for the values to use in the activity log.

    >>> from lp.bugs.adapters.bugchange import (
    ...     BugTaskTargetChange)

    >>> new_target = factory.makeProduct(name="magrathea")

    >>> target_change = BugTaskTargetChange(
    ...     bug_task=example_bug_task, when=nowish, person=example_person,
    ...     what_changed='target',
    ...     old_value=example_bug_task.target,
    ...     new_value=new_target)
    >>> print(pretty(target_change.getBugActivity()))
    {'newvalue': 'magrathea',
     'oldvalue': 'heart-of-gold',
     'whatchanged': 'affects'}

    >>> notification_text = target_change.getBugNotification()['text']
    >>> print(notification_text) #doctest: -NORMALIZE_WHITESPACE
    ** Project changed: heart-of-gold => magrathea
