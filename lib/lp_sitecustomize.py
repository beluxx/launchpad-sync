# Copyright 2009-2019 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

# This file is imported by _pythonpath.py and by the standard Launchpad
# script preamble (see LPScriptWriter in setup.py).

import itertools
import linecache
import logging
import os
import sys
import traceback
import warnings
from collections import defaultdict

from twisted.internet.defer import Deferred, DeferredList
from zope.security import checker

from lp.services.log import loglevels
from lp.services.log.logger import LaunchpadLogger
from lp.services.log.mappingfilter import MappingFilter
from lp.services.mime import customizeMimetypes
from lp.services.openid.fetcher import set_default_openid_fetcher


def add_custom_loglevels():
    """Add out custom log levels to the Python logging package."""

    # This import installs custom ZODB loglevels, which we can then
    # override. BLATHER is between INFO and DEBUG, so we can leave it.
    # TRACE conflicts with DEBUG6, and since we are not using ZEO, we
    # just overwrite the level string by calling addLevelName.
    from ZODB.loglevels import BLATHER, TRACE

    # Confirm our above assumptions, and silence lint at the same time.
    assert BLATHER == 15
    assert TRACE == loglevels.DEBUG6

    logging.addLevelName(loglevels.DEBUG2, "DEBUG2")
    logging.addLevelName(loglevels.DEBUG3, "DEBUG3")
    logging.addLevelName(loglevels.DEBUG4, "DEBUG4")
    logging.addLevelName(loglevels.DEBUG5, "DEBUG5")
    logging.addLevelName(loglevels.DEBUG6, "DEBUG6")
    logging.addLevelName(loglevels.DEBUG7, "DEBUG7")
    logging.addLevelName(loglevels.DEBUG8, "DEBUG8")
    logging.addLevelName(loglevels.DEBUG9, "DEBUG9")

    # Install our customized Logger that provides easy access to our
    # custom loglevels.
    logging.setLoggerClass(LaunchpadLogger)

    # Fix the root logger, replacing it with an instance of our
    # customized Logger. The original one is instantiated on import of
    # the logging module, so our override does not take effect without
    # this manual effort.
    old_root = logging.root
    new_root = LaunchpadLogger("root", loglevels.WARNING)

    # Fix globals.
    logging.root = new_root
    logging.Logger.root = new_root

    # Fix manager.
    manager = logging.Logger.manager
    manager.root = new_root

    # Fix existing Logger instances.
    for logger in manager.loggerDict.values():
        if getattr(logger, "parent", None) is old_root:
            logger.parent = new_root


def silence_amqp_logger():
    """Install the NullHandler on the amqp logger to silence logs."""
    amqp_logger = logging.getLogger("amqp")
    amqp_logger.addHandler(logging.NullHandler())
    amqp_logger.propagate = False


def silence_bzr_loggers():
    """Install the NullHandler on the bzr/brz loggers to silence logs."""
    for logger_name in ("bzr", "brz"):
        logger = logging.getLogger(logger_name)
        logger.addHandler(logging.NullHandler())
        logger.propagate = False


def silence_swiftclient_logger():
    """Remove debug noise generated by swiftclient and keystoneclient.

    swiftclient explicitly checks if debug messages are enabled on its
    Logger, which is unfortunate as we disable them in the handler. Not
    only does swiftclient then emit lots of noise, but it also turns
    keystoneclient debugging on.

    keystoneclient logs credentials at DEBUG.
    """
    if not os.environ.get("LP_SWIFTCLIENT_DEBUG"):
        swiftclient_logger = logging.getLogger("swiftclient")
        swiftclient_logger.setLevel(logging.INFO)
    keystoneclient_logger = logging.getLogger("keystoneclient")
    keystoneclient_logger.setLevel(logging.INFO)


def silence_zcml_logger():
    """Lower level of ZCML parsing DEBUG messages."""
    config_filter = MappingFilter({logging.DEBUG: (7, "DEBUG4")}, "config")
    logging.getLogger("config").addFilter(config_filter)


class FilterOnlyHandler(logging.Handler):
    """Logging handler that doesn't emit any messages.

    Like NullHandler, except handle() still runs to perform filtering.
    """

    def emit(self, record):
        pass


def silence_transaction_logger():
    """Lower level of DEBUG messages from the transaction module."""
    # Transaction logging is too noisy. Lower its DEBUG messages
    # to DEBUG3. Transactions log to loggers named txn.<thread_id>,
    # so we need to register a null handler with a filter to ensure
    # the logging records get mutated before being propagated up
    # to higher level loggers.
    txn_handler = FilterOnlyHandler()
    txn_filter = MappingFilter({logging.DEBUG: (8, "DEBUG3")}, "txn")
    txn_handler.addFilter(txn_filter)
    logging.getLogger("txn").addHandler(txn_handler)


def silence_warnings():
    """Silence warnings across the entire Launchpad project."""
    # pycrypto-2.0.1 on Python2.6:
    #   DeprecationWarning: the sha module is deprecated; use the hashlib
    #   module instead
    warnings.filterwarnings(
        "ignore", category=DeprecationWarning, module="Crypto"
    )
    # Filter all deprecation warnings for Zope 3.6, which emanate from
    # the zope package.
    filter_pattern = ".*(Zope 3.6|provide.*global site manager).*"
    warnings.filterwarnings(
        "ignore", filter_pattern, category=DeprecationWarning
    )


def customize_logger():
    """Customize the logging system.

    This function is also invoked by the test infrastructure to reset
    logging between tests.
    """
    silence_amqp_logger()
    silence_bzr_loggers()
    silence_zcml_logger()
    silence_transaction_logger()
    silence_swiftclient_logger()


def speed_up_traceback():
    # The traceback module calls linecache.checkcache for each traceback to
    # make sure line numbers of source files are up to date.  We generate
    # tracebacks rather frequently in timelines; source files are unlikely
    # to change over the course of a Launchpad process, especially since
    # gunicorn auto-reloads in development configurations; and a couple of
    # milliseconds per timeline action adds up.  Suppress these checks.
    class UncheckedLinecache:
        def checkcache(self, filename=None):
            pass

        def __getattr__(self, name):
            return getattr(linecache, name)

    traceback.linecache = UncheckedLinecache()


def main(instance_name=None):
    # This is called by _pythonpath.py and by the standard Launchpad script
    # preamble (see LPScriptWriter in setup.py).  The instance name is sent
    # to setup.py from the Makefile, and then written to env/instance_name.
    # We do all actual initialization here, in a more visible place.
    if instance_name is None:
        instance_name_path = os.path.join(sys.prefix, "instance_name")
        with open(instance_name_path) as instance_name_file:
            instance_name = instance_name_file.read().rstrip("\n")
    if instance_name and instance_name != "development":
        # See bug 656213 for why we do this carefully.
        os.environ.setdefault("LPCONFIG", instance_name)
    os.environ["STORM_CEXTENSIONS"] = "1"
    add_custom_loglevels()
    customizeMimetypes()
    silence_warnings()
    customize_logger()
    set_default_openid_fetcher()
    speed_up_traceback()
    checker.BasicTypes.update({defaultdict: checker.NoProxy})
    checker.BasicTypes.update({Deferred: checker.NoProxy})
    checker.BasicTypes.update({DeferredList: checker.NoProxy})
    checker.BasicTypes[itertools.groupby] = checker._iteratorChecker
    # The itertools._grouper type is not exposed by name, so we must get it
    # through actually using itertools.groupby.
    grouper = type(list(itertools.groupby([0]))[0][1])
    checker.BasicTypes[grouper] = checker._iteratorChecker
    # Work around https://github.com/zopefoundation/zope.security/issues/75.
    checker.BasicTypes[type(().__repr__)] = checker._callableChecker

    # XXX cjwatson 2020-11-20: Remove this once we upgrade to a version of
    # Breezy with
    # https://code.launchpad.net/~cjwatson/brz/fix-loggerhead-git-option
    # merged, to avoid https://bugs.launchpad.net/launchpad/+bug/1744830.
    # (But arguably we might want to figure out a way to disable the git
    # formats anyway, just in a less crude way, as we don't want to use them
    # in practice.)
    import types

    sys.modules["breezy.git"] = types.ModuleType("breezy.git")
