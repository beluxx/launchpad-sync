# Copyright 2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Tests for the vulnerability and related models."""
from lp.bugs.interfaces.vulnerability import VulnerabilityChange
from lp.services.webapp.authorization import check_permission
from lp.testing import (
    admin_logged_in,
    anonymous_logged_in,
    person_logged_in,
    TestCaseWithFactory,
    )
from lp.testing.layers import DatabaseFunctionalLayer


class TestVulnerability(TestCaseWithFactory):

    layer = DatabaseFunctionalLayer

    def test_vulnerability_permissions(self):
        vulnerability = self.factory.makeVulnerability()

        with person_logged_in(self.factory.makePerson()):
            self.assertTrue(check_permission("launchpad.View", vulnerability))
            self.assertFalse(check_permission("launchpad.Edit", vulnerability))

        with admin_logged_in():
            self.assertTrue(check_permission("launchpad.View", vulnerability))
            self.assertTrue(check_permission("launchpad.View", vulnerability))

        with anonymous_logged_in():
            self.assertFalse(check_permission("launchpad.View", vulnerability))
            self.assertFalse(check_permission("launchpad.View", vulnerability))


class TestVulnerabilityActivity(TestCaseWithFactory):

    layer = DatabaseFunctionalLayer

    def test_vulnerability_activity_changes(self):
        vulnerability = self.factory.makeVulnerability()
        changer = self.factory.makePerson()
        activity = self.factory.makeVulnerabilityActivity(
            vulnerability=vulnerability, changer=None)
        with person_logged_in(changer):
            self.assertTrue(VulnerabilityChange.DESCRIPTION,
                            activity.what_changed)
