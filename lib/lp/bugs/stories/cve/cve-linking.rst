Bug Links
=========

CVE report can be linked to bugs. Users will do that when a bug exposes
the vulnerability in the report.


Adding Links
------------

Let say that Launchpad Bug #5 records the vulnerability described in
CVE-2005-2737. A user that wants to document that relationship goes to
the CVE report and click the 'Link to Bug'.

This link is only available to registered user:

    >>> anon_browser.open('http://launchpad.test/bugs/cve/2005-2737')
    >>> anon_browser.getLink(url='+linkbug').click()
    Traceback (most recent call last):
      ...
    zope.security.interfaces.Unauthorized: ...

    >>> user_browser.open('http://launchpad.test/bugs/cve/2005-2737')
    >>> user_browser.getLink('Link to bug').click()

To link the bug, the user enters the bug ID and click the 'Link' button.

    >>> user_browser.getControl('Bug ID').value = '5'
    >>> user_browser.getControl('Link').click()

The bug is now listed under the 'Related Bugs' heading, and the bug
title is linked

    >>> content = find_tag_by_id(user_browser.contents, 'related-bugs')
    >>> print(extract_text(content))
    Related bugs and status ...
    Bug #5:...Firefox install instructions should be complete ...

    >>> print(content.a)
    <a class="sprite bug" href=".../bugs/5">Bug #5: ...

It is also possible to link a bug using its nickname. For example, bug
#2 has 'blackhole' as its nickname:

    >>> user_browser.getLink('Link to bug').click()
    >>> user_browser.getControl('Bug ID').value = 'blackholes'
    >>> user_browser.getControl('Link').click()

An error message is displayed when user enters a non-existent nickname:

    >>> for tag in find_tags_by_class(user_browser.contents, 'message'):
    ...     print(tag.decode_contents())
    There is 1 error.
    <BLANKLINE>
    Not a valid bug number or nickname.

The user can correct their error and submit the form again.

    >>> user_browser.getControl('Bug ID').value = 'blackhole'
    >>> user_browser.getControl('Link').click()

A notification is displayed telling the user which bug they just linked:

    >>> soup = find_main_content(user_browser.contents)
    >>> soup.find('div', 'informational message')
    <div class="informational message">Added link to bug #2:
    ...Blackhole Trash folder...</div>

The CVE page should not be used as a means to edit bugs and bug tasks.
Therefore there should be no bug task edit forms on the page. We test
this as an administrator since only an administrator would see such
forms. This also provides us with a means to test implicitly that bug
79637 has been fixed.

    >>> admin_browser.open('http://launchpad.test/bugs/cve/1999-8979')
    >>> for form in find_main_content(
    ...         admin_browser.contents).find_all('form'):
    ...     print(form.decode_contents())

Similarly, there should be no links allowing the user to mark the bug as
affecting another product or distribution.

    >>> 'Also affects:' in admin_browser.contents
    False


Removing links
--------------

To remove bug links, the user would use the 'Remove Bug Link' action. They
can select the bug reports that they want to unlink from the CVE.

    >>> user_browser.getLink('Remove bug link').click()
    >>> user_browser.getControl('#2: Blackhole').selected = True
    >>> user_browser.getControl('#5: Firefox').selected = True
    >>> user_browser.getControl('Remove').click()

The bug was removed from the CVE report page:

    >>> soup = find_main_content(user_browser.contents)
    >>> sorted(soup('div', 'informational message'), key=lambda v: str(v))
    [<div class="informational message">Removed link to bug #2.</div>,
    <div class="informational message">Removed link to bug #5.</div>]

    >>> 'No related bugs.' in user_browser.contents
    True


Linking private bug reports
---------------------------

    (Let's mark bug #6 as private and only accessible by an
    administrator or its subscribers.
    # XXX flacoste 2006-08-22  bug=57307:
    # This should use a private bug in our sample data.

    >>> from zope.component import getUtility
    >>> from lp.testing import login, logout
    >>> from lp.services.database.sqlbase import flush_database_updates
    >>> from lp.services.webapp.interfaces import ILaunchBag
    >>> from lp.bugs.interfaces.bug import IBugSet
    >>> login('foo.bar@canonical.com')
    >>> private_bug = getUtility(IBugSet).get(6)
    >>> current_user = getUtility(ILaunchBag).user
    >>> private_bug.setPrivate(True, current_user)
    True

    >>> private_bug.unsubscribe(current_user, current_user)
    >>> flush_database_updates()
    >>> logout()

It is possible for a user having access to the private to link the CVE
to that bug.

    >>> admin_browser.open('http://launchpad.test/bugs/cve/2005-2737')
    >>> admin_browser.getLink('Link to bug').click()
    >>> admin_browser.getControl('Bug ID').value = '6'
    >>> admin_browser.getControl('Link').click()

The user will see that linked private bug:

    >>> print(extract_text(
    ...     find_tag_by_id(admin_browser.contents, 'related-bugs')))
    Related bugs and status ...
    Bug #6: Firefox crashes when Save As dialog
    for a nonexistent window is closed ...

But anonymous users (or users which don't have access to the private
bug) will not see the bug reference at all:

    >>> anon_browser.open('http://launchpad.test/bugs/cve/2005-2737')
    >>> print(find_tag_by_id(anon_browser.contents, 'related-bugs'))
    None
