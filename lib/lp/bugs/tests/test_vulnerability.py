# Copyright 2009-2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Tests for lp.bugs.interface.IVulnerability exposed via the web service."""

import datetime
import json

import pytz
from testtools.matchers import MatchesStructure
from zope.security.proxy import removeSecurityProxy

from lp.app.enums import InformationType
from lp.bugs.enums import VulnerabilityStatus
from lp.bugs.interfaces.bugtask import BugTaskImportance
from lp.services.webapp.interfaces import OAuthPermission
from lp.testing import (
    api_url,
    person_logged_in,
    TestCaseWithFactory,
    )
from lp.testing.layers import DatabaseFunctionalLayer
from lp.testing.pages import webservice_for_person


class TestVulnerabilityWebService(TestCaseWithFactory):

    layer = DatabaseFunctionalLayer

    def test_editing_an_existing_vulnerability_attributes(self):
        vulnerability = removeSecurityProxy(
            self.factory.makeVulnerability()
        )
        owner = vulnerability.distribution.owner

        self.assertThat(
            vulnerability,
            MatchesStructure.byEquality(
                status=VulnerabilityStatus.NEEDS_TRIAGE,
                importance=BugTaskImportance.UNDECIDED,
                information_type=InformationType.PUBLIC,
                cve=None,
                description=None,
                notes=None,
                mitigation=None,
                date_made_public=None,
            )
        )
        vulnerability_url = api_url(vulnerability)
        webservice = webservice_for_person(
            owner,
            permission=OAuthPermission.WRITE_PRIVATE,
            default_api_version="devel"
        )
        now = datetime.datetime.now(pytz.UTC)

        response = webservice.patch(
            vulnerability_url,
            "application/json",
            json.dumps(
                {
                    "status": "Active",
                    "information_type": "Private",
                    "importance": "Critical",
                    "description": "Foo bar",
                    "notes": "lgp171188> Foo bar",
                    "mitigation": "Foo bar baz",
                    "importance_explanation": "Foo bar bazz",
                    "date_made_public": now.isoformat(),
                }
            )
        )
        self.assertEqual(209, response.status)
        self.assertThat(
            vulnerability,
            MatchesStructure.byEquality(
                status=VulnerabilityStatus.ACTIVE,
                importance=BugTaskImportance.CRITICAL,
                description="Foo bar",
                notes="lgp171188> Foo bar",
                mitigation="Foo bar baz",
                importance_explanation="Foo bar bazz",
                date_made_public=now,
            )
        )

    def test_creator_of_a_vulnerability_read_only(self):
        person = self.factory.makePerson()
        distribution = self.factory.makeDistribution()
        vulnerability = removeSecurityProxy(
            self.factory.makeVulnerability(
                distribution=distribution,
                creator=distribution.owner
            )
        )
        vulnerability_url = api_url(vulnerability)
        person_url = api_url(person)
        webservice = webservice_for_person(
            person,
            permission=OAuthPermission.WRITE_PRIVATE,
            default_api_version="devel"
        )

        response = webservice.patch(
            vulnerability_url,
            "application/json",
            json.dumps(
                {
                    "creator_link": person_url,
                }
            )
        )
        self.assertEqual(400, response.status)
        self.assertEqual(
            b'creator_link: You tried to modify a read-only attribute.',
            response.body
        )

    def test_distribution_of_a_vulnerability_read_only(self):
        distribution = self.factory.makeDistribution()
        vulnerability = removeSecurityProxy(
            self.factory.makeVulnerability(
                distribution=distribution,
                creator=distribution.owner
            )
        )
        another_distribution = removeSecurityProxy(
            self.factory.makeDistribution(owner=distribution.owner)
        )
        vulnerability_url = api_url(vulnerability)
        distribution_url = api_url(another_distribution)
        webservice = webservice_for_person(
            distribution.owner,
            permission=OAuthPermission.WRITE_PRIVATE,
            default_api_version="devel"
        )

        response = webservice.patch(
            vulnerability_url,
            "application/json",
            json.dumps(
                {
                    "distribution_link": distribution_url,
                }
            )
        )
        self.assertEqual(400, response.status)
        self.assertEqual(
            b'distribution_link: You tried to modify a read-only attribute.',
            response.body
        )

    def test_editing_the_cve_associated_with_a_vulnerability(self):
        person = self.factory.makePerson()
        distribution = removeSecurityProxy(
            self.factory.makeDistribution(owner=person)
        )
        cve = self.factory.makeCVE("2022-1234")
        vulnerability = removeSecurityProxy(
            self.factory.makeVulnerability(
                distribution=distribution,
                creator=person,
                cve=cve
            )
        )
        vulnerability_url = api_url(vulnerability)
        api_base = "http://api.launchpad.test/devel"
        another_cve = self.factory.makeCVE('2022-1235')
        cve_url = api_base + api_url(another_cve)

        self.assertThat(
            vulnerability,
            MatchesStructure.byEquality(
                distribution=distribution,
                cve=cve,
                creator=person,
            )
        )
        self.assertIn(distribution.name, vulnerability_url)

        webservice = webservice_for_person(
            person,
            permission=OAuthPermission.WRITE_PRIVATE,
            default_api_version="devel"
        )

        response = webservice.patch(
            vulnerability_url,
            "application/json",
            json.dumps(
                {
                    "cve_link": cve_url,
                }
            )
        )
        self.assertEqual(209, response.status)
        self.assertEqual(vulnerability.cve, another_cve)

    def test_security_admin_can_edit_vulnerability(self):
        vulnerability = removeSecurityProxy(
            self.factory.makeVulnerability()
        )
        owner = vulnerability.distribution.owner
        person = self.factory.makePerson()
        security_team = self.factory.makeTeam(members=[person])

        with person_logged_in(owner):
            vulnerability.distribution.security_admin = security_team

        self.assertThat(
            vulnerability,
            MatchesStructure.byEquality(
                status=VulnerabilityStatus.NEEDS_TRIAGE,
                importance=BugTaskImportance.UNDECIDED,
                information_type=InformationType.PUBLIC,
                cve=None,
                description=None,
                notes=None,
                mitigation=None,
                date_made_public=None,
            )
        )
        vulnerability_url = api_url(vulnerability)
        webservice = webservice_for_person(
            person,
            permission=OAuthPermission.WRITE_PRIVATE,
            default_api_version="devel"
        )
        now = datetime.datetime.now(pytz.UTC)

        response = webservice.patch(
            vulnerability_url,
            "application/json",
            json.dumps(
                {
                    "status": "Active",
                    "information_type": "Private",
                    "importance": "Critical",
                    "description": "Foo bar",
                    "notes": "lgp171188> Foo bar",
                    "mitigation": "Foo bar baz",
                    "importance_explanation": "Foo bar bazz",
                    "date_made_public": now.isoformat(),
                }
            )
        )
        self.assertEqual(209, response.status)
        self.assertThat(
            vulnerability,
            MatchesStructure.byEquality(
                status=VulnerabilityStatus.ACTIVE,
                importance=BugTaskImportance.CRITICAL,
                description="Foo bar",
                notes="lgp171188> Foo bar",
                mitigation="Foo bar baz",
                importance_explanation="Foo bar bazz",
                date_made_public=now,
            )
        )

    def test_user_without_edit_permissions_cannot_edit_vulnerability(self):
        vulnerability = removeSecurityProxy(
            self.factory.makeVulnerability()
        )
        random_user = self.factory.makePerson()
        now = datetime.datetime.now(pytz.UTC)
        vulnerability_url = api_url(vulnerability)

        webservice = webservice_for_person(
            random_user,
            permission=OAuthPermission.WRITE_PRIVATE,
            default_api_version="devel"
        )

        response = webservice.patch(
            vulnerability_url,
            "application/json",
            json.dumps(
                {
                    "status": "Active",
                    "information_type": "Private",
                    "importance": "Critical",
                    "description": "Foo bar",
                    "notes": "lgp171188> Foo bar",
                    "mitigation": "Foo bar baz",
                    "importance_explanation": "Foo bar bazz",
                    "date_made_public": now.isoformat(),
                }
            )
        )
        self.assertEqual(401, response.status)
        self.assertIn('launchpad.Edit', response.body.decode())
