====================
Test OpenID provider
====================

Introduction
============

Launchpad provides an OpenID provider (under the testopenid.test
vhost) for testing purposes and for developers to be able to log into their
development instances.  This provider is only available for development and
testing.

We are going to fake a consumer for these examples. In order to ensure
that the consumer is being fed the correct replies, we use a view that
renders the parameters in the response in an easily testable format.

    >>> anon_browser.open('http://testopenid.test/+echo?foo=bar')
    >>> print(anon_browser.contents)
    Request method: GET
    foo:bar


associate Mode
==============

Establish a shared secret between Consumer and Identity Provider.

After determining the URL of the OpenID server, the next thing a consumer
needs to do is associate with the server and get a shared secret via a
POST request.

    >>> from six.moves.urllib.parse import urlencode
    >>> anon_browser.open(
    ...     'http://testopenid.test/+openid', data=urlencode({
    ...         'openid.mode': 'associate',
    ...         'openid.assoc_type': 'HMAC-SHA1'}))
    >>> print(anon_browser.headers)
    Status: 200 Ok
    ...
    Content-Type: text/plain;charset=utf-8
    ...
    >>> print(anon_browser.contents)
    assoc_handle:{HMAC-SHA1}{...}{...}
    assoc_type:HMAC-SHA1
    expires_in:1209...
    mac_key:...
    <BLANKLINE>

Get the association handle, which we will need for later tests.

    >>> import re
    >>> [assoc_handle] = re.findall(
    ...     'assoc_handle:(.*)', anon_browser.contents)


checkid_setup Mode
==================

When we go to the OpenID setup URL, we are presented with a login form.
By entering an email address we are directed back to the consumer,
completing the OpenID request:

    >>> args = urlencode({
    ...     'openid.mode': 'checkid_setup',
    ...     'openid.identity': 'http://testopenid.test/+id/mark_oid',
    ...     'openid.assoc_handle': assoc_handle,
    ...     'openid.return_to': 'http://testopenid.test/+echo',
    ...     })
    >>> user_browser.open('http://testopenid.test/+openid?%s' % args)
    >>> print(user_browser.url)
    http://testopenid.test/+openid?...
    >>> print(user_browser.title)
    Login
    >>> user_browser.getControl(name='field.email').value = 'mark@example.com'
    >>> user_browser.getControl('Continue').click()

    >>> print(user_browser.url)
    http://testopenid.test/+echo?...
    >>> print(user_browser.contents)
    Request method: GET
    openid.assoc_handle:...
    openid.identity:http://testopenid.test/+id/mark_oid
    openid.mode:id_res...
    openid.op_endpoint:http://testopenid.test/+openid
    openid.response_nonce:...
    openid.return_to:http://testopenid.test/+echo
    openid.sig:...
    openid.signed:...
    <BLANKLINE>

We will record the signature from this response to use in the next test:

    >>> [sig] = re.findall('sig:(.*)', user_browser.contents)


check_authentication Mode
=========================

Ask an Identity Provider if a message is valid. For dumb, stateless
Consumers or when verifying an invalidate_handle response.

If an association handle is stateful (genereted using the associate Mode),
check_authentication will fail.

    >>> args = urlencode({
    ...     'openid.mode': 'check_authentication',
    ...     'openid.assoc_handle': assoc_handle,
    ...     'openid.sig': sig,
    ...     'openid.signed':  'return_to,mode,identity',
    ...     'openid.identity':
    ...         'http://testopenid.test/+id/mark_oid',
    ...     'openid.return_to': 'http://testopenid.test/+echo',
    ...     })
    >>> user_browser.open('http://testopenid.test/+openid?%s' % args)
    >>> print(user_browser.contents)
    is_valid:false
    <BLANKLINE>

If we are a dumb consumer though, we must invoke the check_authentication
mode, passing back the association handle, signature and values of all
fields that were signed.

    >>> args = urlencode({
    ...     'openid.mode': 'checkid_setup',
    ...     'openid.identity':
    ...         'http://testopenid.test/+id/mark_oid',
    ...     'openid.return_to': 'http://testopenid.test/+echo',
    ...     })
    >>> user_browser.open('http://testopenid.test/+openid?%s' % args)
    >>> user_browser.getControl(name='field.email').value = 'mark@example.com'
    >>> user_browser.getControl('Continue').click()
    >>> print(user_browser.contents)
    Request method: GET
    openid.assoc_handle:...
    openid.identity:http://testopenid.test/+id/mark_oid
    openid.mode:id_res
    openid.op_endpoint:http://testopenid.test/+openid
    openid.response_nonce:...
    openid.return_to:http://testopenid.test/+echo
    openid.sig:...
    openid.signed:...
    <BLANKLINE>

    >>> fields = dict(line.split(':', 1)
    ...               for line in user_browser.contents.splitlines()[1:]
    ...               if line.startswith('openid.'))
    >>> signed = ['openid.' + name
    ...           for name in fields['openid.signed'].split(',')]
    >>> message = dict((key, value) for (key, value) in fields.items()
    ...                if key in signed)
    >>> message.update({
    ...     'openid.mode': 'check_authentication',
    ...     'openid.assoc_handle': fields['openid.assoc_handle'],
    ...     'openid.sig': fields['openid.sig'],
    ...     'openid.signed': fields['openid.signed'],
    ...     })

    >>> args = urlencode(message)
    >>> user_browser.open('http://testopenid.test/+openid', args)
    >>> print(user_browser.contents)
    is_valid:true
    <BLANKLINE>
