Builds pages
============

These pages are based in the BuildRecordView class and
template/builds-list.pt. Basically they have a buildstate selector
action via HTTP GET and present a batched list of build records
according to the selected buildstate, by default All.

    >>> def check_builds_options(contents):
    ...     """Check if the label and/or the field for the optional
    ...     "names containing" search are present in the given page contents.
    ...
    ...     Check the presence of "build_state" selection widget via
    ...     assertion.
    ...
    ...     Check the presence of "Filter" submit button via assertion.
    ...
    ...     Return "State and Name present" if the page provide both
    ...     parameters, "State present, Name not present" if the page only
    ...     permits browse by state and "mismatch" if the page, erroneously,
    ...     provide only part of the required arguments to enable filter by
    ...     name.
    ...     """
    ...     assert six.ensure_str(
    ...         '<input type="submit" value="Filter" />') in contents
    ...
    ...     field_state = find_tag_by_id(contents, 'build_state') is not None
    ...     field_name = find_tag_by_id(contents, 'build_text') is not None
    ...     field_arch = find_tag_by_id(contents, 'arch_tag') is not None
    ...
    ...     if field_state and field_name and field_arch:
    ...         return "State, Arch and Name present"
    ...     elif field_state and field_name:
    ...         return "State and Name present"
    ...     elif field_state and not field_name :
    ...         return "State present, Name not present"
    ...     else:
    ...         return "mismatch"

The anonymous user can see filter the reports for all objects that
provide the IBuildRecordView.

For Distribution, it's possible to filter build results by state and name:

    >>> anon_browser.open("http://launchpad.test/ubuntu")
    >>> anon_browser.getLink("Builds").click()
    >>> print(anon_browser.title)
    Builds : Ubuntu

    >>> print(check_builds_options(anon_browser.contents))
    State and Name present

For DistroSeries, an architecture filter is also presented:

    >>> anon_browser.open("http://launchpad.test/ubuntu/hoary")
    >>> anon_browser.getLink("Show builds").click()
    >>> print(anon_browser.title)
    Builds : Hoary (5.04) : Ubuntu

    >>> print(check_builds_options(anon_browser.contents))
    State, Arch and Name present

For DistroArchSeries, same as Distribution:

    >>> anon_browser.open("http://launchpad.test/ubuntu/hoary/i386")
    >>> anon_browser.getLink("Show builds").click()
    >>> print(anon_browser.title)
    Builds : i386 : Hoary (5.04) : Ubuntu

    >>> print(check_builds_options(anon_browser.contents))
    State and Name present

For Builder, same as Distribution:

    >>> anon_browser.open("http://launchpad.test/builders/bob")
    >>> anon_browser.getLink("View full history").click()
    >>> print(anon_browser.title)
    Build history : Bob The Builder : Build Farm

    >>> print(check_builds_options(anon_browser.contents))
    State and Name present

For Archive (PPA), same as Distribution:

    >>> anon_browser.open(
    ...     "http://launchpad.test/~cprov/+archive/+packages")
    >>> anon_browser.getLink("View all builds").click()
    >>> print(anon_browser.title)
    Builds : PPA for Celso Providelo : Celso Providelo

    >>> print(check_builds_options(anon_browser.contents))
    State and Name present

For SourcePackage, it's only possible to filter by state.

    >>> anon_browser.open(
    ...   "http://launchpad.test/ubuntu/hoary/+source/pmount")
    >>> anon_browser.getLink("Show builds").click()
    >>> print(anon_browser.title)
    Builds : Hoary (5.04) : pmount package : Ubuntu

    >>> print(check_builds_options(anon_browser.contents))
    State present, Name not present

The source package default state is "all states":

    >>> soup = find_main_content(anon_browser.contents)
    >>> [results] = soup.find_all(attrs={'selected': 'selected'})
    >>> print(extract_text(results))
    All states

The anonymous user checks the contents of the distro builds list page.

    >>> anon_browser.open("http://launchpad.test/ubuntu/+builds")


Build titles
------------

The anonymous user can review the build titles, including 'not
initialized' one (fix bug #52704).

 * SUPERSEDED and NEEDSBUILD builds contain title

 * MANUALDEWAIT builds contain: title, dependencies-line, start,
   finished, duration and a link to the build log.

 * FAILEDTOBUILD builds are similar to MANUALDEPWAIT, but they don't
   contain dependencies-line.

    >>> anon_browser.getControl(name="build_state").value = ['all']
    >>> anon_browser.getControl("Filter").click()

    >>> def print_build_rows(contents):
    ...     rule = 30 * '-'
    ...     build_rows = find_tags_by_class(contents, 'build-row')
    ...     for row in build_rows:
    ...         print(rule)
    ...         print(row.td.img['title'])
    ...         print(extract_text(row, formatter='html'))
    ...     print(rule)

    >>> print_build_rows(anon_browser.contents)
    ------------------------------
    Successfully built
    hppa build of mozilla-firefox 0.9 in ubuntu warty RELEASE
    Build started on 2007-08-10 on Bob The Builder and finished on 2007-08-10
    taking 15 seconds &mdash; see the log
    ------------------------------
    Successfully built
    i386 build of commercialpackage 1.0-1 in ubuntu breezy-autotest RELEASE
    Build started on 2007-08-09 on an unknown build machine and finished
    on 2007-08-09 taking 10 minutes
    ------------------------------
    Failed to upload
    i386 build of cdrkit 1.0 in ubuntu breezy-autotest RELEASE
    Build started on 2007-04-19 on Bob The Builder and finished on 2007-04-20
    taking 1 minute &mdash; see the log
    ------------------------------
    Failed to build
    i386 build of cdrkit 1.0 in ubuntu warty RELEASE
    Build started at an unknown time on an unknown build machine
    ------------------------------
    Successfully built
    i386 build of pmount 0.1-1 in ubuntu breezy-autotest RELEASE
    Build started on 2005-03-24 on Bob The Builder and finished
    on 2005-03-25 taking 1 minute &mdash; see the log
    ------------------------------

    >>> anon_browser.getLink("Next").click()
    >>> print_build_rows(anon_browser.contents)
    ------------------------------
    Successfully built
    i386 build of mozilla-firefox 0.9 in ubuntu breezy-autotest RELEASE
    Build started on 2004-09-27 on Bob The Builder and finished
    on 2004-09-27 taking 2 minutes &mdash; see the log
    ------------------------------
    Successfully built
    hppa build of pmount 0.1-1 in ubuntu hoary RELEASE
    Build started on 2005-03-24 on Bob The Builder and finished
    on 2005-03-25 taking 1 minute &mdash; see the log
    ------------------------------
    Build for superseded Source
    i386 build of at 0.00 in ubuntu warty RELEASE
    ------------------------------
    Build for superseded Source
    i386 build of linux-source-2.6.15 2.6.15.3 in ubuntu warty RELEASE
    ------------------------------
    Build for superseded Source
    i386 build of netapplet 0.99.6-1 in ubuntu warty RELEASE
    ------------------------------


Searches on the build state
---------------------------

Then anonymous user checks the results of some searches on build state.

    >>> anon_browser.getControl(name="build_state").value = ['built']
    >>> anon_browser.getControl("Filter").click()
    >>> print_build_rows(anon_browser.contents)
    ------------------------------
    Successfully built
    hppa build of mozilla-firefox 0.9 in ubuntu warty RELEASE
    Build started on 2007-08-10 on Bob The Builder and finished on 2007-08-10
    taking 15 seconds &mdash; see the log
    ------------------------------
    Successfully built
    i386 build of commercialpackage 1.0-1 in ubuntu breezy-autotest RELEASE
    Build started on 2007-08-09 on an unknown build machine and finished
    on 2007-08-09 taking 10 minutes
    ------------------------------
    Successfully built
    i386 build of pmount 0.1-1 in ubuntu hoary RELEASE
    Build started on 2005-03-24 on Bob The Builder and finished on 2005-03-25
    taking 1 minute &mdash; see the log
    ------------------------------
    Successfully built
    hppa build of pmount 0.1-1 in ubuntu hoary RELEASE
    Build started on 2005-03-24 on Bob The Builder and finished on 2005-03-25
    taking 1 minute &mdash; see the log
    ------------------------------
    Successfully built
    i386 build of pmount 0.1-1 in ubuntu breezy-autotest RELEASE
    Build started on 2005-03-24 on Bob The Builder and finished on 2005-03-25
    taking 1 minute &mdash; see the log
    ------------------------------

    >>> anon_browser.getControl(name="build_state").value = ['depwait']
    >>> anon_browser.getControl("Filter").click()
    >>> print_build_rows(anon_browser.contents)
    ------------------------------
    Dependency wait
    i386 build of libstdc++ b8p in ubuntu hoary RELEASE
    Missing dependencies:
    cpp (&gt;= 4:4.0.1-3), gcc-4.0 (&gt;= 4.0.1-2)
    Build started on 2006-02-27 on Bob The Builder and finished on 2006-02-28
    taking 6 minutes &mdash; see the log
    ------------------------------

    >>> anon_browser.getControl(name="build_state").value = ['failed']
    >>> anon_browser.getControl("Filter").click()
    >>> print_build_rows(anon_browser.contents)
    ------------------------------
    Failed to build
    i386 build of cdrkit 1.0 in ubuntu warty RELEASE
    Build started at an unknown time on an unknown build machine
    ------------------------------
    Failed to build
    i386 build of foobar 1.0 in ubuntu warty RELEASE
    Build started on 2006-12-01 on
    Bob The Builder and finished on 2006-12-01
    taking 1 second &mdash; see the log
    ------------------------------
    Failed to build
    i386 build of pmount 0.1-1 in ubuntu warty RELEASE
    Build started on 2005-10-01 on Bob The Builder and finished on 2005-10-02
    taking 3 minutes &mdash; see the log
    ------------------------------


Form errors
-----------

The form will not permit the anonymous user to enter a bad value (bug
#41104).

Pagetest infrastructure won't allow us to pass a not presented field
to the form:

    >>> anon_browser.open("http://launchpad.test/+builds/bob/+history")
    >>> anon_browser.getControl(name="build_state").value = ['foo']
    Traceback (most recent call last):
    ...
    ValueError: Option ...'foo' not found ...

However even if anonymous user builds an URL with a incorrect value,
code is prepared to raise the correct exception:

    >>> anon_browser.open(
    ...     "http://launchpad.test/+builds/bob/+history?build_state=foo")
    Traceback (most recent call last):
    ...
    lp.app.errors.UnexpectedFormData: No suitable state found for value "foo"

The code also raises UnexpectedFormData when valid, but duplicated,
form values are submitted:

    >>> anon_browser.open(
    ...     "http://launchpad.test/ubuntu/+builds"
    ...     "?build_text=binutils&build_state=building"
    ...     "&build_text=binutils&build_state=all")
    Traceback (most recent call last):
    ...
    lp.app.errors.UnexpectedFormData: No suitable state found for value
    "[...'building', ...'all']"


Builder history
---------------

Check "Build History" contents, see the information about several
job processed by this builder. The main difference for the other
+builds pages is that is doesn't render the builder information for
each record, since they were obviously built by the context builder.

    >>> anon_browser.open("http://launchpad.test/+builds/bob")
    >>> anon_browser.getLink("View full history").click()

In the first batch anonymous user can see successfully-built and
failed-to-build builds.

    >>> print_build_rows(anon_browser.contents)
    ------------------------------
    Successfully built
    hppa build of mozilla-firefox 0.9 in ubuntu warty RELEASE
    Build started on 2007-08-10 and finished on 2007-08-10
    taking 15 seconds &mdash; see the log
    ------------------------------
    Successfully built
    hppa build of mozilla-firefox 0.9 in ubuntu warty RELEASE
    Build started on 2007-08-10 and finished on 2007-08-10
    taking 15 seconds &mdash; see the log
    ------------------------------
    Successfully built
    i386 build of pmount 0.1-1 in ubuntu warty RELEASE
    Build started on 2007-07-23 and finished on 2007-07-24
    taking 1 minute &mdash; see the log
    ------------------------------
    Failed to build
    i386 build of cdrkit 1.0 in ubuntu breezy-autotest RELEASE
    Build started on 2007-07-07 and finished on 2007-07-08
    taking 1 minute &mdash; see the log
    ------------------------------
    Failed to build
    i386 build of cdrkit 1.0 in ubuntu warty RELEASE
    Build started on 2007-05-29 and finished on 2007-05-30
    taking 1 minute &mdash; see the log
    ------------------------------

In the second batch, additionally to the failed-to-build builds
anonymous user can also see superseded build records, for which we
don't have much to say.

    >>> anon_browser.getLink("Next").click()
    >>> print_build_rows(anon_browser.contents)
    ------------------------------
    Failed to upload
    i386 build of cdrkit 1.0 in ubuntu breezy-autotest RELEASE
    Build started on 2007-04-19 and finished on 2007-04-20
    taking 1 minute &mdash; see the log
    ------------------------------
    Failed to build
    i386 build of foobar 1.0 in ubuntu warty RELEASE
    Build started on 2006-12-01 and finished on 2006-12-01
    taking 1 second &mdash; see the log
    ------------------------------
    Build for superseded Source
    i386 build of netapplet 0.99.6-1 in ubuntu warty RELEASE
    ------------------------------
    Build for superseded Source
    i386 build of linux-source-2.6.15 2.6.15.3 in ubuntu warty RELEASE
    ------------------------------
    Build for superseded Source
    i386 build of at 0.00 in ubuntu warty RELEASE
    ------------------------------

Finally anonymous user goes to the next batch to see how a build with
unsatisfied dependencies is presented.

    >>> anon_browser.getLink("Next").click()
    >>> print_build_rows(anon_browser.contents)
    ------------------------------
    Dependency wait
    i386 build of libstdc++ b8p in ubuntu hoary RELEASE
    Missing dependencies:
    cpp (&gt;= 4:4.0.1-3), gcc-4.0 (&gt;= 4.0.1-2)
    Build started on 2006-02-27 and finished on 2006-02-28
    taking 6 minutes &mdash; see the log
    ------------------------------
    ...


Builds page messages
--------------------

When the anonymous user first views the builds page a distribution
that has no builds, for instance 'debian' in our sampledata, the page
says 'No packages are currently building'. We assume that this is your
first view if there are no GET arguments.

    >>> anon_browser.open("http://launchpad.test/debian/+builds")

    >>> print(extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'no-default-result')))
    No 'Currently building' build records.

    >>> find_tag_by_id(anon_browser.contents, 'empty-result') is None
    True

When they update the page, the message changes to say that 'No matching
builds' be found. This message clearly differentiate first page loads
from searches, helping the anonymous user to figure out exactly what
was done before.

    >>> anon_browser.getControl(name="build_state").value = ['all']
    >>> anon_browser.getControl("Filter").click()

    >>> find_tag_by_id(
    ...     anon_browser.contents, 'no-default-result') is None
    True

    >>> print(extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'empty-result')))
    No matching builds.

If there *are* builds present, the anonymous user does not see any
special messages. (We added this to catch bug #160331.)

    >>> anon_browser.open("http://launchpad.test/ubuntu/+builds")

    >>> find_tag_by_id(anon_browser.contents, 'empty-result') is None
    True

    >>> find_tag_by_id(anon_browser.contents, 'no-default-result') is None
    True

The same mechanism still works for a SourcePackage-Builds page with
no builds, see bug 62545.

After opening a empty SourcePackage Builds page anonymous user will
repeat the same set of accesses done for Distribution Builds page.

    >>> anon_browser.open(
    ...    "http://launchpad.test/"
    ...    "ubuntu/hoary/+source/mozilla-firefox/+builds")

When anonymous user first load only 'No packages currently building'
message is presented.

    >>> print(extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'no-default-result')))
    No build records.

    >>> find_tag_by_id(anon_browser.contents, 'empty-result') is None
    True

When they update the page, the message for empty results changes to 'No
matching builds'.

    >>> anon_browser.getControl(name="build_state").value = ['all']
    >>> anon_browser.getControl("Filter").click()

    >>> find_tag_by_id(anon_browser.contents, 'no-default-result') is None
    True

    >>> print(extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'empty-result')))
    No matching builds.

The described mechanism works similarly for:

 * Builder History;
 * DistroSeries Builds and
 * DistroArchSeries Builds.


Partner builds
--------------

Anonymous user can see builds of partner packages on the same builds
page as any other packages from the primary archive.

    >>> anon_browser.open(
    ...    "http://launchpad.test/ubuntu//+builds?build_text="
    ...    "commercialpackage&build_state=built")

    >>> print(extract_text(
    ...    find_tags_by_class(anon_browser.contents, 'listing')[0]))
    i386 build of commercialpackage 1.0-1 in ubuntu breezy-autotest RELEASE
    ...

And also on the distro series builds page:

    >>> anon_browser.open(
    ...    "http://launchpad.test/ubuntu/breezy-autotest/+builds"
    ...    "?build_text=commercialpackage&build_state=built")

    >>> print(extract_text(
    ... find_tags_by_class(anon_browser.contents, 'listing')[0]))
    i386 build of commercialpackage 1.0-1 in ubuntu breezy-autotest RELEASE
    ...


Upload status
-------------

A (distro) source package release page shows any builds for that source and
the status of the build.  If the build has been uploaded but not yet
processed, the upload 'status' is shown in parentheses after the build
link.

    # Create testing source publications.
    >>> from zope.component import getUtility
    >>> from lp.registry.interfaces.distribution import IDistributionSet
    >>> from lp.soyuz.tests.test_publishing import SoyuzTestPublisher
    >>> login('foo.bar@canonical.com')
    >>> test_publisher = SoyuzTestPublisher()
    >>> ubuntu = getUtility(IDistributionSet).getByName('ubuntu')
    >>> warty = ubuntu.getSeries('warty')
    >>> unused = test_publisher.setUpDefaultDistroSeries(warty)
    >>> test_publisher.addFakeChroots(warty)
    >>> source = test_publisher.getPubSource(
    ...     sourcename='testing', version='1.0',
    ...     architecturehintlist='any')
    >>> binaries = test_publisher.getPubBinaries(pub_source=source)
    >>> transaction.commit()
    >>> logout()

Such feature is visible when anonymous user access the
`DistributionSourcePackageRelease` page in the 'Builds' portlet.

    >>> anon_browser.open(
    ...     "http://launchpad.test/ubuntu/+source/testing/1.0")
    >>> print(extract_text(find_portlet(anon_browser.contents, 'Builds')))
    Builds
    Warty: hppa i386

    # Update the upload record for the i386 build so it looks like
    # it is pending approval.
    >>> login('foo.bar@canonical.com')
    >>> [build_hppa, build_i386] = source.getBuilds()
    >>> from zope.security.proxy import removeSecurityProxy
    >>> from lp.soyuz.enums import PackageUploadStatus
    >>> from lp.soyuz.model.queue import PassthroughStatusValue
    >>> removeSecurityProxy(build_i386.package_upload).status = (
    ...     PassthroughStatusValue(PackageUploadStatus.UNAPPROVED))
    >>> transaction.commit()
    >>> logout()

    >>> anon_browser.reload()
    >>> print(extract_text(find_portlet(anon_browser.contents, 'Builds')))
    Builds
    Warty: hppa i386 (Unapproved)
