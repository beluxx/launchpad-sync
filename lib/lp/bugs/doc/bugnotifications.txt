
Bug notifications
=================


What is a bug notification?
---------------------------

A bug notification gets added when something interesting happens to the
bug. It's stored in a a table, and later on a cronscript constructs an
email and sends the notification to the bug's subscribers.


When do bug notifications get added?
------------------------------------

Not *every* change on a bug causes a notification to be added. This
section will give a rundown of the things that do cause notifications to
be sent. To start with, let's login:

    >>> login("test@canonical.com")

Here are the things that cause bug notifications to be added and what
those notifications look like.


Reporting a new bug
...................

    >>> from zope.event import notify
    >>> from lazr.lifecycle.event import ObjectCreatedEvent
    >>> from lp.bugs.interfaces.bug import CreateBugParams
    >>> from lp.registry.interfaces.distribution import IDistributionSet
    >>> from lp.registry.interfaces.distroseries import IDistroSeriesSet
    >>> from lp.registry.interfaces.person import IPersonSet
    >>> from lp.registry.interfaces.product import IProductSet
    >>> from lp.registry.interfaces.sourcepackagename import ISourcePackageNameSet

    >>> bug_submitter = getUtility(IPersonSet).get(12)
    >>> firefox = getUtility(IProductSet).get(4)

    >>> params = CreateBugParams(
    ...     title="firefox crashes all the time",
    ...     comment="this is a comment", owner=bug_submitter)
    >>> firefox_crashes = firefox.createBug(params)

    >>> from lp.bugs.model.bugnotification import BugNotification
    >>> from lp.services.database.interfaces import IStore
    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.owner.displayname)
    Sample Person

    >>> latest_notification.is_comment
    True
    >>> print(latest_notification.message.text_contents)
    this is a comment

Notifications usually have references to a corresponding bug activity.  These
can get you details on precisely what changed from a more programmatic
perspective.  You can get details on what the activity provides in
bugactivity.txt, but for now here is a small demo.

    >>> print(latest_notification.activity.whatchanged)
    bug
    >>> print(latest_notification.activity.person.displayname)
    Sample Person


Editing a bug report
....................

    >>> from lp.services.webapp.snapshot import notify_modified

    >>> with notify_modified(firefox_crashes, ["description"]):
    ...     firefox_crashes.description = "a new description"

    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.owner.displayname)
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print(latest_notification.message.text_contents)
    ** Description changed:
    ...
    >>> print(latest_notification.activity.attribute)
    description
    >>> print(latest_notification.activity.oldvalue)
    this is a comment
    >>> print(latest_notification.activity.newvalue)
    a new description


Filing a new task on an existing bug
....................................

There are three kinds of tasks that can be added to an existing
bug. Let's take a look at each type.


    ==== Distro Task ====

    A task that says this bug must be fixed in a certain distro. Because no
    specific series is specified, the developer will assume that the fix
    belongs in the current development series. For backporting a fix to a
    specific distro series, see 3.2.

    >>> from lp.bugs.interfaces.bugtask import IBugTaskSet
    >>> debian = getUtility(IDistributionSet).get(3)
    >>> firefox_source = getUtility(ISourcePackageNameSet).get(1)
    >>> firefox_crashes_in_debian = getUtility(IBugTaskSet).createTask(
    ...     firefox_crashes, bug_submitter,
    ...     debian.getSourcePackage(firefox_source))
    >>> notify(ObjectCreatedEvent(
    ...     firefox_crashes_in_debian, firefox_crashes_in_debian.owner))

    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.owner.displayname)
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print(latest_notification.message.text_contents)
    ** Also affects: mozilla-firefox (Debian)
    ...


    ==== Distro Series Task ====

    Similar to a distro task, except that a task filed on a specific
    distro series is meant to be used for backport fixes (critical data
    loss or security bugs), or tasks targeted to current and future
    series. Tasks filed on specific distro seriess are not listed in
    the more generic, distro-wide bug task listings.

    >>> sid = getUtility(IDistroSeriesSet).get(8)
    >>> firefox_crashes_in_sid = getUtility(IBugTaskSet).createTask(
    ...     firefox_crashes, bug_submitter,
    ...     sid.getSourcePackage(firefox_source))
    >>> notify(ObjectCreatedEvent(
    ...     firefox_crashes_in_sid, firefox_crashes_in_sid.owner))

    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.owner.displayname)
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print(latest_notification.message.text_contents)
    ** Also affects: mozilla-firefox (Debian Sid)
    ...


    ==== Upstream Task ====

    An upstream tasks notes that a bug needs to be fixed upstream. "Upstream"
    is a somewhat ambiguous term -- it can have different meanings in the eyes
    of an Ubuntu maintainer vs. a maintainer of a package from an Ubuntu
    derivative. At the moment, "upstream" means "the distro-agnostic place from
    which we procured a source tarball to create a source package for a distro."
    The common case will be that bugs filed in distros bubble up to upstream,
    and are fixed there then bubble back down (via patches) to the various
    distros via patches.

    >>> evolution = getUtility(IProductSet).get(5)
    >>> evolution_crashes_too = getUtility(IBugTaskSet).createTask(
    ...     firefox_crashes, bug_submitter, evolution)
    >>> notify(ObjectCreatedEvent(
    ...     evolution_crashes_too, evolution_crashes_too.owner))

    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.owner.displayname)
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print(latest_notification.message.text_contents)
    ** Also affects: evolution
    ...


    ==== ProductSeries Task ====

    Similar to an upstream task, except that a task filed on a specific
    product series is meant to target a bug to a specific series.

    >>> trunk = evolution.getSeries('trunk')
    >>> firefox_crashes_in_trunk = getUtility(IBugTaskSet).createTask(
    ...     firefox_crashes, bug_submitter, trunk)
    >>> notify(ObjectCreatedEvent(
    ...     firefox_crashes_in_trunk, firefox_crashes_in_trunk.owner))

    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.owner.displayname)
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print(latest_notification.message.text_contents)
    ** Also affects: evolution/trunk
    ...


Commenting on a bug report
..........................

    >>> from lp.bugs.interfaces.bugmessage import IBugMessageSet

    >>> bugmessageset = getUtility(IBugMessageSet)
    >>> current_user = getUtility(ILaunchBag).user
    >>> comment_on_firefox_crashes_in_debian = bugmessageset.createMessage(
    ...     subject="some title", content="just a test comment",
    ...     bug=firefox_crashes, owner=current_user)
    >>> notify(ObjectCreatedEvent(comment_on_firefox_crashes_in_debian))

    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.owner.displayname)
    Sample Person

    >>> latest_notification.is_comment
    True
    >>> print(latest_notification.message.text_contents)
    just a test comment


Editing a task
..............

Let's demonstrate a notification email where Sample Person marks a
task Fixed, and assigns themselves to it.

    >>> from lp.bugs.interfaces.bugtask import BugTaskStatus

    >>> with notify_modified(
    ...         firefox_crashes_in_debian, ["status", "assignee"]):
    ...     firefox_crashes_in_debian.transitionToStatus(
    ...         BugTaskStatus.FIXRELEASED, getUtility(ILaunchBag).user)
    ...     firefox_crashes_in_debian.transitionToAssignee(bug_submitter)

    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.owner.displayname)
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print(latest_notification.message.text_contents)
    ** Changed in: mozilla-firefox (Debian)
    ...

    >>> with notify_modified(
    ...         firefox_crashes_in_trunk, ["status", "assignee"]):
    ...     firefox_crashes_in_trunk.transitionToStatus(
    ...         BugTaskStatus.FIXRELEASED, getUtility(ILaunchBag).user)
    ...     firefox_crashes_in_trunk.transitionToAssignee(bug_submitter)

    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.owner.displayname)
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print(latest_notification.message.text_contents)
    ** Changed in: evolution/trunk
    ...


Adding and editing a CVE reference
..................................

Adding a CVE reference to a bug also causes a notification email to go
out to the bug notification recipient list. Let's create a CVE ref and
attach it to the firefox_crashes bug that we've been using throughout
this document:

    >>> from lp.bugs.interfaces.cve import CveStatus, ICveSet
    >>> cve = getUtility(ICveSet).new(sequence="2004-0276",
    ...     description="a brief CVE description", status=CveStatus.ENTRY)
    >>> from lp.bugs.model.bug import Bug
    >>> bug = Bug.get(1)
    >>> bugcve = cve.linkBug(bug) # note this creates the event and notifies

    >>> latest_notification = IStore(BugNotification).find(
    ...     BugNotification).order_by(BugNotification.id).last()
    >>> print(latest_notification.message.owner.displayname)
    Sample Person

    >>> latest_notification.is_comment
    False
    >>> print(latest_notification.message.text_contents)
    ** CVE added: https://cve.mitre.org/cgi-bin/cvename.cgi?name=2004-0276


Expiring notifications
......................

During bulk imports or changes of bugs, we often want to suppress
email notifications.  Due to the previous operation, there is a
pending bug notification for bug 1:

    >>> notifications = IStore(BugNotification).find(
    ...     BugNotification, bug_id=1, date_emailed=None)
    >>> notifications.count()
    1

This notification can be expired using the expireNotifications()
method:

    >>> bug.expireNotifications()
    >>> notifications = IStore(BugNotification).find(
    ...     BugNotification, bug_id=1, date_emailed=None)
    >>> notifications.count()
    0
