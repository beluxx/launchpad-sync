# Copyright 2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Tests for the vulnerability and related models."""
from zope.component import getUtility

from lp.bugs.interfaces.vulnerability import (
    IVulnerabilitySet,
    VulnerabilityChange,
    )
from lp.services.webapp.authorization import check_permission
from lp.testing import (
    admin_logged_in,
    anonymous_logged_in,
    login_person,
    person_logged_in,
    TestCaseWithFactory,
    verifyObject,
    )
from lp.testing.layers import DatabaseFunctionalLayer


class TestVulnerability(TestCaseWithFactory):

    layer = DatabaseFunctionalLayer

    def test_vulnerability_permissions(self):
        vulnerability = self.factory.makeVulnerability()

        with person_logged_in(self.factory.makePerson()):
            self.assertTrue(check_permission("launchpad.View", vulnerability))
            self.assertFalse(check_permission("launchpad.Edit", vulnerability))

        with admin_logged_in():
            self.assertTrue(check_permission("launchpad.View", vulnerability))
            self.assertTrue(check_permission("launchpad.View", vulnerability))

        with anonymous_logged_in():
            self.assertFalse(check_permission("launchpad.View", vulnerability))
            self.assertFalse(check_permission("launchpad.View", vulnerability))


class TestVulnerabilityActivity(TestCaseWithFactory):

    layer = DatabaseFunctionalLayer

    def test_vulnerability_activity_changes(self):
        vulnerability = self.factory.makeVulnerability()
        changer = self.factory.makePerson()
        activity = self.factory.makeVulnerabilityActivity(
            vulnerability=vulnerability, changer=None)
        with person_logged_in(changer):
            self.assertTrue(VulnerabilityChange.DESCRIPTION,
                            activity.what_changed)


class TestVulnerabilitySet(TestCaseWithFactory):

    layer = DatabaseFunctionalLayer

    def test_VulnerabilitySet_implements_IVulnerabilitySet(self):
        vulnerabilitySet = getUtility(IVulnerabilitySet)
        self.assertTrue(verifyObject(IVulnerabilitySet, vulnerabilitySet))

    def test_getBugVulnerabilityCount(self):
        login_person(self.factory.makePerson())

        vulnerability1 = self.factory.makeVulnerability()
        vulnerability2 = self.factory.makeVulnerability()
        bug1 = self.factory.makeBug()
        bug2 = self.factory.makeBug()
        initial_number = getUtility(
            IVulnerabilitySet).getBugVulnerabilityCount()
        vulnerability1.linkBug(bug1)
        self.assertEqual(
            initial_number + 1,
            getUtility(IVulnerabilitySet).getBugVulnerabilityCount())
        vulnerability2.linkBug(bug2)
        self.assertEqual(
            initial_number + 2,
            getUtility(IVulnerabilitySet).getBugVulnerabilityCount())
        vulnerability2.linkBug(bug1)
        self.assertEqual(
            initial_number + 3,
            getUtility(IVulnerabilitySet).getBugVulnerabilityCount())
        vulnerability1.unlinkBug(bug1)
        vulnerability2.unlinkBug(bug2)
        vulnerability2.unlinkBug(bug1)
        self.assertEqual(
            initial_number,
            getUtility(IVulnerabilitySet).getBugVulnerabilityCount())
