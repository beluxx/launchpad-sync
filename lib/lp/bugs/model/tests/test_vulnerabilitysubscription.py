# Copyright 2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Tests for the VulnerabilitySubscription model."""
from zope.component import getUtility

from lp.app.interfaces.launchpad import ILaunchpadCelebrities
from lp.bugs.interfaces.vulnerabilitysubscription import (
    IVulnerabilitySubscription,
)
from lp.bugs.model.vulnerabilitysubscription import VulnerabilitySubscription
from lp.testing import TestCaseWithFactory, person_logged_in, verifyObject
from lp.testing.layers import DatabaseFunctionalLayer


class TestVulnerabilitySubscription(TestCaseWithFactory):
    layer = DatabaseFunctionalLayer

    def test_VulnerabilitySubscription_implements_its_interface(self):
        person = self.factory.makePerson()
        vulnerability = self.factory.makeVulnerability()
        subscription = VulnerabilitySubscription(vulnerability, person, person)
        self.assertTrue(verifyObject(IVulnerabilitySubscription, subscription))

    def test_canBeUnsubscribedByUser_user_None(self):
        person = self.factory.makePerson()
        subscription = VulnerabilitySubscription(
            self.factory.makeVulnerability(), person, person
        )
        self.assertFalse(subscription.canBeUnsubscribedByUser(None))

    def test_canBeUnsubscribedByUser_self(self):
        person = self.factory.makePerson()
        subscription = VulnerabilitySubscription(
            self.factory.makeVulnerability(), person, self.factory.makePerson()
        )
        self.assertTrue(subscription.canBeUnsubscribedByUser(person))

    def test_canBeUnsubscribedByUser_random_user(self):
        person = self.factory.makePerson()
        subscription = VulnerabilitySubscription(
            self.factory.makeVulnerability(), person, person
        )
        self.assertFalse(
            subscription.canBeUnsubscribedByUser(self.factory.makePerson())
        )

    def test_canBeUnsubscribedByUser_vulnerability_creator(self):
        person = self.factory.makePerson()
        creator_member = self.factory.makePerson()
        creator = self.factory.makeTeam(members=[creator_member])
        subscription = VulnerabilitySubscription(
            self.factory.makeVulnerability(creator=creator), person, person
        )
        self.assertTrue(subscription.canBeUnsubscribedByUser(creator_member))

    def test_canBeUnsubscribedByUser_distribution_owner(self):
        person = self.factory.makePerson()
        vulnerability = self.factory.makeVulnerability()
        subscription = VulnerabilitySubscription(vulnerability, person, person)
        self.assertTrue(
            subscription.canBeUnsubscribedByUser(
                vulnerability.distribution.owner
            )
        )

    def test_canBeUnsubscribedByUser_security_admin(self):
        person = self.factory.makePerson()
        security_admin = self.factory.makePerson()
        security_admins = self.factory.makeTeam(members=[security_admin])
        vulnerability = self.factory.makeVulnerability()
        with person_logged_in(vulnerability.distribution.owner):
            vulnerability.distribution.security_admin = security_admins
        subscription = VulnerabilitySubscription(vulnerability, person, person)
        self.assertTrue(subscription.canBeUnsubscribedByUser(security_admin))

    def test_canBeUnsubscribedByUser_subscription_creator(self):
        person = self.factory.makePerson()
        person2 = self.factory.makePerson()
        subscription = VulnerabilitySubscription(
            self.factory.makeVulnerability(), person, person2
        )
        self.assertTrue(subscription.canBeUnsubscribedByUser(person2))

    def test_canBeUnsubscribedByUser_admins(self):
        person = self.factory.makePerson()
        subscription = VulnerabilitySubscription(
            self.factory.makeVulnerability(), person, person
        )
        self.assertTrue(
            subscription.canBeUnsubscribedByUser(
                getUtility(ILaunchpadCelebrities).admin.teamowner
            )
        )
