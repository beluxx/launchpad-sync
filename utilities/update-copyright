#!/usr/bin/python3
#
# Copyright 2010-2022 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Update the year in copyright notices.

This simple script determines the changed files and updates the copyright
notice to reflect the current year. Looks for the notice in the first three
lines of the file and leaves the file unchanged if it finds none.
"""

import os
import re
import sys
from datetime import date
from subprocess import PIPE, Popen

# This script lives in the 'utilites' directory.
UTILITIES_DIR = os.path.dirname(__file__)
CURRENT_YEAR = date.today().year
copyright_pattern = re.compile(
    "Copyright (?P<years>(?P<yearfrom>[0-9]{4})(-[0-9]{4})?) Canonical Ltd."
)


def years_string(yearfrom):
    """Build the new years string."""
    if int(yearfrom) >= CURRENT_YEAR:
        return yearfrom
    return "%s-%d" % (yearfrom, CURRENT_YEAR)


def update_copyright(lines):
    """Update the copyright notice in the given file lines."""
    for line in range(min(len(lines), 5)):
        match = copyright_pattern.search(lines[line])
        if match is not None:
            old_years = match.group("years")
            new_years = years_string(match.group("yearfrom"))
            if old_years != new_years:
                lines[line] = lines[line].replace(old_years, new_years)
                return True
            return False
    return False


def update_files(filenames):
    """Open the files with the given file names and update them."""
    for filename in filenames:
        if not os.path.isfile(filename):
            print(
                "Skipped: %s does not exist or is not a regular file."
                % (filename)
            )
            continue
        if not os.access(filename, os.W_OK):
            print("Skipped: %s is not writeable." % filename)
            continue
        with open(filename) as f:
            lines = f.readlines()
        changed = update_copyright(lines)
        if changed:
            newfile = open(filename, "w")
            newfile.write("".join(lines))
            newfile.close()
            print("Updated: %s" % filename)
        else:
            print("Unchanged: %s" % filename)


def find_changed_files():
    """Use the find-changed-files.sh script."""
    find_changed_files_cmd = [
        os.path.join(UTILITIES_DIR, "find-changed-files.sh")
    ]
    filenames = Popen(
        find_changed_files_cmd, stdout=PIPE, universal_newlines=True
    ).communicate()[0]
    return filenames.strip()


def find_and_update():
    """Put it all together."""
    filenames = find_changed_files()
    if filenames != "":
        update_files(filenames.splitlines())


if __name__ == "__main__":
    if len(sys.argv) < 2:
        find_and_update()
    else:
        update_files(sys.argv[1:])
